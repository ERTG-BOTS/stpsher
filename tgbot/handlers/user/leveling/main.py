import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.keyboards.user.leveling.main import leveling_kb
from tgbot.keyboards.user.main import MainMenu

user_leveling_router = Router()
user_leveling_router.message.filter(
    F.chat.type == "private",
)
user_leveling_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_leveling_router.callback_query(MainMenu.filter(F.menu == "leveling"))
async def user_leveling_cb(callback: CallbackQuery, user: User, stp_repo: RequestsRepo):
    user_achievements = await stp_repo.user_achievement.get_user_achievements(
        user.user_id
    )
    user_awards = await stp_repo.user_award.get_user_awards(user.user_id)
    achievements_sum = await stp_repo.user_achievement.get_user_achievements_sum(
        user_id=user.user_id
    )
    awards_sum = await stp_repo.user_award.get_user_awards_sum(user_id=user.user_id)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö
    most_frequent_achievement = (
        await stp_repo.user_achievement.get_most_frequent_achievement(
            user_id=user.user_id
        )
    )
    most_used_award = await stp_repo.user_award.get_most_used_award(
        user_id=user.user_id
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if most_frequent_achievement:
        achievement_text = (
            f"{most_frequent_achievement[0]} ({most_frequent_achievement[1]}x)"
        )
    else:
        achievement_text = "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–π —á–∞—Å—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    if most_used_award:
        award_text = f"{most_used_award[0]} ({most_used_award[1]}x)"
    else:
        award_text = "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"

    # TODO –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
    await callback.message.edit_text(
        f"""<b>üèÜ –ê—á–∏–≤–∫–∏</b>

<b>‚öîÔ∏è –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> {round(achievements_sum / 100)}
<b>‚ú® –ö–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤:</b> {achievements_sum - awards_sum} –±–∞–ª–ª–æ–≤

<blockquote><b>üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {achievements_sum} –±–∞–ª–ª–æ–≤
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {awards_sum} –±–∞–ª–ª–æ–≤

–ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_achievements)}
–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: {len(user_awards)}

<b>üéØ –°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {achievement_text}
<b>üèÖ –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</b> {award_text}</blockquote>""",
        reply_markup=leveling_kb(),
    )


# @user_achievements_router.callback_query(AwardsMenu.filter(F.menu == "awards_all"))
# async def awards_all(
#     callback: CallbackQuery, callback_data: AwardsMenu, stp_repo: RequestsRepo
# ):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
#     """
#
#     # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
#     page = getattr(callback_data, "page", 1)
#
#     all_awards = await stp_repo.award.get_awards()
#     logger.info(all_awards)
#
#     # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     awards_per_page = 5
#     total_awards = len(all_awards)
#     total_pages = (total_awards + awards_per_page - 1) // awards_per_page
#
#     # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û!
#     start_idx = (page - 1) * awards_per_page  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é page
#     end_idx = start_idx + awards_per_page
#     page_awards = all_awards[start_idx:end_idx]
#
#     # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     awards_list = []
#     for counter, award in enumerate(page_awards, start=start_idx + 1):
#         awards_list.append(f"""{counter}. <b>{award.name}</b>
# üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost}
# üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}
# üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {award.division}""")
#         if award.count > 0:
#             awards_list.append(f"""üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}""")
#         awards_list.append("")
#
#     message_text = f"""<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
# <i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>
#
# <blockquote expandable>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥:
# –ù–¢–ü: {sum(1 for award in all_awards if award.division == "–ù–¢–ü")}
# –ù–¶–ö: {sum(1 for award in all_awards if award.division == "–ù–¶–ö")}</blockquote>
#
# {"\n".join(awards_list)}"""
#
#     await callback.message.edit_text(
#         message_text, reply_markup=awards_paginated_kb(page, total_pages)
#     )
#     logger.info(
#         f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
#     )
