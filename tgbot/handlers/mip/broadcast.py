import asyncio
import logging

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, PhotoSize

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import MipFilter
from tgbot.keyboards.mip.broadcast import (
    BroadcastMenu,
    broadcast_kb,
    broadcast_type_kb,
    confirmation_kb,
    division_selection_kb,
    heads_selection_kb,
)
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.states.mip.broadcast import BroadcastState
from tgbot.services.broadcaster import send_message

mip_broadcast_router = Router()
mip_broadcast_router.message.filter(F.chat.type == "private", MipFilter())
mip_broadcast_router.callback_query.filter(
    F.message.chat.type == "private", MipFilter()
)

logger = logging.getLogger(__name__)


@mip_broadcast_router.callback_query(MainMenu.filter(F.menu == "broadcast"))
async def mip_broadcast_cmd(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        """<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é

–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ

<i>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</i>""",
        reply_markup=broadcast_kb(),
    )
    await state.set_state(BroadcastState.waiting_message)


@mip_broadcast_router.message(BroadcastState.waiting_message, F.text)
async def process_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.update_data(
        message_text=message.text, 
        message_type="text", 
        original_message_id=message.message_id,
        original_chat_id=message.chat.id
    )

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_broadcast_type_selection(message, state)


@mip_broadcast_router.message(BroadcastState.waiting_message, F.photo)
async def process_photo_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
    caption = message.caption or ""

    await state.update_data(
        message_text=caption, 
        message_type="photo", 
        original_message_id=message.message_id,
        original_chat_id=message.chat.id
    )

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_broadcast_type_selection(message, state)


async def show_broadcast_type_selection(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    message_preview = data.get("message_text", "")
    if len(message_preview) > 100:
        message_preview = message_preview[:100] + "..."

    has_photo = data.get("message_type") == "photo"
    photo_text = "\nüì∏ –° —Ñ–æ—Ç–æ" if has_photo else ""

    bot_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"""<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}{photo_text}

<b>–í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b>""",
        reply_markup=broadcast_type_kb(),
    )

    await state.update_data(bot_message_id=bot_message.message_id)
    await state.set_state(BroadcastState.selecting_type)


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type, BroadcastMenu.filter(F.action == "everyone")
)
async def broadcast_everyone(
    callback: CallbackQuery, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"""
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await stp_repo.user.get_users()
    user_count = len(all_users)

    message_preview = data.get("message_text", "")
    if len(message_preview) > 150:
        message_preview = message_preview[:150] + "..."

    has_photo = data.get("message_type") == "photo"
    photo_text = "\nüì∏ –° —Ñ–æ—Ç–æ" if has_photo else ""

    await callback.message.edit_text(
        f"""<b>üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({user_count} —á–µ–ª.)

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}{photo_text}

<b>‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>""",
        reply_markup=confirmation_kb(),
    )

    await state.update_data(
        recipients="everyone",
        recipient_ids=[user.user_id for user in all_users],
        user_count=user_count,
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type, BroadcastMenu.filter(F.action == "division")
)
async def select_division(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    await callback.message.edit_text(
        """<b>üì¢ –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:""",
        reply_markup=division_selection_kb(),
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type,
    BroadcastMenu.filter(F.action.in_(["ntp1", "ntp2", "nck"])),
)
async def broadcast_division(
    callback: CallbackQuery,
    callback_data: BroadcastMenu,
    state: FSMContext,
    stp_repo: MainRequestsRepo,
):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é"""
    division_code = callback_data.action.upper()  # "NTP" or "NCK"
    division_name = ""
    match division_code:
        case "NTP1":
            division_name = "–ù–¢–ü1"
        case "NTP2":
            division_name = "–ù–¢–ü2"
        case "NCK":
            division_name = "–ù–¶–ö"
        case _:
            division_name = "–ù–¶–ö"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    all_users = await stp_repo.user.get_users()
    division_users = [
        user for user in all_users if user.division == division_name and user.user_id
    ]
    user_count = len(division_users)

    if not division_users:
        await callback.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {division_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True
        )
        return

    data = await state.get_data()
    message_preview = data.get("message_text", "")
    if len(message_preview) > 150:
        message_preview = message_preview[:150] + "..."

    has_photo = data.get("message_type") == "photo"
    photo_text = "\nüì∏ –° —Ñ–æ—Ç–æ" if has_photo else ""

    await callback.message.edit_text(
        f"""<b>üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {division_name} ({user_count} —á–µ–ª.)

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}{photo_text}

<b>‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º {division_name}!</b>""",
        reply_markup=confirmation_kb(),
    )

    await state.update_data(
        recipients=division_code.lower(),
        recipient_ids=[user.user_id for user in division_users],
        user_count=user_count,
        division_name=division_name,
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type, BroadcastMenu.filter(F.action == "groups")
)
async def select_heads(
    callback: CallbackQuery, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–í—ã–±–æ—Ä —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_users = await stp_repo.user.get_users()
    heads = [user for user in all_users if user.role == 2]  # role 2 = head

    if not heads:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –§–ò–û
    heads.sort(key=lambda x: x.fullname)

    await callback.message.edit_text(
        f"""<b>üì¢ –í—ã–±–æ—Ä –≥—Ä—É–ø–ø</b>

–ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(heads)}
–í—ã–±–µ—Ä–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Ö –≥—Ä—É–ø–ø–∞–º:

<i>üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø</i>""",
        reply_markup=heads_selection_kb(
            [(head.fullname, head.user_id) for head in heads]
        ),
    )

    await state.update_data(
        available_heads=[(head.fullname, head.user_id) for head in heads],
        selected_heads=[],
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type,
    BroadcastMenu.filter(F.action.startswith("toggle_head_")),
)
async def toggle_head_selection(
    callback: CallbackQuery,
    callback_data: BroadcastMenu,
    state: FSMContext,
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    head_id = int(callback_data.action.replace("toggle_head_", ""))

    data = await state.get_data()
    selected_heads = data.get("selected_heads", [])
    available_heads = data.get("available_heads", [])

    # –ù–∞—Ö–æ–¥–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    head_info = next((head for head in available_heads if head[1] == head_id), None)
    if not head_info:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    if head_id in selected_heads:
        selected_heads.remove(head_id)
    else:
        selected_heads.append(head_id)

    await state.update_data(selected_heads=selected_heads)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    heads = [head for head in available_heads]
    await callback.message.edit_reply_markup(
        reply_markup=heads_selection_kb(
            [(name, uid) for name, uid in heads], selected_heads
        )
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type, BroadcastMenu.filter(F.action == "confirm_heads")
)
async def confirm_heads_selection(
    callback: CallbackQuery, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    data = await state.get_data()
    selected_heads = data.get("selected_heads", [])
    available_heads = data.get("available_heads", [])

    if not selected_heads:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è—Ö
    selected_head_names = []
    all_group_users = []

    for head_id in selected_heads:
        head_info = next((head for head in available_heads if head[1] == head_id), None)
        if head_info:
            head_name = head_info[0]
            selected_head_names.append(head_name)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            group_users = await stp_repo.user.get_users_by_head(head_name)
            all_group_users.extend(group_users)

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    unique_users = list(
        {user.user_id: user for user in all_group_users if user.user_id}.values()
    )
    user_count = len(unique_users)

    if user_count == 0:
        await callback.answer(
            "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True
        )
        return

    message_preview = data.get("message_text", "")
    if len(message_preview) > 150:
        message_preview = message_preview[:150] + "..."

    has_photo = data.get("message_type") == "photo"
    photo_text = "\nüì∏ –° —Ñ–æ—Ç–æ" if has_photo else ""

    heads_list = "\n".join([f"‚Ä¢ {name}" for name in selected_head_names])

    await callback.message.edit_text(
        f"""<b>üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> –ì—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π ({user_count} —á–µ–ª.)

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:</b>
{heads_list}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}{photo_text}

<b>‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø!</b>""",
        reply_markup=confirmation_kb(),
    )

    await state.update_data(
        recipients="groups",
        recipient_ids=[user.user_id for user in unique_users],
        user_count=user_count,
        selected_head_names=selected_head_names,
    )


@mip_broadcast_router.callback_query(
    BroadcastState.selecting_type, BroadcastMenu.filter(F.action == "confirm")
)
async def start_broadcast(
    callback: CallbackQuery, state: FSMContext, bot: Bot, stp_repo: MainRequestsRepo
):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    data = await state.get_data()

    message_text = data.get("message_text", "")
    message_type = data.get("message_type", "text")
    original_message_id = data.get("original_message_id")
    original_chat_id = data.get("original_chat_id")
    recipient_ids = data.get("recipient_ids", [])
    user_count = data.get("user_count", 0)
    recipients = data.get("recipients", "")

    if not recipient_ids:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç", show_alert=True)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    broadcast_type = "division"
    broadcast_target = ""

    if recipients == "everyone":
        broadcast_type = "division"
        broadcast_target = "all"
    elif recipients in ["ntp1", "ntp2", "nck"]:
        broadcast_type = "division"
        broadcast_target = data.get("division_name", recipients.upper())
    elif recipients == "groups":
        broadcast_type = "group"
        selected_head_names = data.get("selected_head_names", [])
        broadcast_target = ", ".join(selected_head_names)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î
    try:
        saved_broadcast = await stp_repo.broadcast.create_broadcast(
            user_id=callback.from_user.id,
            type=broadcast_type,
            target=broadcast_target,
            text=message_text,
            recipients=recipient_ids,
        )
        if saved_broadcast:
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID: {saved_broadcast.id}")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_message = await callback.message.edit_text(
        f"""<b>üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}
<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> 0 / {user_count}
<b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–ø—Ä–∞–≤–∫–∞...

<i>‚è≥ –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</i>""",
        reply_markup=None,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count = 0

    try:
        for i, user_id in enumerate(recipient_ids, 1):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=original_chat_id,
                    message_id=original_message_id
                )
                success_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if i % 10 == 0 or i == len(recipient_ids):
                    await progress_message.edit_text(
                        f"""<b>üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}
<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {i} / {user_count}
<b>–£—Å–ø–µ—à–Ω–æ:</b> {success_count}
<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {(i / len(recipient_ids) * 100):.1f}%

<i>‚è≥ –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</i>"""
                    )

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.05)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await progress_message.edit_text(
            f"""<b>‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {user_count} —Å–æ–æ–±—â–µ–Ω–∏–π""",
            reply_markup=broadcast_kb(),
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success_rate = (success_count / user_count * 100) if user_count > 0 else 0

    recipient_type_text = {
        "everyone": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "ntp": "–ù–¢–ü",
        "nck": "–ù–¶–ö",
        "groups": f"–≥—Ä—É–ø–ø–∞–º ({', '.join(data.get('selected_head_names', []))})",
    }.get(recipients, "–≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")

    await progress_message.edit_text(
        f"""<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {recipient_type_text}
<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {user_count}
<b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}
<b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {success_rate:.1f}%

<b>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!</b>""",
        reply_markup=broadcast_kb(),
    )

    logger.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{user_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    )
    await state.clear()


@mip_broadcast_router.callback_query(BroadcastMenu.filter(F.action == "cancel"))
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        """<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é

–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ

<i>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</i>""",
        reply_markup=broadcast_kb(),
    )
    await state.set_state(BroadcastState.waiting_message)


@mip_broadcast_router.callback_query(BroadcastMenu.filter(F.action == "back"))
async def back_to_type_selection(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await show_broadcast_type_selection_callback(callback, state)


async def show_broadcast_type_selection_callback(
    callback: CallbackQuery, state: FSMContext
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–ª—è callback)"""
    data = await state.get_data()
    message_preview = data.get("message_text", "")
    if len(message_preview) > 100:
        message_preview = message_preview[:100] + "..."

    has_photo = data.get("message_type") == "photo"
    photo_text = "\nüì∏ –° —Ñ–æ—Ç–æ" if has_photo else ""

    await callback.message.edit_text(
        f"""<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_preview}{photo_text}

<b>–í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b>""",
        reply_markup=broadcast_type_kb(),
    )

    await state.set_state(BroadcastState.selecting_type)
