from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.database.models import Employee
from tgbot.keyboards.user.main import MainMenu
from tgbot.keyboards.user.search.main import UserSearchMenu
from tgbot.misc.helpers import get_role


class UserSearchUserResult(CallbackData, prefix="user_search_user"):
    user_id: int
    return_to: str = "search"


def get_gender_emoji(fullname: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏"""
    if not fullname:
        return ""

    name_parts = fullname.strip().split()
    if len(name_parts) < 2:
        return ""

    # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ (–∏–º—è) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    first_name = name_parts[1].lower()

    # –ú—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    male_endings = [
        "–∏—á",
        "–æ–≤–∏—á",
        "–µ–≤–∏—á",
        "–∏—á",
        "–µ–π",
        "–∞–π",
        "–∏–π",
        "–æ–Ω",
        "–∞–Ω",
        "–µ–Ω",
        "–∏–Ω",
        "–∏–º",
        "–µ–º",
        "–∞–º",
        "—É–º",
        "—é—Ä",
        "—É—Ä",
        "–æ—Ä",
        "–µ—Ä",
        "–∏—Ä",
        "–∞—Ä",
    ]
    # –ñ–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    female_endings = [
        "–Ω–∞",
        "–ª–∞",
        "—Ä–∞",
        "—Å–∞",
        "—Ç–∞",
        "–∫–∞",
        "–≥–∞",
        "–≤–∞",
        "–¥–∞",
        "–∑–∞",
        "–º–∞",
        "–ø–∞",
        "—Ö–∞",
        "—Ü–∞",
        "—á–∞",
        "—à–∞",
        "—â–∞",
        "—å—è",
        "–∏—è",
        "–µ—è",
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    for ending in male_endings:
        if first_name.endswith(ending):
            return "üë® "

    for ending in female_endings:
        if first_name.endswith(ending):
            return "üë© "

    return ""


def user_search_results_kb(
    users: list[Employee],
    page: int,
    total_pages: int,
    search_type: str,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    from tgbot.keyboards.group.main import short_name

    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –¥–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ)
    user_buttons = []
    for user in users:
        # –§–æ—Ä–º–∞—Ç: "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ | –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è"
        division = user.division or "‚Äî"
        display_name = f"{division} | {short_name(user.fullname)}"
        role_emoji = get_role(user.role)["emoji"]
        user_buttons.append(
            InlineKeyboardButton(
                text=f"{role_emoji}{display_name}",
                callback_data=UserSearchUserResult(
                    user_id=user.user_id or user.id
                ).pack(),
            )
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(user_buttons), 2):
        row = user_buttons[i : i + 2]
        buttons.append(row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=UserSearchMenu(menu=search_type, page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=UserSearchMenu(
                        menu=search_type, page=page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=UserSearchMenu(
                        menu=search_type, page=page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=UserSearchMenu(
                        menu=search_type, page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–æ–º–æ–π"
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="search").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_search_back_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="search").pack()
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_user_detail_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="search").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
