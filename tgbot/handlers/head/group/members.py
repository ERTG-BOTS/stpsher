import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.handlers.group.whois import get_role_info
from tgbot.handlers.user.schedule.main import schedule_service
from tgbot.keyboards.head.group.game_profile import (
    HeadMemberGameHistoryMenu,
    HeadMemberGameProfileMenu,
    HeadMemberTransactionDetailMenu,
    head_member_game_history_kb,
    head_member_game_profile_kb,
    head_member_transaction_detail_kb,
)
from tgbot.keyboards.head.group.main import GroupManagementMenu
from tgbot.keyboards.head.group.members import (
    HeadGroupMembersMenu,
    HeadMemberActionMenu,
    HeadMemberDetailMenu,
    HeadMemberKPIMenu,
    HeadMemberScheduleMenu,
    HeadMemberScheduleNavigation,
    HeadMemberStatusChange,
    HeadMemberStatusSelect,
    get_month_name_by_index,
    head_group_members_kb,
    head_member_detail_kb,
    head_member_schedule_kb,
)
from tgbot.keyboards.head.group.members_kpi import head_member_kpi_kb
from tgbot.keyboards.head.group.members_status import head_member_status_select_kb
from tgbot.services.salary import KPICalculator, SalaryCalculator, SalaryFormatter

head_group_members_router = Router()
head_group_members_router.message.filter(F.chat.type == "private", HeadFilter())
head_group_members_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_group_members_router.callback_query(
    GroupManagementMenu.filter(F.menu == "members")
)
async def group_mgmt_members_cb(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–∞–≤–∞ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ)
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.message.edit_text(
            """‚ùå <b>–û—à–∏–±–∫–∞</b>
            
–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(current_user.fullname)

    if not group_members:
        await callback.message.edit_text(
            """üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
            
<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>""",
            reply_markup=head_group_members_kb([], current_page=1),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    total_members = len(group_members)

    message_text = f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üë∂üèª - —Å—Ç–∞–∂–µ—Ä
üî® - root</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_members_kb(group_members, current_page=1),
    )


@head_group_members_router.callback_query(HeadGroupMembersMenu.filter())
async def group_members_pagination_cb(
    callback: CallbackQuery,
    callback_data: HeadGroupMembersMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ)
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(current_user.fullname)

    if not group_members:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    total_members = len(group_members)
    page = callback_data.page

    message_text = f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üë∂üèª - —Å—Ç–∞–∂–µ—Ä
üî® - root</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_members_kb(group_members, current_page=page),
    )


@head_group_members_router.callback_query(HeadMemberDetailMenu.filter())
async def member_detail_cb(
    callback: CallbackQuery,
    callback_data: HeadMemberDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
    all_users = await stp_repo.employee.get_users()
    member = None
    for user in all_users:
        if user.id == callback_data.member_id:
            member = user
            break

    if not member:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    message_text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}
<b>Email:</b> {member.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> <code>{get_role_info(member.role)["text"]}</code>"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not member.user_id:
        message_text += "\n<b>–°—Ç–∞—Ç—É—Å:</b> üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ"

    message_text += "\n\n<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"

    await callback.message.edit_text(
        message_text,
        reply_markup=head_member_detail_kb(member.id, callback_data.page, member.role),
    )


@head_group_members_router.callback_query(HeadMemberActionMenu.filter())
async def member_action_cb(
    callback: CallbackQuery,
    callback_data: HeadMemberActionMenu,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/KPI)"""
    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
    all_users = await stp_repo.employee.get_users()
    member = None
    for user in all_users:
        if user.id == callback_data.member_id:
            member = user
            break

    if not member:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if callback_data.action == "schedule":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_callback_data = HeadMemberScheduleMenu(
            member_id=member.id, month_idx=0, page=callback_data.page
        )
        await view_member_schedule(callback, schedule_callback_data, stp_repo)
        return

    elif callback_data.action == "game_profile":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        game_profile_callback_data = HeadMemberGameProfileMenu(
            member_id=member.id, page=callback_data.page
        )
        await view_member_game_profile(callback, game_profile_callback_data, stp_repo)
        return

    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return


@head_group_members_router.callback_query(HeadMemberScheduleMenu.filter())
async def view_member_schedule(
    callback: CallbackQuery,
    callback_data: HeadMemberScheduleMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    requested_month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=current_month, compact=True, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@head_group_members_router.callback_query(HeadMemberScheduleNavigation.filter())
async def navigate_member_schedule(
    callback: CallbackQuery,
    callback_data: HeadMemberScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=month_to_display, compact=compact, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@head_group_members_router.callback_query(HeadMemberKPIMenu.filter())
async def view_member_kpi(
    callback: CallbackQuery,
    callback_data: HeadMemberKPIMenu,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ KPI –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    action = callback_data.action
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            premium = await kpi_repo.spec_premium.get_premium(fullname=member.fullname)

            if premium is None:
                message_text = f"""üìä <b>KPI: {member.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

                await callback.message.edit_text(
                    message_text,
                    reply_markup=head_member_kpi_kb(member_id, page, action),
                )
                return

            if action == "main":
                message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}</blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative)) if premium.csi_response_normative else "‚Äî"}</blockquote>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first)) if premium.target_goal_first else "‚Äî"} / {SalaryFormatter.format_value(round(premium.target_goal_second)) if premium.target_goal_second else "‚Äî"}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if member.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + SalaryFormatter.format_value(premium.delay, " —Å–µ–∫") if member.division != "–ù–¶–ö" else ""}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "calculator":
                csi_calculation = KPICalculator.calculate_csi_needed(
                    member.division, premium.csi, premium.csi_normative
                )
                flr_calculation = KPICalculator.calculate_flr_needed(
                    member.division, premium.flr, premium.flr_normative
                )
                gok_calculation = KPICalculator.calculate_gok_needed(
                    member.division, premium.gok, premium.gok_normative
                )
                target_calculation = KPICalculator.calculate_target_needed(
                    premium.target,
                    premium.target_goal_first,
                    premium.target_goal_second,
                    premium.target_type,
                )

                message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.csi)} ({SalaryFormatter.format_percentage(premium.csi_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.flr)} ({SalaryFormatter.format_percentage(premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(premium.gok))} ({SalaryFormatter.format_percentage(premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)} ({SalaryFormatter.format_percentage(round((premium.target_goal_first / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_first else (premium.target / premium.target_goal_first * 100) if premium.target_goal_first and premium.target_goal_first > 0 else 0))} / {SalaryFormatter.format_percentage(round((premium.target_goal_second / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_second else (premium.target / premium.target_goal_second * 100) if premium.target_goal_second and premium.target_goal_second > 0 else 0))})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if member.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "salary":
                user_premium = await kpi_repo.spec_premium.get_premium(
                    fullname=user.fullname
                )

                salary_result = await SalaryCalculator.calculate_salary(
                    user=user, premium_data=user_premium
                )

                message_text = SalaryFormatter.format_salary_message(
                    salary_result, user_premium
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –¥–ª—è {member.fullname}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
            error_str = str(e)
            if "Table" in error_str and "doesn't exist" in error_str:
                message_text = f"""üìä <b>KPI: {member.fullname}</b>

‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ KPI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>

–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã KPI.</i>"""
            else:
                message_text = f"""üìä <b>KPI: {member.fullname}</b>

‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

<i>–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_kpi_kb(member_id, page, action),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ KPI —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI", show_alert=True)


@head_group_members_router.callback_query(HeadMemberStatusSelect.filter())
async def show_member_status_select(
    callback: CallbackQuery,
    callback_data: HeadMemberStatusSelect,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞
        if member.role not in [1, 3]:
            await callback.answer(
                "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å", show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        message_text = f"""‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

<i>–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_status_select_kb(
                member_id=member_id,
                page=page,
                current_role=member.role,
                is_trainee=member.is_trainee,
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é", show_alert=True)


@head_group_members_router.callback_query(HeadMemberStatusChange.filter())
async def change_member_status(
    callback: CallbackQuery,
    callback_data: HeadMemberStatusChange,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã (—Å—Ç–∞–∂–µ—Ä/–¥–µ–∂—É—Ä–Ω—ã–π)"""
    member_id = callback_data.member_id
    status_type = callback_data.status_type

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞
        if member.role not in [1, 3] and status_type == "duty":
            await callback.answer(
                "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å", show_alert=True
            )
            return

        notification_text = ""
        changes_made = False

        if status_type == "trainee":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞
            new_trainee_status = not member.is_trainee
            await stp_repo.employee.update_user(
                user_id=member.user_id, is_trainee=new_trainee_status
            )

            status_text = "—Å—Ç–∞–∂–µ—Ä" if new_trainee_status else "–Ω–µ —Å—Ç–∞–∂–µ—Ä"
            notification_text = f"–°—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω: {status_text}"
            changes_made = True

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–∂–µ—Ä–∞] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {member.is_trainee}"
            )

        elif status_type == "duty":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
            old_role_name = "–î–µ–∂—É—Ä–Ω—ã–π" if member.role == 3 else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
            new_role = 1 if member.role == 3 else 3
            new_role_name = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" if new_role == 1 else "–î–µ–∂—É—Ä–Ω—ã–π"

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–æ–ª—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ
            await stp_repo.employee.update_user(user_id=member.user_id, role=new_role)

            notification_text = f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role_name} ‚Üí {new_role_name}"
            changes_made = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if member.user_id:
                try:
                    await callback.bot.send_message(
                        chat_id=member.user_id,
                        text=f"""<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω: {old_role_name} ‚Üí {new_role_name}

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞</i>""",
                    )
                except TelegramBadRequest as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.user_id}: {e}"
                    )

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {old_role_name} ‚Üí {new_role_name}"
            )

        if changes_made:
            await callback.answer(notification_text)

            await show_member_status_select(
                callback,
                HeadMemberStatusSelect(member_id=member.id),
                stp_repo,
            )
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@head_group_members_router.callback_query(HeadMemberGameProfileMenu.filter())
async def view_member_game_profile(
    callback: CallbackQuery,
    callback_data: HeadMemberGameProfileMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    from tgbot.services.leveling import LevelingSystem

    member_id = callback_data.member_id
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member: Employee = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å user_id (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)
        if not member.user_id:
            await callback.message.edit_text(
                f"""üèÆ <b>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>

‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>

<i>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>""",
                reply_markup=head_member_game_profile_kb(
                    member_id=member.id, page=page
                ),
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balance = await stp_repo.transaction.get_user_balance(
            user_id=member.user_id
        )
        achievements_sum = await stp_repo.transaction.get_user_achievements_sum(
            user_id=member.user_id
        )
        purchases_sum = await stp_repo.purchase.get_user_purchases_sum(
            user_id=member.user_id
        )
        level_info_text = LevelingSystem.get_level_info_text(
            achievements_sum, user_balance
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        message_text = f"""üèÆ <b>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

{level_info_text}

<blockquote expandable><b>‚ú® –ë–∞–ª–∞–Ω—Å</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {achievements_sum} –±–∞–ª–ª–æ–≤
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {purchases_sum} –±–∞–ª–ª–æ–≤</blockquote>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_game_profile_kb(member_id=member.id, page=page),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True
        )


@head_group_members_router.callback_query(HeadMemberGameHistoryMenu.filter())
async def view_member_game_history(
    callback: CallbackQuery,
    callback_data: HeadMemberGameHistoryMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    history_page = callback_data.history_page
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member: Employee = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å user_id (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)
        if not member.user_id:
            await callback.message.edit_text(
                f"""üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>

‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>

<i>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>""",
                reply_markup=head_member_game_history_kb(
                    member_id=member.id, transactions=[], current_page=1, page=page
                ),
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_transactions = await stp_repo.transaction.get_user_transactions(
            user_id=member.user_id
        )

        if not user_transactions:
            message_text = f"""üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏

–£ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π üôÇ

<i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –±–∞–ª–ª–∞–º–∏</i>"""
        else:
            total_transactions = len(user_transactions)
            message_text = f"""üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏

<i>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_game_history_kb(
                member_id=member.id,
                transactions=user_transactions,
                current_page=history_page,
                page=page,
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", show_alert=True
        )


@head_group_members_router.callback_query(HeadMemberTransactionDetailMenu.filter())
async def view_member_transaction_detail(
    callback: CallbackQuery,
    callback_data: HeadMemberTransactionDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    transaction_id = callback_data.transaction_id
    history_page = callback_data.history_page
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = await stp_repo.transaction.get_transaction(transaction_id)

        if not transaction:
            await callback.message.edit_text(
                f"""üìä <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>

‚ùå –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏""",
                reply_markup=head_member_transaction_detail_kb(
                    member_id=member_id, history_page=history_page, page=page
                ),
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        type_emoji = "‚ûï" if transaction.type == "earn" else "‚ûñ"
        type_text = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ" if transaction.type == "earn" else "–°–ø–∏—Å–∞–Ω–∏–µ"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        source_names = {
            "achievement": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            "product": "üõí –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞",
            "manual": "‚úçÔ∏è –†—É—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
            "casino": "üé∞ –ö–∞–∑–∏–Ω–æ",
        }
        source_name = source_names.get(transaction.source_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if transaction.source_type == "achievement" and transaction.source_id:
            achievement = await stp_repo.achievement.get_achievement(
                transaction.source_id
            )
            match achievement.period:
                case "d":
                    source_name = "üèÜ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name
                case "w":
                    source_name = "üèÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name
                case "m":
                    source_name = "üèÜ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = f"""üìä <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

<b>üìà –û–ø–µ—Ä–∞—Ü–∏—è</b>
{type_emoji} {type_text} <b>{transaction.amount}</b> –±–∞–ª–ª–æ–≤

<b>üî¢ ID:</b> <code>{transaction.id}</code>

<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫</b>
{source_name}

<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>
{transaction.created_at.strftime("%d.%m.%Y –≤ %H:%M")}"""

        if transaction.comment:
            message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n<blockquote expandable>{transaction.comment}</blockquote>"

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_transaction_detail_kb(
                member_id=member_id, history_page=history_page, page=page
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", show_alert=True
        )
