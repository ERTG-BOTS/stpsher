import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.mip.leveling.awards import award_notify_kb
from tgbot.keyboards.mip.leveling.main import LevelingMenu
from tgbot.keyboards.user.leveling.awards import (
    AwardDetailMenu,
    AwardHistoryMenu,
    AwardPurchaseConfirmMenu,
    AwardPurchaseMenu,
    AwardsMenu,
    CancelActivationMenu,
    DutyActivationListMenu,
    DutyAwardActionMenu,
    DutyAwardActivationMenu,
    SellAwardMenu,
    UseAwardMenu,
    available_awards_paginated_kb,
    award_confirmation_kb,
    award_detail_back_kb,
    award_detail_kb,
    award_history_kb,
    award_purchase_success_kb,
    awards_kb,
    awards_paginated_kb,
    duty_award_activation_kb,
    duty_award_detail_kb,
    to_awards_kb,
)
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.dicts import executed_codes
from tgbot.services.broadcaster import broadcast


def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
        "canceled": "üî•",
        "rejected": "‚õî",
    }
    return status_emojis.get(status, "‚ùì")


user_leveling_awards_router = Router()
user_leveling_awards_router.message.filter(
    F.chat.type == "private",
)
user_leveling_awards_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_leveling_awards_router.callback_query(MainMenu.filter(F.menu == "awards"))
async def user_awards_cb(callback: CallbackQuery, user: User):
    await callback.message.edit_text(
        """<b>üëè –ù–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã

<i>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥ –Ω—É–∂–Ω—ã –±–∞–ª–ª—ã
–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ <b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b></i>""",
        reply_markup=awards_kb(user),
    )


@user_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "all"))
async def awards_all(
    callback: CallbackQuery,
    user: User,
    callback_data: AwardsMenu,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    all_awards = await stp_repo.award.get_awards(
        division="–ù–¢–ü" if "–ù–¢–ü" in user.division else "–ù–¶–ö"
    )

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(all_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = all_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}""")
        if award.count > 1:
            awards_list.append(f"""üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}""")
        awards_list.append("")

    message_text = f"""<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=awards_paginated_kb(page, total_pages)
    )
    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@user_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "available"))
async def awards_available(
    callback: CallbackQuery,
    user: User,
    callback_data: AwardsMenu,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    user_balance = await stp_repo.transactions.get_user_balance(user.user_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    available_awards = await stp_repo.award.get_available_awards(user_balance)

    if not available_awards:
        await callback.message.edit_text(
            f"""<b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

<b>üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ üòî

<i>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</i>""",
            reply_markup=to_awards_kb(),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(available_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = available_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}""")
        if award.count > 1:
            awards_list.append(f"""üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}""")
        awards_list.append("")

    message_text = f"""<b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<b>üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=available_awards_paginated_kb(page, total_pages, page_awards),
    )
    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –±–∞–ª–∞–Ω—Å: {user_balance}"
    )


@user_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "executed"))
async def awards_history(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_awards_with_details = await stp_repo.user_award.get_user_awards_with_details(
        user_id=callback.from_user.id
    )

    if not user_awards_with_details:
        await callback.message.edit_text(
            """<b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ üôÇ

<i>–ö—É–ø–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é <b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ</b></i>""",
            reply_markup=to_awards_kb(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    total_awards = len(user_awards_with_details)
    message_text = f"""<b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ: {total_awards}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=award_history_kb(user_awards_with_details, current_page=1),
    )


@user_leveling_awards_router.callback_query(AwardHistoryMenu.filter())
async def awards_history_pagination(
    callback: CallbackQuery, callback_data: AwardHistoryMenu, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥"""
    page = callback_data.page

    user_awards_with_details = await stp_repo.user_award.get_user_awards_with_details(
        user_id=callback.from_user.id
    )

    if not user_awards_with_details:
        await callback.message.edit_text(
            """<b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ üôÇ""",
            reply_markup=award_detail_back_kb(),
        )
        return

    total_awards = len(user_awards_with_details)
    message_text = f"""<b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ: {total_awards}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=award_history_kb(user_awards_with_details, current_page=page),
    )


@user_leveling_awards_router.callback_query(AwardDetailMenu.filter())
async def award_detail_view(
    callback: CallbackQuery, callback_data: AwardDetailMenu, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_award_id = callback_data.user_award_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not user_award_detail:
        await callback.message.edit_text(
            """<b>üèÜ –ù–∞–≥—Ä–∞–¥—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã ‚òπ""",
            reply_markup=award_detail_back_kb(),
        )
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    status_names = {
        "stored": "–ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        "used_up": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞",
        "canceled": "–û—Ç–º–µ–Ω–µ–Ω–∞",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }
    status_name = status_names.get(user_award.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–∞–≥—Ä–∞–¥–æ–π
    can_use = (
        user_award.status == "stored"
        and user_award_detail.current_usages < user_award_detail.max_usages
    )

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "stored" –ò usage_count —Ä–∞–≤–µ–Ω 0 (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å)
    can_sell = user_award.status == "stored" and user_award.usage_count == 0

    # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "review" (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    can_cancel = user_award.status == "review"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""
<b>üèÜ –ù–∞–≥—Ä–∞–¥–∞:</b> {award_info.name}

<b>üìä –°—Ç–∞—Ç—É—Å</b>  
{status_name}

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{user_award.usage_count} –∏–∑ {award_info.count}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>  
{award_info.cost} –±–∞–ª–ª–æ–≤

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>  
{award_info.description}

<blockquote expandable><b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>  
{user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}</blockquote>"""

    if user_award.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n‚îî {user_award.comment}"

    if user_award.updated_by_user_id:
        manager = await stp_repo.user.get_user(user_id=user_award.updated_by_user_id)
        if manager.username:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='t.me/{manager.username}'>"
                f"{manager.fullname}</a>"
            )
        else:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='tg://user?id={manager.user_id}'>"
                f"{manager.fullname}</a>"
            )
        message_text += f"\n\n<b>üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n{user_award.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}</blockquote>"

    # Updated keyboard logic
    keyboard = award_detail_kb(
        user_award.id,
        can_use=can_use,
        can_sell=can_sell,
        can_cancel=can_cancel,
        source_menu="bought",
    )

    await callback.message.edit_text(message_text, reply_markup=keyboard)


@user_leveling_awards_router.callback_query(AwardPurchaseMenu.filter())
async def award_confirmation_handler(
    callback: CallbackQuery,
    callback_data: AwardPurchaseMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    award_id = callback_data.award_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    try:
        award_info = await stp_repo.award.get_award(award_id)
    except Exception as e:
        logger.error(f"Error getting award {award_id}: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≥—Ä–∞–¥–µ", show_alert=True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = await stp_repo.transactions.get_user_balance(user.user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–ª–æ–≤
    if user_balance < award_info.cost:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ –≤–∞—Å: {user_balance} –±–∞–ª–ª–æ–≤\n–ù—É–∂–Ω–æ: {award_info.cost} –±–∞–ª–ª–æ–≤",
            show_alert=True,
        )
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    balance_after_purchase = user_balance - award_info.cost

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üéØ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã:</b> {award_info.name}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}

<b>üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {award_info.count}

<b>üí∞ –ë–∞–ª–∞–Ω—Å</b>
‚Ä¢ –¢–µ–∫—É—â–∏–π: {user_balance} –±–∞–ª–ª–æ–≤
‚Ä¢ –°–ø–∏—à–µ—Ç—Å—è: {award_info.cost} –±–∞–ª–ª–æ–≤
‚Ä¢ –û—Å—Ç–∞–Ω–µ—Ç—Å—è : {balance_after_purchase} –±–∞–ª–ª–æ–≤

<i>–ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é <b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ</b></i>"""

    await callback.message.edit_text(
        message_text, reply_markup=award_confirmation_kb(award_id, current_page)
    )

    logger.info(
        f"[–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã] {callback.from_user.username} ({user.user_id}) –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É '{award_info.name}'"
    )


@user_leveling_awards_router.callback_query(AwardPurchaseConfirmMenu.filter())
async def award_purchase_final_handler(
    callback: CallbackQuery,
    callback_data: AwardPurchaseConfirmMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã
    """
    award_id = callback_data.award_id
    current_page = callback_data.page
    action = callback_data.action

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
    if action == "back":
        await awards_available(
            callback=callback,
            user=user,
            callback_data=AwardsMenu(menu="available", page=current_page),
            stp_repo=stp_repo,
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–∫—É–ø–∫—É
    if action == "buy":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
        try:
            award_info = await stp_repo.award.get_award(award_id)
        except Exception as e:
            logger.error(f"Error getting award {award_id}: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≥—Ä–∞–¥–µ", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balance = await stp_repo.transactions.get_user_balance(user.user_id)

        if user_balance < award_info.cost:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ —Ç–µ–±—è: {user_balance}, –Ω—É–∂–Ω–æ: {award_info.cost}",
                show_alert=True,
            )
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º "stored"
        try:
            new_user_award = await stp_repo.user_award.create_user_award(
                user_id=user.user_id, award_id=award_id, status="stored"
            )

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_balance - award_info.cost

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            success_message = f"""<b>‚úÖ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:</b> {award_info.name}

<b>üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {award_info.count}

<b>üí∞ –ë–∞–ª–∞–Ω—Å</b>
‚Ä¢ –ë—ã–ª: {user_balance} –±–∞–ª–ª–æ–≤  
‚Ä¢ –°–ø–∏—Å–∞–Ω–æ: {award_info.cost} –±–∞–ª–ª–æ–≤
‚Ä¢ –°—Ç–∞–ª–æ: {new_balance} –±–∞–ª–ª–æ–≤

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}

<i>üéØ –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ—ë –ø–æ–∑–∂–µ –≤ –º–µ–Ω—é <b>‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ</b></i>"""

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                success_message,
                reply_markup=award_purchase_success_kb(new_user_award.id),
            )

            logger.info(
                f"[–ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã] {callback.from_user.username} ({user.user_id}) –∫—É–ø–∏–ª –Ω–∞–≥—Ä–∞–¥—É '{award_info.name}' –∑–∞ {award_info.cost} –±–∞–ª–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'stored'"
            )

        except Exception as e:
            logger.error(f"Error creating user award: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)


@user_leveling_awards_router.callback_query(UseAwardMenu.filter())
async def use_award_handler(
    callback: CallbackQuery,
    callback_data: UseAwardMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É" –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    :param callback:
    :param callback_data:
    :param user:
    :param stp_repo:
    :return:
    """
    user_award_id = callback_data.user_award_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)
    if not user_award_detail:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    success = await stp_repo.user_award.use_award(user_award_id)

    if success:
        award_name = user_award_detail.award_info.name
        role_lookup = {v: k for k, v in executed_codes.items()}
        confirmer = role_lookup.get(
            user_award_detail.award_info.manager_role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        await callback.answer(
            f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {award_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n\n"
            f"üîî –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É: {confirmer}",
            show_alert=True,
        )

        if user_award_detail.award_info.manager_role == 3:
            award_managers = await stp_repo.user.get_users_by_role(
                role=user_award_detail.award_info.manager_role,
                division=user_award_detail.award_info.division,
            )
        else:
            award_managers = await stp_repo.user.get_users_by_role(
                role=user_award_detail.award_info.manager_role
            )

        manager_ids = [
            manager.user_id
            for manager in award_managers
            if manager.user_id
            and manager.user_id != user_award_detail.user_award.user_id
        ]

        if manager_ids:
            notification_text = f"""<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É</b>

<b>üèÜ –ù–∞–≥—Ä–∞–¥–∞:</b> {award_name}
<b>üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>üìã –û–ø–∏—Å–∞–Ω–∏–µ:</b> {user_award_detail.award_info.description}

<b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>"""

            result = await broadcast(
                bot=callback.bot,
                users=manager_ids,
                text=notification_text,
                reply_markup=award_notify_kb(),
            )

            logger.info(
                f"[–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã] {user.username} ({user.user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—É '{award_name}'. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {result} –∏–∑ {len([m for m in award_managers if m.user_id])}"
            )
    else:
        await callback.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É", show_alert=True)

    # Refresh the award detail view
    await award_detail_view(
        callback, AwardDetailMenu(user_award_id=user_award_id), stp_repo
    )


@user_leveling_awards_router.callback_query(SellAwardMenu.filter())
async def sell_award_handler(
    callback: CallbackQuery,
    callback_data: SellAwardMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–≥—Ä–∞–¥—ã - —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–ª—ã
    """
    user_award_id = callback_data.user_award_id
    source_menu = callback_data.source_menu

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)
    if not user_award_detail:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥—É –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å (—Å—Ç–∞—Ç—É—Å "stored" –∏ usage_count = 0)
    if user_award.status != "stored" or user_award.usage_count > 0:
        await callback.answer(
            "‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É", show_alert=True
        )
        return

    try:
        success = await stp_repo.user_award.delete_user_award(user_award_id)

        if success:
            await callback.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {award_info.name}.\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {award_info.cost} –±–∞–ª–ª–æ–≤"
            )

            logger.info(
                f"[–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞–≥—Ä–∞–¥—ã] {user.username} ({user.user_id}) –ø—Ä–æ–¥–∞–ª –Ω–∞–≥—Ä–∞–¥—É '{award_info.name}' –∑–∞ {award_info.cost} –±–∞–ª–ª–æ–≤"
            )

            # Context-aware navigation
            if source_menu == "available":
                # Return to available awards if user came from purchase flow
                await awards_available(
                    callback=callback,
                    user=user,
                    callback_data=AwardsMenu(menu="available", page=1),
                    stp_repo=stp_repo,
                )
            else:
                # Return to bought awards if user came from bought awards menu
                await awards_history(
                    callback=callback,
                    stp_repo=stp_repo,
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)

    except Exception as e:
        logger.error(f"Error selling award: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)


@user_leveling_awards_router.callback_query(CancelActivationMenu.filter())
async def cancel_activation_handler(
    callback: CallbackQuery,
    callback_data: CancelActivationMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã - –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å "review" –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "stored"
    """
    user_award_id = callback_data.user_award_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)
    if not user_award_detail:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
    if user_award.status != "review":
        await callback.answer(
            "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True
        )
        return

    try:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "stored"
        success = await stp_repo.user_award.update_award(
            award_id=user_award_id, status="stored"
        )

        if success:
            await callback.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã '{award_info.name}' –æ—Ç–º–µ–Ω–µ–Ω–∞!")

            logger.info(
                f"[–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏] {user.username} ({user.user_id}) –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã '{award_info.name}'"
            )

            # Refresh the award detail view
            await award_detail_view(
                callback, AwardDetailMenu(user_award_id=user_award_id), stp_repo
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"Error canceling activation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)


@user_leveling_awards_router.callback_query(
    LevelingMenu.filter(F.menu == "awards_activation")
)
async def duty_awards_activation(
    callback: CallbackQuery,
    callback_data: DutyActivationListMenu,
    stp_repo: MainRequestsRepo,
    user: User,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–∂—É—Ä–Ω—ã–º–∏
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "review" –∏ manager_role == 3
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ division –¥–µ–∂—É—Ä–Ω–æ–≥–æ
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å manager_role == 3 —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–æ–≥–æ –∂–µ division —á—Ç–æ –∏ –¥–µ–∂—É—Ä–Ω—ã–π
    review_awards = await stp_repo.user_award.get_review_awards_for_activation(
        manager_role=3, division=user.division
    )

    if not review_awards:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üòä""",
            reply_markup=duty_award_activation_kb(page, 0, []),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(review_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = review_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award_detail in enumerate(page_awards, start=start_idx + 1):
        user_award = award_detail.user_award
        award_info = award_detail.award_info

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await stp_repo.user.get_user(user_id=user_award.user_id)
        user_name = user.fullname if user else f"ID: {user_award.user_id}"

        if user.username:
            awards_list.append(f"""{counter}. <b>{award_info.name}</b> - {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='t.me/{user.username}'>{user_name}</a> –∏–∑ {award_info.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}</blockquote>""")
        else:
            awards_list.append(f"""{counter}. <b>{award_info.name}</b> - {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='tg://user?id={user.user_id}'>{user_name}</a> –∏–∑ {award_info.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}</blockquote>""")
        awards_list.append("")

    message_text = f"""<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{chr(10).join(awards_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=duty_award_activation_kb(page, total_pages, page_awards),
    )


@user_leveling_awards_router.callback_query(DutyAwardActivationMenu.filter())
async def duty_award_activation_detail(
    callback: CallbackQuery,
    callback_data: DutyAwardActivationMenu,
    stp_repo: MainRequestsRepo,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–∂—É—Ä–Ω—ã–º"""
    user_award_id = callback_data.user_award_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not user_award_detail:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã ‚òπ""",
            reply_markup=duty_award_detail_kb(user_award_id, current_page),
        )
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user: User = await stp_repo.user.get_user(user_id=user_award.user_id)
    user_head: User = await stp_repo.user.get_user(fullname=user.head)

    user_info = (
        f"<a href='t.me/{user.username}'>{user.fullname}</a>"
        if user and user.username
        else "-"
    )
    head_info = (
        f"<a href='t.me/{user_head.username}'>{user.head}</a>"
        if user_head and user_head.username
        else "-"
    )

    message_text = f"""
<b>üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

<b>üèÜ –û –Ω–∞–≥—Ä–∞–¥–µ</b>  
<blockquote><b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>
{award_info.name}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>
{award_info.cost} –±–∞–ª–ª–æ–≤

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{user_award.usage_count} ‚û°Ô∏è {user_award.usage_count + 1} ({award_info.count} –≤—Å–µ–≥–æ)</blockquote>"""

    message_text += f"""

<b>üë§ –û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ</b>
<blockquote><b>–§–ò–û</b>
{user_info}

<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å</b>
{user.position} {user.division}

<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</b>
{head_info}</blockquote>

<b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>  
{user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
"""
    await callback.message.edit_text(
        message_text,
        reply_markup=duty_award_detail_kb(user_award_id, current_page),
    )


@user_leveling_awards_router.callback_query(DutyAwardActionMenu.filter())
async def duty_award_action(
    callback: CallbackQuery,
    callback_data: DutyAwardActionMenu,
    stp_repo: MainRequestsRepo,
    user: User,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –¥–µ–∂—É—Ä–Ω—ã–º"""
    user_award_id = callback_data.user_award_id
    action = callback_data.action
    current_page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
        user_award_detail = await stp_repo.user_award.get_user_award_detail(
            user_award_id
        )

        if not user_award_detail:
            await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        user_award = user_award_detail.user_award
        award_info = user_award_detail.award_info
        employee_user: User = await stp_repo.user.get_user(user_id=user_award.user_id)

        if action == "approve":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.approve_award_usage(
                user_award_id=user_award_id,
                updated_by_user_id=callback.from_user.id,
            )

            await callback.answer(
                f"""‚úÖ –ù–∞–≥—Ä–∞–¥–∞ '{award_info.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
                
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            if user_award.usage_count >= award_info.count:
                employee_notify_message = f"""<b>üëå –ù–∞–≥—Ä–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {award_info.name}

–î–µ–∂—É—Ä–Ω—ã–π <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã

–£ –Ω–∞–≥—Ä–∞–¥—ã {award_info.name} –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 

<i>–ö—É–ø–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é <b>üëè –ù–∞–≥—Ä–∞–¥—ã ‚Üí ‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ</b></i>"""
            else:
                employee_notify_message = f"""<b>üëå –ù–∞–≥—Ä–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {award_info.name}

–î–µ–∂—É—Ä–Ω—ã–π <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã

üìç –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {award_info.count - user_award.usage_count} –∏–∑ {award_info.count}"""

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=employee_notify_message,
            )

            logger.info(
                f"[–î–µ–∂—É—Ä–Ω—ã–π] - [–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee_user.username} ({user_award.user_id})"
            )

        elif action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.reject_award_usage(
                user_award_id=user_award_id, updated_by_user_id=callback.from_user.id
            )

            await callback.answer(
                f"""‚ùå –ù–∞–≥—Ä–∞–¥–∞ '{award_info.name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=f"""<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:</b> {award_info.name}

–î–µ–∂—É—Ä–Ω—ã–π <a href='t.me/{user.username}'>{user.fullname}</a> –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã""",
            )

            logger.info(
                f"[–î–µ–∂—É—Ä–Ω—ã–π] - [–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee_user.username} ({user_award.user_id})"
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await duty_awards_activation(
            callback=callback,
            callback_data=DutyActivationListMenu(
                menu="duty_activation", page=current_page
            ),
            stp_repo=stp_repo,
            user=user,
        )

    except Exception as e:
        logger.error(f"Error updating award status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)
