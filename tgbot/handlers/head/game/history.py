import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.keyboards.head.group.game.history import (
    HeadGroupHistoryMenu,
    HeadRankingMenu,
    HeadTransactionDetailMenu,
    head_group_history_kb,
    head_ranking_kb,
    head_transaction_detail_kb,
)
from tgbot.keyboards.head.group.members import short_name

head_game_history_router = Router()
head_game_history_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_history_router.callback_query(
    HeadGroupHistoryMenu.filter(F.menu == "history")
)
async def head_group_history(
    callback: CallbackQuery,
    callback_data: HeadGroupHistoryMenu,
    stp_repo: MainRequestsRepo,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    group_transactions = await stp_repo.transaction.get_group_transactions(
        current_user.fullname
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ö –∏–º–µ–Ω
    from sqlalchemy import select

    from infrastructure.database.models.STP.employee import Employee

    group_members_result = await stp_repo.session.execute(
        select(Employee).where(Employee.head == current_user.fullname)
    )
    members = group_members_result.scalars().all()
    employee_names = {
        member.user_id: member.fullname for member in members if member.user_id
    }

    page = callback_data.page

    if not group_transactions:
        await callback.message.edit_text(
            """üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

–£ –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π üôÇ

<i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –±–∞–ª–ª–∞–º–∏</i>""",
            reply_markup=head_group_history_kb(
                [], current_page=page, employee_names=employee_names
            ),
        )
        return

    total_transactions = len(group_transactions)

    message_text = f"""üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

<i>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_history_kb(
            group_transactions, current_page=page, employee_names=employee_names
        ),
    )

    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø—ã] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@head_game_history_router.callback_query(HeadTransactionDetailMenu.filter())
async def head_transaction_detail_view(
    callback: CallbackQuery,
    callback_data: HeadTransactionDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã"""
    transaction_id = callback_data.transaction_id
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction = await stp_repo.transaction.get_transaction(transaction_id)

    if not transaction:
        await callback.message.edit_text(
            """üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚òπ""",
            reply_markup=head_transaction_detail_kb(page),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    employee = await stp_repo.employee.get_user(user_id=transaction.user_id)
    employee_name = employee.fullname if employee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    type_emoji = "‚ûï" if transaction.type == "earn" else "‚ûñ"
    type_text = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ" if transaction.type == "earn" else "–°–ø–∏—Å–∞–Ω–∏–µ"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    source_names = {
        "achievement": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        "product": "üõí –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞",
        "manual": "‚úçÔ∏è –†—É—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
        "casino": "üé∞ –ö–∞–∑–∏–Ω–æ",
    }
    source_name = source_names.get(transaction.source_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üìä –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã</b>

<b>üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>
{employee_name}

<b>üìà –û–ø–µ—Ä–∞—Ü–∏—è</b>
{type_emoji} {type_text} <b>{transaction.amount}</b> –±–∞–ª–ª–æ–≤

<b>üî¢ ID:</b> <code>{transaction.id}</code>

<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫</b>
{source_name}

<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>
{transaction.created_at.strftime("%d.%m.%Y –≤ %H:%M")}"""

    if transaction.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n<blockquote expandable>{transaction.comment}</blockquote>"

    if transaction.source_id:
        message_text += f"\n\n<b>üîó ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n‚îî {transaction.source_id}"

    await callback.message.edit_text(
        message_text, reply_markup=head_transaction_detail_kb(page)
    )


@head_game_history_router.callback_query(HeadRankingMenu.filter(F.menu == "ranking"))
async def head_ranking_view(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –¥–∏–≤–∏–∑–∏–æ–Ω—É"""
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        return

    if not current_user.division:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –¥–∏–≤–∏–∑–∏–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=head_ranking_kb(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –¥–∏–≤–∏–∑–∏–æ–Ω—É
    ranking = await stp_repo.transaction.get_heads_ranking_by_division(
        current_user.division
    )

    if not ranking:
        await callback.message.edit_text(
            f"""üìä <b>–†–µ–π—Ç–∏–Ω–≥ {current_user.division}</b>

–í —Ç–≤–æ–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä—É–≥–∏—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è—Ö –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

<i>–†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –±–∞–ª–ª–æ–≤ –≥—Ä—É–ø–ø –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</i>""",
            reply_markup=head_ranking_kb(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    months_ru = {
        1: "—è–Ω–≤–∞—Ä—å",
        2: "—Ñ–µ–≤—Ä–∞–ª—å",
        3: "–º–∞—Ä—Ç",
        4: "–∞–ø—Ä–µ–ª—å",
        5: "–º–∞–π",
        6: "–∏—é–Ω—å",
        7: "–∏—é–ª—å",
        8: "–∞–≤–≥—É—Å—Ç",
        9: "—Å–µ–Ω—Ç—è–±—Ä—å",
        10: "–æ–∫—Ç—è–±—Ä—å",
        11: "–Ω–æ—è–±—Ä—å",
        12: "–¥–µ–∫–∞–±—Ä—å",
    }
    current_month_name = f"{months_ru[datetime.now().month]} {datetime.now().year}"

    message_text = f"""üìä <b>–†–µ–π—Ç–∏–Ω–≥ ({current_user.division})</b>

<b>üèÜ –ú–µ—Å—Ç–∞ –∑–∞ {current_month_name}:</b>

"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user_place = None
    for head_data in ranking:
        if head_data["head_name"] == current_user.fullname:
            current_user_place = head_data["place"]
            break

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
    display_ranking = ranking[:10]

    for i, head_data in enumerate(display_ranking):
        place_emoji = ["ü•á", "ü•à", "ü•â"][i] if i < 3 else f"{head_data['place']}."

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è
        name_display = short_name(head_data["head_name"])
        if len(name_display) > 25:
            name_display = name_display[:22] + "..."

        message_text += (
            f"{place_emoji} <a href='t.me/{head_data['username']}'>{name_display}</a>\n"
        )
        message_text += (
            f"–ì—Ä—É–ø–ø–∞: {head_data['group_size']} —á–µ–ª. ‚Ä¢ {head_data['points']} –±–∞–ª–ª–æ–≤\n\n"
        )

    if current_user_place:
        if current_user_place > 10:
            message_text += (
                f"...\n\n<b>–¢–≤–æ–µ –º–µ—Å—Ç–æ: {current_user_place} –∏–∑ {len(ranking)}</b>"
            )
        else:
            message_text += f"<b>–í—Å–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(ranking)}</b>"
    else:
        message_text += f"<b>–í—Å–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(ranking)}</b>"

    await callback.message.edit_text(
        message_text, reply_markup=head_ranking_kb(), parse_mode="HTML"
    )

    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–†–µ–π—Ç–∏–Ω–≥] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π {current_user.division}"
    )
