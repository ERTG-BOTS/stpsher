import logging

from aiogram import Router
from aiogram.filters import CommandObject, CommandStart
from aiogram.types import CallbackQuery, ChatMember, Message
from aiogram.utils.payload import decode_payload

from infrastructure.database.models.STP.group import Group
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.deep import DeepLinkRegexFilter
from tgbot.keyboards.group.settings import (
    GroupAccessApplyMenu,
    GroupAccessMenu,
    GroupSettingsMenu,
    group_access_keyboard,
    group_settings_keyboard,
)

deeplink_group = Router()
logger = logging.getLogger(__name__)

# Store pending role changes per group
pending_role_changes = {}


@deeplink_group.message(
    CommandStart(deep_link=True), DeepLinkRegexFilter(r"^group_-?\d+$")
)
async def handle_settings(
    message: Message, command: CommandObject, stp_repo: MainRequestsRepo
):
    payload = decode_payload(command.args)
    group_id = payload.split("_", 1)[1]

    member: ChatMember = await message.bot.get_chat_member(
        chat_id=group_id, user_id=message.from_user.id
    )

    if member.status in ["administrator", "creator"]:
        group = await stp_repo.group.get_group(int(group_id))
        group_info = await message.bot.get_chat(chat_id=group.group_id)

        await message.answer(
            f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_info.full_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üü† –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

–ß–∞—Å—Ç—å –æ–ø—Ü–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
            reply_markup=group_settings_keyboard(group),
        )
    else:
        await message.answer(
            "–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã"
        )


async def _update_toggle_setting(
    callback: CallbackQuery,
    stp_repo: MainRequestsRepo,
    group: Group,
    field_name: str,
    current_value: bool,
    success_message: str,
) -> None:
    """Helper function to update toggle settings efficiently."""
    new_value = not current_value
    update_data = {field_name: new_value}

    logger.info(
        f"Updating group {group.group_id}: {field_name} from {current_value} to {new_value}"
    )

    updated_group = await stp_repo.group.update_group(
        group_id=group.group_id, **update_data
    )

    if updated_group:
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await callback.answer(f"{success_message} {status}")

        await callback.message.edit_reply_markup(
            reply_markup=group_settings_keyboard(updated_group)
        )
        logger.info(f"Successfully updated group {group.group_id} setting {field_name}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        logger.error(f"Failed to update group {group.group_id} setting {field_name}")


@deeplink_group.callback_query(GroupSettingsMenu.filter())
async def handle_settings_callback(
    callback: CallbackQuery,
    callback_data: GroupSettingsMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    match callback_data.menu:
        case "remove_unemployed":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "remove_unemployed",
                group.remove_unemployed,
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            )

        case "is_casino_allowed":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "is_casino_allowed",
                group.is_casino_allowed,
                "–ö–∞–∑–∏–Ω–æ",
            )

        case "new_user_notify":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "new_user_notify",
                group.new_user_notify,
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            )

        case "access":
            # Initialize pending changes with current roles
            pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

            await callback.message.edit_text(
                """üõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ</b>

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
- üî¥ –ù–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞

<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"</i>
<i>–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ - —É –ª—é–±–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø</i>""",
                reply_markup=group_access_keyboard(
                    group, pending_role_changes[group.group_id]
                ),
            )

        case "members":
            await callback.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–º –≥—Ä—É–ø–ø—ã")
            # TODO: Implement members management submenu

        case "back":
            group_info = await callback.bot.get_chat(chat_id=group.group_id)
            await callback.message.edit_text(
                f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_info.full_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üü† –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

–ß–∞—Å—Ç—å –æ–ø—Ü–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
                reply_markup=group_settings_keyboard(group),
            )


@deeplink_group.callback_query(GroupAccessMenu.filter())
async def handle_access_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    # Get current pending roles for this group
    if group.group_id not in pending_role_changes:
        pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

    current_pending = pending_role_changes[group.group_id]
    role_id = callback_data.role_id

    if role_id in current_pending:
        # Remove role from pending list
        pending_role_changes[group.group_id] = [
            r for r in current_pending if r != role_id
        ]
        action = "—É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"
    else:
        # Add role to pending list
        pending_role_changes[group.group_id] = current_pending + [role_id]
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º"

    from tgbot.misc.dicts import roles

    role_name = roles[role_id]["name"]
    await callback.answer(f"–†–æ–ª—å '{role_name}' {action}")

    # Update keyboard with pending changes
    await callback.message.edit_reply_markup(
        reply_markup=group_access_keyboard(group, pending_role_changes[group.group_id])
    )


@deeplink_group.callback_query(GroupAccessApplyMenu.filter())
async def handle_access_apply_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessApplyMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    if callback_data.action == "apply":
        # Apply the pending changes
        if group.group_id in pending_role_changes:
            new_roles = pending_role_changes[group.group_id]

            updated_group = await stp_repo.group.update_group(
                group_id=group.group_id, allowed_roles=new_roles
            )

            if updated_group:
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

                # Clean up pending changes
                del pending_role_changes[group.group_id]

                # Update keyboard without pending changes
                await callback.message.edit_reply_markup(
                    reply_markup=group_access_keyboard(updated_group)
                )
                logger.info(
                    f"Successfully applied access roles for group {group.group_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                logger.error(f"Failed to apply access roles for group {group.group_id}")
        else:
            await callback.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

    elif callback_data.action == "cancel":
        # Cancel pending changes
        if group.group_id in pending_role_changes:
            del pending_role_changes[group.group_id]

        await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")

        # Update keyboard with original roles
        await callback.message.edit_reply_markup(
            reply_markup=group_access_keyboard(group)
        )
