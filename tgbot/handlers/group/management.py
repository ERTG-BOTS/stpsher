import logging
from typing import List, Tuple

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.group.main import (
    GroupAccessApplyMenu,
    GroupAccessMenu,
    GroupManagementMenu,
    GroupMemberActionMenu,
    GroupMemberDetailMenu,
    GroupMembersMenu,
    GroupServiceMessagesApplyMenu,
    GroupServiceMessagesMenu,
    GroupSettingsMenu,
    GroupsMenu,
    group_access_kb,
    group_management_kb,
    group_member_detail_kb,
    group_members_kb,
    group_service_messages_kb,
    group_settings_kb,
)
from tgbot.misc.dicts import roles

logger = logging.getLogger(__name__)

group_management_router = Router()
group_management_router.callback_query.filter(F.message.chat.type == "private")

# Store pending role changes per group
pending_role_changes = {}
# Store pending service messages changes per group
pending_service_messages_changes = {}


async def get_user_groups(
    user_id: int, stp_repo: MainRequestsRepo, bot
) -> List[Tuple[int, str]]:
    """Get list of all groups where user is a member."""
    user_groups = []
    member_groups = await stp_repo.group_member.get_member_groups(user_id)

    for group_member in member_groups:
        group_id = group_member.group_id
        try:
            try:
                chat_info = await bot.get_chat(chat_id=group_id)
                group_name = chat_info.title or f"{group_id}"
                user_groups.append((group_id, group_name))
            except Exception as e:
                logger.warning(f"Failed to get chat info for group {group_id}: {e}")
                user_groups.append((group_id, f"{group_id}"))
        except Exception as e:
            logger.warning(f"Failed to check group {group_id}: {e}")
            continue

    return user_groups


async def check_user_admin_status(user_id: int, group_id: int, bot) -> bool:
    """Check if user is an admin of the group."""
    try:
        member_status = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
        return member_status.status in ["administrator", "creator"]
    except Exception as e:
        logger.warning(f"Failed to check admin status for group {group_id}: {e}")
        return False


async def _update_toggle_setting(
    callback: CallbackQuery,
    stp_repo: MainRequestsRepo,
    group,
    field_name: str,
    current_value: bool,
    success_message: str,
    page: int = 1,
) -> None:
    """Helper function to update toggle settings efficiently."""
    new_value = not current_value
    update_data = {field_name: new_value}

    logger.info(
        f"Updating group {group.group_id}: {field_name} from {current_value} to {new_value}"
    )

    updated_group = await stp_repo.group.update_group(
        group_id=group.group_id, **update_data
    )

    if updated_group:
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await callback.answer(f"{success_message} {status}")

        await callback.message.edit_reply_markup(
            reply_markup=group_settings_kb(updated_group, page)
        )
        logger.info(f"Successfully updated group {group.group_id} setting {field_name}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        logger.error(f"Failed to update group {group.group_id} setting {field_name}")


# =========================== MAIN HANDLERS ===========================


@group_management_router.callback_query(GroupsMenu.filter(F.menu == "management"))
async def handle_management_menu(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """Handle groups management menu."""
    user_id = callback.from_user.id
    user_groups = await get_user_groups(user_id, stp_repo, callback.bot)

    if not user_groups:
        await callback.message.edit_text(
            """üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>

‚ùå <b>–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ</b>

–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç
2. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

<i>–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –≤–µ—Ä–Ω–∏—Å—å –≤ —ç—Ç–æ –º–µ–Ω—é</i>""",
            reply_markup=group_management_kb([]),
        )
    else:
        await callback.message.edit_text(
            f"""üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>

–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <b>{len(user_groups)}</b>

<i>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</i>""",
            reply_markup=group_management_kb(user_groups),
        )

    await callback.answer()


@group_management_router.callback_query(GroupManagementMenu.filter(F.action == "page"))
async def handle_management_pagination(
    callback: CallbackQuery,
    callback_data: GroupManagementMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle pagination in groups management menu."""
    user_id = callback.from_user.id
    user_groups = await get_user_groups(user_id, stp_repo, callback.bot)

    if not user_groups:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return

    await callback.message.edit_text(
        f"""üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>

–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <b>{len(user_groups)}</b>

<i>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</i>""",
        reply_markup=group_management_kb(user_groups, callback_data.page),
    )

    await callback.answer()


@group_management_router.callback_query(
    GroupManagementMenu.filter(F.action == "select_group")
)
async def handle_group_selection(
    callback: CallbackQuery,
    callback_data: GroupManagementMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle group selection for management."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    try:
        group = await stp_repo.group.get_group(group_id)
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        is_admin = await check_user_admin_status(user_id, group_id, callback.bot)
        chat_info = await callback.bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"

        if is_admin:
            await callback.message.edit_text(
                f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üî¥ –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
                reply_markup=group_settings_kb(group, callback_data.page),
            )
        else:
            await callback.message.edit_text(
                f"""üìÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</b>: {group_name}

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:
{"üü¢" if group.remove_unemployed else "üî¥"} –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
{"üü¢" if group.new_user_notify else "üî¥"} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
{"üü¢" if group.is_casino_allowed else "üî¥"} –ö–∞–∑–∏–Ω–æ

üõ°Ô∏è <b>–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ</b>: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω" if group.allowed_roles else "–û—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö"}

üóëÔ∏è <b>–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if hasattr(group, "service_messages") and group.service_messages else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"}

‚ùó <b>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–ª—É—á–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ</b>""",
                reply_markup=group_management_kb(
                    await get_user_groups(user_id, stp_repo, callback.bot),
                    callback_data.page,
                ),
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling group selection for group {group_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@group_management_router.callback_query(
    GroupManagementMenu.filter(F.action == "back_to_list")
)
async def handle_back_to_list(
    callback: CallbackQuery,
    callback_data: GroupManagementMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle back to groups list."""
    user_id = callback.from_user.id
    user_groups = await get_user_groups(user_id, stp_repo, callback.bot)

    if not user_groups:
        await callback.message.edit_text(
            """üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>

‚ùå <b>–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ</b>

–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç
2. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

<i>–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –≤–µ—Ä–Ω–∏—Å—å –≤ —ç—Ç–æ –º–µ–Ω—é</i>""",
            reply_markup=group_management_kb([]),
        )
    else:
        await callback.message.edit_text(
            f"""üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>

–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <b>{len(user_groups)}</b>

<i>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</i>""",
            reply_markup=group_management_kb(user_groups, callback_data.page),
        )

    await callback.answer()


# =========================== SETTINGS HANDLERS ===========================


@group_management_router.callback_query(GroupSettingsMenu.filter())
async def handle_settings_callback(
    callback: CallbackQuery,
    callback_data: GroupSettingsMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle group settings."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    match callback_data.menu:
        case "remove_unemployed" | "is_casino_allowed" | "new_user_notify":
            field_name = callback_data.menu
            current_value = getattr(group, field_name)

            success_messages = {
                "remove_unemployed": "–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
                "is_casino_allowed": "–ö–∞–∑–∏–Ω–æ",
                "new_user_notify": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            }

            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                field_name,
                current_value,
                success_messages[field_name],
                callback_data.page,
            )

        case "access":
            pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

            await callback.message.edit_text(
                """üõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ</b>

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
- üî¥ –ù–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞

<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"</i>
<i>–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ - —É –ª—é–±–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø</i>

<blockquote expandable>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—Ü–∏–∏ "–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"

–ï—Å–ª–∏ –æ–ø—Ü–∏—è "–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏ —É–∫–∞–∑–∞–Ω—ã —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞, —Ç–æ:
- –í –≥—Ä—É–ø–ø–µ —Å–º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
- –í –≥—Ä—É–ø–ø—É —Å–º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏</blockquote>""",
                reply_markup=group_access_kb(
                    group, pending_role_changes[group.group_id], callback_data.page
                ),
            )

        case "service_messages":
            pending_service_messages_changes[group.group_id] = (
                getattr(group, "service_messages", []) or []
            ).copy()

            await callback.message.edit_text(
                """üóëÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –£–¥–∞–ª—è—é—Ç—Å—è
- üî¥ –ù–µ —É–¥–∞–ª—è—é—Ç—Å—è

<blockquote expandable><b>–¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ <b>–í—Å–µ</b> - –≤—Å–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ <b>–í—Ö–æ–¥</b> - "X –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É"
‚Ä¢ <b>–í—ã—Ö–æ–¥</b> - "X –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
‚Ä¢ <b>–ü—Ä–æ—á–µ–µ</b> - –±—É—Å—Ç—ã, –ø–ª–∞—Ç–µ–∂–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ <b>–§–æ—Ç–æ</b> - —Å–º–µ–Ω–∞ —Ñ–æ—Ç–æ —á–∞—Ç–∞
‚Ä¢ <b>–ó–∞–∫—Ä–µ–ø</b> - "X –∑–∞–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> - —Å–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
‚Ä¢ <b>–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏</b> - –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º–∏</blockquote>

<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"</i>""",
                reply_markup=group_service_messages_kb(
                    group,
                    pending_service_messages_changes[group.group_id],
                    callback_data.page,
                ),
            )

        case "members":
            group_members = await stp_repo.group_member.get_group_members(
                group.group_id
            )

            employees = []
            non_employee_users = []

            for group_member in group_members:
                employee = await stp_repo.employee.get_user(
                    user_id=group_member.member_id
                )
                if employee:
                    employees.append(employee)
                else:
                    try:
                        chat_member = await callback.bot.get_chat_member(
                            chat_id=group.group_id, user_id=group_member.member_id
                        )
                        non_employee_users.append(chat_member.user)
                    except Exception:
                        continue

            total_members = len(employees) + len(non_employee_users)

            role_legend = []
            for role_id, role_info in roles.items():
                if role_id not in [0, 10]:
                    role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

            await callback.message.edit_text(
                f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
                reply_markup=group_members_kb(
                    group_id=group.group_id,
                    employees=employees,
                    users=non_employee_users,
                    current_page=1,
                    list_page=callback_data.page,
                ),
            )

        case "back":
            chat_info = await callback.bot.get_chat(chat_id=group.group_id)
            group_name = chat_info.title or f"{group_id}"

            await callback.message.edit_text(
                f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üî¥ –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
                reply_markup=group_settings_kb(group, callback_data.page),
            )

    await callback.answer()


# =========================== ACCESS CONTROL HANDLERS ===========================


@group_management_router.callback_query(GroupAccessMenu.filter())
async def handle_access_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle access control settings."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    if group.group_id not in pending_role_changes:
        pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

    current_pending = pending_role_changes[group.group_id]
    role_id = callback_data.role_id

    if role_id in current_pending:
        pending_role_changes[group.group_id] = [
            r for r in current_pending if r != role_id
        ]
        action = "—É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"
    else:
        pending_role_changes[group.group_id] = current_pending + [role_id]
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º"

    role_name = roles[role_id]["name"]
    await callback.answer(f"–†–æ–ª—å '{role_name}' {action}")

    await callback.message.edit_reply_markup(
        reply_markup=group_access_kb(
            group, pending_role_changes[group.group_id], callback_data.page
        )
    )


@group_management_router.callback_query(GroupAccessApplyMenu.filter())
async def handle_access_apply_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessApplyMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle access control apply/cancel."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    if callback_data.action == "apply":
        if group.group_id in pending_role_changes:
            new_roles = pending_role_changes[group.group_id]

            updated_group = await stp_repo.group.update_group(
                group_id=group.group_id, allowed_roles=new_roles
            )

            if updated_group:
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                del pending_role_changes[group.group_id]

                await callback.message.edit_reply_markup(
                    reply_markup=group_access_kb(updated_group, page=callback_data.page)
                )
                logger.info(
                    f"Successfully applied access roles for group {group.group_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                logger.error(f"Failed to apply access roles for group {group.group_id}")
        else:
            await callback.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

    elif callback_data.action == "cancel":
        if group.group_id in pending_role_changes:
            del pending_role_changes[group.group_id]

        await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
        await callback.message.edit_reply_markup(
            reply_markup=group_access_kb(group, page=callback_data.page)
        )


# =========================== SERVICE MESSAGES HANDLERS ===========================


@group_management_router.callback_query(GroupServiceMessagesMenu.filter())
async def handle_service_messages_callback(
    callback: CallbackQuery,
    callback_data: GroupServiceMessagesMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle service messages settings."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    if group.group_id not in pending_service_messages_changes:
        pending_service_messages_changes[group.group_id] = (
            getattr(group, "service_messages", []) or []
        ).copy()

    current_pending = pending_service_messages_changes[group.group_id]
    category = callback_data.category

    if category in current_pending:
        pending_service_messages_changes[group.group_id] = [
            c for c in current_pending if c != category
        ]
        action = "—É–±—Ä–∞–Ω–∞ –∏–∑ —É–¥–∞–ª—è–µ–º—ã—Ö"
    else:
        pending_service_messages_changes[group.group_id] = current_pending + [category]
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —É–¥–∞–ª—è–µ–º—ã–º"

    category_names = {
        "all": "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "join": "–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "leave": "–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "other": "–ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "photo": "–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ",
        "pin": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "title": "–°–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è",
        "videochat": "–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏",
    }

    category_name = category_names.get(category, category)
    await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' {action}")

    await callback.message.edit_reply_markup(
        reply_markup=group_service_messages_kb(
            group, pending_service_messages_changes[group.group_id], callback_data.page
        )
    )


@group_management_router.callback_query(GroupServiceMessagesApplyMenu.filter())
async def handle_service_messages_apply_callback(
    callback: CallbackQuery,
    callback_data: GroupServiceMessagesApplyMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle service messages apply/cancel."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    if callback_data.action == "apply":
        if group.group_id in pending_service_messages_changes:
            new_categories = pending_service_messages_changes[group.group_id]

            updated_group = await stp_repo.group.update_group(
                group_id=group.group_id, service_messages=new_categories
            )

            if updated_group:
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                del pending_service_messages_changes[group.group_id]

                await callback.message.edit_reply_markup(
                    reply_markup=group_service_messages_kb(
                        updated_group, page=callback_data.page
                    )
                )
                logger.info(
                    f"Successfully applied service messages settings for group {group.group_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                logger.error(
                    f"Failed to apply service messages settings for group {group.group_id}"
                )
        else:
            await callback.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

    elif callback_data.action == "cancel":
        if group.group_id in pending_service_messages_changes:
            del pending_service_messages_changes[group.group_id]

        await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
        await callback.message.edit_reply_markup(
            reply_markup=group_service_messages_kb(group, page=callback_data.page)
        )


# =========================== MEMBERS MANAGEMENT HANDLERS ===========================


@group_management_router.callback_query(GroupMembersMenu.filter())
async def handle_members_pagination(
    callback: CallbackQuery,
    callback_data: GroupMembersMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle members list pagination."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    group_members = await stp_repo.group_member.get_group_members(group.group_id)

    employees = []
    non_employee_users = []

    for group_member in group_members:
        employee = await stp_repo.employee.get_user(user_id=group_member.member_id)
        if employee:
            employees.append(employee)
        else:
            try:
                chat_member = await callback.bot.get_chat_member(
                    chat_id=group.group_id, user_id=group_member.member_id
                )
                non_employee_users.append(chat_member.user)
            except Exception:
                continue

    total_members = len(employees) + len(non_employee_users)

    role_legend = []
    for role_id, role_info in roles.items():
        if role_id not in [0, 10]:
            role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

    await callback.message.edit_text(
        f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
        reply_markup=group_members_kb(
            group_id=group.group_id,
            employees=employees,
            users=non_employee_users,
            current_page=callback_data.page,
            list_page=callback_data.list_page,
        ),
    )

    await callback.answer()


@group_management_router.callback_query(GroupMemberDetailMenu.filter())
async def handle_member_detail(
    callback: CallbackQuery,
    callback_data: GroupMemberDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle member detail view."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    member_name = ""
    member_info = ""

    if callback_data.member_type == "employee":
        employee = await stp_repo.employee.get_user(user_id=callback_data.member_id)
        if employee:
            from tgbot.keyboards.group.main import short_name

            member_name = short_name(employee.fullname)
            role_info = roles.get(
                employee.role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", "emoji": ""}
            )
            member_info = f"""üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>: {employee.fullname}
üè∑Ô∏è <b>–†–æ–ª—å</b>: {role_info["emoji"]} {role_info["name"]}
üÜî <b>ID</b>: <code>{employee.user_id}</code>"""
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return
    else:
        try:
            chat_member = await callback.bot.get_chat_member(
                chat_id=group.group_id, user_id=callback_data.member_id
            )
            user = chat_member.user
            username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            full_name = f"{user.first_name}"
            if user.last_name:
                full_name += f" {user.last_name}"

            member_name = username
            member_info = f"""üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>: {full_name}
üë§ <b>Username</b>: {username}
üÜî <b>ID</b>: <code>{user.id}</code>"""
        except Exception:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

    await callback.message.edit_text(
        f"""üîç <b>–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

{member_info}

<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º</i>""",
        reply_markup=group_member_detail_kb(
            group_id=callback_data.group_id,
            member_id=callback_data.member_id,
            member_type=callback_data.member_type,
            member_name=member_name,
            page=callback_data.page,
            list_page=callback_data.list_page,
        ),
    )

    await callback.answer()


@group_management_router.callback_query(GroupMemberActionMenu.filter())
async def handle_member_action(
    callback: CallbackQuery,
    callback_data: GroupMemberActionMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle member actions (ban)."""
    user_id = callback.from_user.id
    group_id = callback_data.group_id

    if not await check_user_admin_status(user_id, group_id, callback.bot):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        return

    group = await stp_repo.group.get_group(group_id)
    if not group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    if callback_data.action == "ban":
        try:
            await callback.bot.ban_chat_member(
                chat_id=group.group_id, user_id=callback_data.member_id
            )

            removal_success = await stp_repo.group_member.remove_member(
                group_id=group.group_id, member_id=callback_data.member_id
            )

            if removal_success:
                await callback.answer("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                logger.info(
                    f"User {callback_data.member_id} banned from group {group.group_id} "
                    f"and removed from database"
                )
            else:
                await callback.answer("‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                logger.warning(
                    f"User {callback_data.member_id} banned from group {group.group_id} "
                    f"but failed to remove from database"
                )

            # Return to members list with updated data
            group_members = await stp_repo.group_member.get_group_members(
                group.group_id
            )

            employees = []
            non_employee_users = []

            for group_member in group_members:
                employee = await stp_repo.employee.get_user(
                    user_id=group_member.member_id
                )
                if employee:
                    employees.append(employee)
                else:
                    try:
                        chat_member = await callback.bot.get_chat_member(
                            chat_id=group.group_id, user_id=group_member.member_id
                        )
                        non_employee_users.append(chat_member.user)
                    except Exception:
                        continue

            total_members = len(employees) + len(non_employee_users)

            role_legend = []
            for role_id, role_info in roles.items():
                if role_id not in [0, 10]:
                    role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

            await callback.message.edit_text(
                f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
                reply_markup=group_members_kb(
                    group_id=group.group_id,
                    employees=employees,
                    users=non_employee_users,
                    current_page=callback_data.page,
                    list_page=callback_data.list_page,
                ),
            )

        except Exception as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            logger.error(f"Failed to ban user {callback_data.member_id}: {e}")

    await callback.answer()
