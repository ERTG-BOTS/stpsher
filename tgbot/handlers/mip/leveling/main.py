import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.role import MipFilter
from tgbot.keyboards.mip.leveling.main import (
    AwardActionMenu,
    AwardActivationMenu,
    AwardsMenu,
    LevelingMenu,
    achievements_kb,
    achievements_paginated_kb,
    award_activation_kb,
    award_detail_kb,
    awards_paginated_kb,
)
from tgbot.keyboards.user.main import MainMenu

mip_leveling_router = Router()
mip_leveling_router.message.filter(F.chat.type == "private", MipFilter())
mip_leveling_router.callback_query.filter(F.message.chat.type == "private", MipFilter())

logger = logging.getLogger(__name__)


@mip_leveling_router.callback_query(MainMenu.filter(F.menu == "leveling"))
async def mip_achievements_cmd(callback: CallbackQuery):
    await callback.message.edit_text(
        """<b>üèÜ –ê—á–∏–≤–∫–∏</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥""",
        reply_markup=achievements_kb(),
    )


@mip_leveling_router.callback_query(LevelingMenu.filter(F.menu == "awards_activation"))
async def awards_activation(
    callback: CallbackQuery, callback_data: LevelingMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "waiting" –∏ manager_role == 6
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å manager_role == 6
    waiting_awards = await stp_repo.user_award.get_waiting_awards_for_activation(
        manager_role=6
    )

    if not waiting_awards:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üòä""",
            reply_markup=award_activation_kb(page, 0, []),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(waiting_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = waiting_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award_detail in enumerate(page_awards, start=start_idx + 1):
        user_award = award_detail.user_award
        award_info = award_detail.award_info

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await stp_repo.user.get_user(user_id=user_award.user_id)
        user_name = user.fullname if user else f"ID: {user_award.user_id}"

        awards_list.append(f"""{counter}. <b>{award_info.name}</b>
üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: <a href='tg://user?id={user.user_id}'>{user_name}</a>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award_info.cost} –±–∞–ª–ª–æ–≤
üìÖ –î–∞—Ç–∞: {user_award.bought_at.strftime("%d.%m.%Y %H:%M")}""")
        awards_list.append("")

    message_text = f"""<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote>–í—Å–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {total_awards}</blockquote>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=award_activation_kb(page, total_pages, page_awards)
    )
    logger.info(
        f"[–ú–ò–ü] - [–ê–∫—Ç–∏–≤–∞—Ü–∏—è] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@mip_leveling_router.callback_query(AwardActivationMenu.filter())
async def award_activation_detail(
    callback: CallbackQuery, callback_data: AwardActivationMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    user_award_id = callback_data.user_award_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not award_detail:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    user_award = award_detail.user_award
    award_info = award_detail.award_info

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await stp_repo.user.get_user(user_id=user_award.user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

<b>üèÜ –û –Ω–∞–≥—Ä–∞–¥–µ:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {award_info.name}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {award_info.description}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award_info.cost} –±–∞–ª–ª–æ–≤
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {award_info.division}"""

    if award_info.count > 1:
        message_text += f"\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {award_info.count}"

    message_text += f"""

<b>üë§ –û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ:</b>
‚Ä¢ –§–ò–û: <b>{user.fullname}</b>
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user.division}
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.position}
‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {user.head}

<b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}"""

    if user_award.comment:
        message_text += f"\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {user_award.comment}"

    await callback.message.edit_text(
        message_text,
        reply_markup=award_detail_kb(user_award_id, current_page, user.user_id),
    )


@mip_leveling_router.callback_query(AwardActionMenu.filter())
async def award_action_handler(
    callback: CallbackQuery, callback_data: AwardActionMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    """
    user_award_id = callback_data.user_award_id
    action = callback_data.action
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
    award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not award_detail:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    user_award = award_detail.user_award
    award_info = award_detail.award_info
    user = await stp_repo.user.get_user(user_id=user_award.user_id)

    try:
        if action == "approve":
            # –û–¥–æ–±—Ä—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.update_award_status(
                user_award_id=user_award_id,
                status="approved",
                updated_by_user_id=callback.from_user.id,
            )

            await callback.answer(
                f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {award_info.name} –¥–ª—è {user.fullname} –æ–¥–æ–±—Ä–µ–Ω–∞!",
                show_alert=True,
            )

            logger.info(
                f"[–ú–ò–ü] - [–û–¥–æ–±—Ä–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –æ–¥–æ–±—Ä–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user_award.user_id})"
            )

        elif action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.update_award_status(
                user_award_id=user_award_id,
                status="rejected",
                updated_by_user_id=callback.from_user.id,
            )

            await callback.answer(
                f"‚õî –ù–∞–≥—Ä–∞–¥–∞ {award_info.name} –¥–ª—è {user.fullname} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
                show_alert=True,
            )

            logger.info(
                f"[–ú–ò–ü] - [–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user_award.user_id})"
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await awards_activation(
            callback=callback,
            callback_data=LevelingMenu(menu="awards_activation", page=current_page),
            stp_repo=stp_repo,
        )

    except Exception as e:
        logger.error(f"Error updating award status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)


@mip_leveling_router.callback_query(LevelingMenu.filter(F.menu == "achievements_all"))
async def achievements_all(
    callback: CallbackQuery, callback_data: LevelingMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ú–ò–ü
    –ú–ò–ü –≤–∏–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_achievements = await stp_repo.achievement.get_achievements()

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    achievements_per_page = 5
    total_achievements = len(all_achievements)
    total_pages = (
        total_achievements + achievements_per_page - 1
    ) // achievements_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * achievements_per_page
    end_idx = start_idx + achievements_per_page
    page_achievements = all_achievements[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    achievements_list = []
    for counter, achievement in enumerate(page_achievements, start=start_idx + 1):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ KPI –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
        description = (
            str(achievement.description).replace("<", "&lt;").replace(">", "&gt;")
        )
        name = str(achievement.name).replace("<", "&lt;").replace(">", "&gt;")
        division = str(achievement.division).replace("<", "&lt;").replace(">", "&gt;")
        position = str(achievement.position).replace("<", "&lt;").replace(">", "&gt;")

        achievements_list.append(f"""{counter}. <b>{name}</b>
üèÖ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {division}
üë§ –ü–æ–∑–∏—Ü–∏—è: {position}""")
        achievements_list.append("")

    message_text = f"""<b>üéØ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
–ù–¢–ü: {sum(1 for achievement in all_achievements if achievement.division == "–ù–¢–ü")}
–ù–¶–ö: {sum(1 for achievement in all_achievements if achievement.division == "–ù–¶–ö")}
–í—Å–µ–≥–æ: {total_achievements}</blockquote>

{"\n".join(achievements_list)}"""

    logger.info(repr(message_text))
    await callback.message.edit_text(
        message_text, reply_markup=achievements_paginated_kb(page, total_pages)
    )
    logger.info(
        f"[–ú–ò–ü] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@mip_leveling_router.callback_query(AwardsMenu.filter(F.menu == "awards_all"))
async def awards_all(
    callback: CallbackQuery, callback_data: AwardsMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ú–ò–ü
    –ú–ò–ü –≤–∏–¥–∏—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–∞–≥—Ä–∞–¥—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_awards = await stp_repo.award.get_awards()

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(all_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = all_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {award.division}""")
        if award.count > 0:
            awards_list.append(f"""üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}""")
        awards_list.append("")

    message_text = f"""<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote expandable>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥:
–ù–¢–ü: {sum(1 for award in all_awards if award.division == "–ù–¢–ü")}
–ù–¶–ö: {sum(1 for award in all_awards if award.division == "–ù–¶–ö")}
–í—Å–µ–≥–æ: {total_awards}</blockquote>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=awards_paginated_kb(page, total_pages)
    )
    logger.info(
        f"[–ú–ò–ü] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )
