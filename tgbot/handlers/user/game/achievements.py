import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from stp_database import Employee
from stp_database.repo.STP.requests import MainRequestsRepo

from tgbot.keyboards.user.game.achievements import (
    AchievementsMenu,
    achievements_paginated_kb,
    to_achievements_kb,
)
from tgbot.keyboards.user.game.main import GameMenu

user_game_achievements_router = Router()
user_game_achievements_router.message.filter(
    F.chat.type == "private",
)
user_game_achievements_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_game_achievements_router.callback_query(GameMenu.filter(F.menu == "achievements"))
async def user_achievements_cb(
    callback: CallbackQuery, user: Employee, stp_repo: MainRequestsRepo
):
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = await stp_repo.achievement.get_achievements(
        division=user.division
    )

    if not user_achievements:
        await callback.message.edit_text(
            """<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

–í —Ç–≤–æ–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üòî""",
            reply_markup=to_achievements_kb(),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    achievements_per_page = 5
    total_achievements = len(user_achievements)
    total_pages = (
        total_achievements + achievements_per_page - 1
    ) // achievements_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = 0
    end_idx = achievements_per_page
    page_achievements = user_achievements[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    achievements_list = []
    for counter, achievement in enumerate(page_achievements, start=1):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—è—Ö
        description = (
            str(achievement.description).replace("<", "&lt;").replace(">", "&gt;")
        )
        name = str(achievement.name).replace("<", "&lt;").replace(">", "&gt;")
        position = str(achievement.position).replace("<", "&lt;").replace(">", "&gt;")

        period = ""
        match achievement.period:
            case "d":
                period = "–†–∞–∑ –≤ –¥–µ–Ω—å"
            case "w":
                period = "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            case "m":
                period = "–†–∞–∑ –≤ –º–µ—Å—è—Ü"
            case "A":
                period = "–í—Ä—É—á–Ω—É—é"
            case _:
                period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        achievements_list.append(f"""{counter}. <b>{name}</b>
<blockquote>üèÖ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üî∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}
üïí –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: {period}</blockquote>""")
        achievements_list.append("")

    message_text = f"""<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

<b>üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b> {total_achievements}

{chr(10).join(achievements_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=achievements_paginated_kb(1, total_pages)
    )

    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): "
        f"–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {user.division}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1"
    )


@user_game_achievements_router.callback_query(AchievementsMenu.filter(F.menu == "all"))
async def achievements_all(
    callback: CallbackQuery,
    callback_data: AchievementsMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = await stp_repo.achievement.get_achievements(
        division=user.division
    )

    if not user_achievements:
        await callback.message.edit_text(
            """<b>üéØ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

–í —Ç–≤–æ–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üòî""",
            reply_markup=to_achievements_kb(),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    achievements_per_page = 5
    total_achievements = len(user_achievements)
    total_pages = (
        total_achievements + achievements_per_page - 1
    ) // achievements_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * achievements_per_page
    end_idx = start_idx + achievements_per_page
    page_achievements = user_achievements[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    achievements_list = []
    for counter, achievement in enumerate(page_achievements, start=start_idx + 1):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—è—Ö
        description = (
            str(achievement.description).replace("<", "&lt;").replace(">", "&gt;")
        )
        name = str(achievement.name).replace("<", "&lt;").replace(">", "&gt;")
        position = str(achievement.position).replace("<", "&lt;").replace(">", "&gt;")

        period = ""
        match achievement.period:
            case "d":
                period = "–†–∞–∑ –≤ –¥–µ–Ω—å"
            case "w":
                period = "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            case "m":
                period = "–†–∞–∑ –≤ –º–µ—Å—è—Ü"
            case "A":
                period = "–í—Ä—É—á–Ω—É—é"
            case _:
                period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        achievements_list.append(f"""{counter}. <b>{name}</b>
<blockquote>üèÖ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üî∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}
üïí –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: {period}</blockquote>""")
        achievements_list.append("")

    message_text = f"""<b>üéØ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

<b>üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b> {total_achievements}

{chr(10).join(achievements_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=achievements_paginated_kb(page, total_pages)
    )

    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): "
        f"–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {user.division}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )
