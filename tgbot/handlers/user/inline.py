import logging

from aiogram import Router
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)

from infrastructure.database.models import User
from tgbot.handlers.user.schedule.main import schedule_service

logger = logging.getLogger(__name__)

user_inline_router = Router()


@user_inline_router.inline_query()
async def inline_help(inline_query: InlineQuery, user: User, stp_repo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
    if not user:
        results = [
            InlineQueryResultArticle(
                id="auth_help",
                title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                description="–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è @stpsher_bot"
                ),
            )
        ]
    else:
        results = []

        # –ú–æ–π –≥—Ä–∞—Ñ–∏–∫ - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            current_month = schedule_service.get_current_month()
            schedule_text = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=True
            )
            results.append(
                InlineQueryResultArticle(
                    id="schedule_option",
                    title="üìÖ –ú–æ–π –≥—Ä–∞—Ñ–∏–∫",
                    description=f"–ì—Ä–∞—Ñ–∏–∫ {user.fullname} –Ω–∞ {current_month}",
                    input_message_content=InputTextMessageContent(
                        message_text=schedule_text, parse_mode="HTML"
                    ),
                )
            )
        except Exception as e:
            logger.error(f"Error getting schedule for inline help: {e}")
            results.append(
                InlineQueryResultArticle(
                    id="schedule_error",
                    title="üìÖ –ú–æ–π –≥—Ä–∞—Ñ–∏–∫",
                    description="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}"
                    ),
                )
            )

        # –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            duties_text = await schedule_service.get_duties_response(
                division=user.division, stp_repo=stp_repo
            )
            results.append(
                InlineQueryResultArticle(
                    id="duties_option",
                    title="üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description=f"–î–µ–∂—É—Ä–Ω—ã–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {user.division}",
                    input_message_content=InputTextMessageContent(
                        message_text=duties_text, parse_mode="HTML"
                    ),
                )
            )
        except Exception as e:
            logger.error(f"Error getting duties for inline help: {e}")
            results.append(
                InlineQueryResultArticle(
                    id="duties_error",
                    title="üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö: {e}"
                    ),
                )
            )

        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            heads_text = await schedule_service.get_heads_response(
                division=user.division, stp_repo=stp_repo
            )
            results.append(
                InlineQueryResultArticle(
                    id="heads_option",
                    title="üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description=f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {user.division}",
                    input_message_content=InputTextMessageContent(
                        message_text=heads_text, parse_mode="HTML"
                    ),
                )
            )
        except Exception as e:
            logger.error(f"Error getting heads for inline help: {e}")
            results.append(
                InlineQueryResultArticle(
                    id="heads_error",
                    title="üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
                    input_message_content=InputTextMessageContent(
                        message_text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}"
                    ),
                )
            )

    await inline_query.answer(results, cache_time=60, is_personal=True)
