import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.handlers.gok.game.main import filter_items_by_division
from tgbot.keyboards.gok.main import GokFilterToggleMenu, parse_filters, toggle_filter
from tgbot.keyboards.head.group.game.achievements import head_achievements_paginated_kb
from tgbot.keyboards.head.group.game.products import head_products_paginated_kb

head_game_filters_router = Router()
head_game_filters_router.message.filter(F.chat.type == "private", HeadFilter())
head_game_filters_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_filters_router.callback_query(GokFilterToggleMenu.filter())
async def head_toggle_filter(
    callback: CallbackQuery,
    callback_data: GokFilterToggleMenu,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    menu = callback_data.menu
    filter_name = callback_data.filter_name
    current_filters = callback_data.current_filters
    page = callback_data.page

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    new_filters = toggle_filter(current_filters, filter_name)

    if menu == "achievements_all":
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        active_filters = parse_filters(new_filters)
        all_achievements = await stp_repo.achievement.get_achievements()
        filtered_achievements = filter_items_by_division(
            all_achievements, active_filters
        )

        # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        achievements_per_page = 5
        total_achievements = len(filtered_achievements)
        total_pages = (
            total_achievements + achievements_per_page - 1
        ) // achievements_per_page

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if page > total_pages:
            page = 1

        # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * achievements_per_page
        end_idx = start_idx + achievements_per_page
        page_achievements = filtered_achievements[start_idx:end_idx]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        achievements_list = []
        for counter, achievement in enumerate(page_achievements, start=start_idx + 1):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—è—Ö
            description = (
                str(achievement.description).replace("<", "&lt;").replace(">", "&gt;")
            )
            name = str(achievement.name).replace("<", "&lt;").replace(">", "&gt;")
            division = (
                str(achievement.division).replace("<", "&lt;").replace(">", "&gt;")
            )
            position = (
                str(achievement.position).replace("<", "&lt;").replace(">", "&gt;")
            )

            achievements_list.append(f"""{counter}. <b>{name}</b>
<blockquote>üèÖ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üî∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position} {division}</blockquote>""")
            achievements_list.append("")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º (–Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º)
        stats_ntp = sum(
            1 for achievement in all_achievements if achievement.division == "–ù–¢–ü"
        )
        stats_nck = sum(
            1 for achievement in all_achievements if achievement.division == "–ù–¶–ö"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º
        filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_achievements}"

        message_text = f"""<b>üéØ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
–ù–¢–ü: {stats_ntp} | –ù–¶–ö: {stats_nck}
{filtered_stats}</blockquote>

{chr(10).join(achievements_list)}"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_achievements_paginated_kb(page, total_pages, new_filters),
        )

    elif menu == "products_all":
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        active_filters = parse_filters(new_filters)
        all_products = await stp_repo.product.get_products()
        filtered_products = filter_items_by_division(all_products, active_filters)

        # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        products_per_page = 5
        total_products = len(filtered_products)
        total_pages = (total_products + products_per_page - 1) // products_per_page

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if page > total_pages:
            page = 1

        # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * products_per_page
        end_idx = start_idx + products_per_page
        page_products = filtered_products[start_idx:end_idx]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        products_list = []
        for counter, product in enumerate(page_products, start=start_idx + 1):
            product_text = f"""
<b>{counter}. {product.name}</b>
<blockquote>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {product.count}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost} –±–∞–ª–ª–æ–≤
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {product.division}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}</blockquote>"""
            products_list.append(product_text)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_ntp = sum(1 for product in all_products if product.division == "–ù–¢–ü")
        stats_nck = sum(1 for product in all_products if product.division == "–ù–¶–ö")
        filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_products}"

        message_text = f"""
<b>üëè –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote expandable><b>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>  
‚Ä¢ –ù–¢–ü: {stats_ntp}  
‚Ä¢ –ù–¶–ö: {stats_nck}  
{filtered_stats}
</blockquote>{chr(10).join(products_list)}
        """

        await callback.message.edit_text(
            message_text,
            reply_markup=head_products_paginated_kb(page, total_pages, new_filters),
        )

    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–§–∏–ª—å—Ç—Ä] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä {filter_name} –¥–ª—è {menu}"
    )
