import datetime

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from pandas.io.json import to_json

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from tgbot.keyboards.user.kpi import kpi_kb, kpi_calculator_kb
from tgbot.keyboards.user.main import MainMenu

user_kpi_router = Router()
user_kpi_router.message.filter(F.chat.type == "private")
user_kpi_router.callback_query.filter(F.message.chat.type == "private")


@user_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi"))
async def user_kpi_cb(
        callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)
    if premium is None:
        await callback.message.edit_text(
            """üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(""",
            reply_markup=kpi_kb(),
        )
        return

    def format_value(value, suffix=""):
        return f"{value}{suffix}" if value is not None else "‚Äî"

    def format_percentage(value):
        return f"{value}%" if value is not None else "‚Äî"

    message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {format_percentage(premium.csi_premium)}</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(premium.csi)}
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(premium.csi_normative)}  </blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(premium.csi_response)}
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(premium.csi_response_normative)}</blockquote>

üîß <b>FLR - {format_percentage(premium.flr_premium)}</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(premium.flr)}
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {format_percentage(premium.gok_premium)}</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(premium.gok)}
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {format_value(premium.target)}
–ü–ª–∞–Ω: {format_value(premium.target_goal_first)} / {format_value(premium.target_goal_second)}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + format_value(premium.delay, " —Å–µ–∫") if user.division != "–ù–¶–ö" else ""}
<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M")}</i>"""

    try:
        await callback.message.edit_text(message_text, reply_markup=kpi_kb())
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@user_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi_calculator"))
async def user_kpi_calculator_cb(
        callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    user_premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)

    if user_premium is None:
        await callback.message.edit_text(
            """üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(""",
            reply_markup=kpi_calculator_kb(),
        )
        return

    def calculate_csi_needed(division: str, current_csi, normative):
        if normative == 0 or normative is None:
            return "‚Äî"

        current_csi = current_csi or 0

        results = []

        if division == "–ù–¶–ö":
            thresholds = [
                (101, 20, "‚â• 101%"),
                (100.5, 15, "‚â• 100,5%"),
                (100, 10, "‚â• 100%"),
                (98, 5, "‚â• 98%"),
                (0, 0, "&lt; 98%")
            ]
        elif division == "–ù–¢–ü1":
            thresholds = [
                (101, 20, "‚â• 101%"),
                (100.5, 15, "‚â• 100,5%"),
                (100, 10, "‚â• 100%"),
                (98, 5, "‚â• 98%"),
                (0, 0, "&lt; 98%")
            ]
        else:
            thresholds = [
                (100.8, 20, "‚â• 100.8%"),
                (100.4, 15, "‚â• 100.4%"),
                (100, 10, "‚â• 100%"),
                (98, 5, "‚â• 98%"),
                (0, 0, "&lt; 98%")
            ]

        for threshold, premium_percent, description in thresholds:
            needed_csi = (threshold / 100) * normative

            if current_csi >= needed_csi:
                results.append(f"{premium_percent}%: ‚úÖ ({description})")
            else:
                difference = needed_csi - current_csi
                results.append(f"{premium_percent}%: {needed_csi:.3f} [+{difference:.3f}] ({description})")

        return "\n".join(results)

    def calculate_flr_needed(division: str, current_flr, normative):
        if normative == 0 or normative is None:
            return "‚Äî"

        current_flr = current_flr or 0

        results = []

        if division == "–ù–¶–ö":
            thresholds = [
                (103, 30, "‚â• 103%"),
                (102, 25, "‚â• 102%"),
                (101, 21, "‚â• 101%"),
                (100, 18, "‚â• 100%"),
                (95, 13, "‚â• 95%"),
                (0, 8, "&lt; 95%")
            ]
        elif division == "–ù–¢–ü1":
            thresholds = [
                (109, 30, "‚â• 109%"),
                (106, 25, "‚â• 106%"),
                (103, 21, "‚â• 103%"),
                (100, 18, "‚â• 100%"),
                (90, 13, "‚â• 90%"),
                (0, 8, "&lt; 90%")
            ]
        else:
            thresholds = [
                (107, 30, "‚â• 107%"),
                (104, 25, "‚â• 104%"),
                (102, 21, "‚â• 102%"),
                (100, 18, "‚â• 100%"),
                (97, 13, "‚â• 97%"),
                (0, 8, "&lt; 97%")
            ]

        for threshold, premium_percent, description in thresholds:
            needed_flr = (threshold / 100) * normative

            if current_flr >= needed_flr:
                results.append(f"{premium_percent}%: ‚úÖ ({description})")
            else:
                difference = needed_flr - current_flr
                results.append(f"{premium_percent}%: {needed_flr:.2f} [+{difference:.2f}] ({description})")

        return "\n".join(results)

    def calculate_gok_needed(division: str, current_gok, normative):
        if normative == 0 or normative is None:
            return "‚Äî"

        current_gok = current_gok or 0

        results = []

        if division == "–ù–¶–ö":
            thresholds = [
                (100, 17, "‚â• 100%"),
                (95, 15, "‚â• 95%"),
                (90, 12, "‚â• 90%"),
                (85, 9, "‚â• 85%"),
                (80, 5, "‚â• 80%"),
                (0, 0, "&lt; 80%")
            ]
        elif division == "–ù–¢–ü1":
            thresholds = [
                (100, 17, "‚â• 100%"),
                (95, 15, "‚â• 95%"),
                (90, 12, "‚â• 90%"),
                (85, 9, "‚â• 85%"),
                (80, 5, "‚â• 80%"),
                (0, 0, "&lt; 80%")
            ]
        else:
            thresholds = [
                (100, 17, "‚â• 100%"),
                (95, 15, "‚â• 95%"),
                (90, 12, "‚â• 90%"),
                (84, 9, "‚â• 84%"),
                (70, 5, "‚â• 70%"),
                (0, 0, "&lt; 70%")
            ]

        for threshold, premium_percent, description in thresholds:
            needed_gok = (threshold / 100) * normative

            if current_gok >= needed_gok:
                results.append(f"{premium_percent}%: ‚úÖ ({description})")
            else:
                difference = needed_gok - current_gok
                results.append(f"{premium_percent}%: {needed_gok:.3f} [+{difference:.3f}] ({description})")

        return "\n".join(results)

    def calculate_target_needed(division: str, current_target, target_goal_first, target_goal_second, target_type=None):
        if target_goal_first is None and target_goal_second is None:
            return "‚Äî"

        current_target = current_target or 0

        # Determine if this is a sales target (higher is better) or AHT target (lower is better)
        is_sales_target = target_type and "–ü—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" in target_type
        is_aht_target = target_type and "AHT" in target_type

        results = []

        # All divisions have the same target premium thresholds
        if target_goal_second and target_goal_second > 0:
            # When there's a second goal, use it as the main normative
            normative = target_goal_second

            if is_aht_target:
                # For AHT, lower is better - calculate percentage as (normative / current * 100)
                target_rate = (normative / current_target * 100) if current_target > 0 else 0
            else:
                # For sales and default, higher is better - calculate percentage as (current / normative * 100)
                target_rate = (current_target / normative * 100) if normative > 0 else 0

            if target_rate > 100.01:
                results.append("28%: ‚úÖ (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")
            else:
                if is_aht_target:
                    # For AHT, we need to be lower than the target
                    needed_for_28 = normative / (100.01 / 100)
                    difference = current_target - needed_for_28
                    results.append(f"28%: {needed_for_28:.2f} [-{difference:.2f}] (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")
                else:
                    # For sales, we need to be higher than the target
                    needed_for_28 = (100.01 / 100) * normative
                    difference = needed_for_28 - current_target
                    results.append(f"28%: {needed_for_28:.2f} [+{difference:.2f}] (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")

            if target_rate >= 100.00:
                results.append("18%: ‚úÖ (‚â• 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")
            else:
                if is_aht_target:
                    needed_for_18 = normative / (100.00 / 100)
                    difference = current_target - needed_for_18
                    results.append(f"18%: {needed_for_18:.2f} [-{difference:.2f}] (= 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")
                else:
                    needed_for_18 = (100.00 / 100) * normative
                    difference = needed_for_18 - current_target
                    results.append(f"18%: {needed_for_18:.2f} [+{difference:.2f}] (= 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")

            if target_rate < 99.99:
                results.append("0%: ‚Äî (&lt; 99,99% - –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 1)")
            else:
                results.append("0%: ‚úÖ (&lt; 99,99% - –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 1)")

        elif target_goal_first and target_goal_first > 0:
            # When there's only first goal, use it as normative
            normative = target_goal_first

            if is_aht_target:
                # For AHT, lower is better
                target_rate = (normative / current_target * 100) if current_target > 0 else 0
            else:
                # For sales and default, higher is better
                target_rate = (current_target / normative * 100) if normative > 0 else 0

            if target_rate > 100.01:
                results.append("28%: ‚úÖ (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")
            else:
                if is_aht_target:
                    needed_for_28 = normative / (100.01 / 100)
                    difference = current_target - needed_for_28
                    results.append(f"28%: {needed_for_28:.2f} [-{difference:.2f}] (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")
                else:
                    needed_for_28 = (100.01 / 100) * normative
                    difference = needed_for_28 - current_target
                    results.append(f"28%: {needed_for_28:.2f} [+{difference:.2f}] (‚â• 100,01% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 2 –∏ –±–æ–ª–µ–µ)")

            if target_rate >= 100.00:
                results.append("18%: ‚úÖ (‚â• 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")
            else:
                if is_aht_target:
                    needed_for_18 = normative / (100.00 / 100)
                    difference = current_target - needed_for_18
                    results.append(f"18%: {needed_for_18:.2f} [-{difference:.2f}] (‚â• 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")
                else:
                    needed_for_18 = (100.00 / 100) * normative
                    difference = needed_for_18 - current_target
                    results.append(f"18%: {needed_for_18:.2f} [+{difference:.2f}] (‚â• 100,00% - –Ω–æ—Ä–º–∞—Ç–∏–≤ 1 –∏ –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 2)")

            if target_rate < 99.99:
                results.append("0%: ‚Äî (&lt; 99,99% - –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 1)")
            else:
                results.append("0%: ‚úÖ (&lt; 99,99% - –º–µ–Ω–µ–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ 1)")

        return "\n".join(results)

    def format_value(value, suffix=""):
        return f"{value}{suffix}" if value is not None else "‚Äî"

    def format_percentage(value):
        return f"{value}%" if value is not None else "‚Äî"

    csi_calculation = calculate_csi_needed(user.division, user_premium.csi, user_premium.csi_normative)
    flr_calculation = calculate_flr_needed(user.division, user_premium.flr, user_premium.flr_normative)
    gok_calculation = calculate_gok_needed(user.division, user_premium.gok, user_premium.gok_normative)
    target_calculation = calculate_target_needed(user.division, user_premium.target, user_premium.target_goal_first, user_premium.target_goal_second, user_premium.target_type)

    message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(user_premium.csi)} ({format_percentage(user_premium.csi_normative_rate)})
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(user_premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(user_premium.flr)} ({format_percentage(user_premium.flr_normative_rate)})
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(user_premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {format_value(round(user_premium.gok))} ({format_percentage(user_premium.gok_normative_rate)})
–ù–æ—Ä–º–∞—Ç–∏–≤: {format_value(user_premium.gok_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {format_value(user_premium.target)}
–ü–ª–∞–Ω: {format_value(round(user_premium.target_goal_first))} / {format_value(round(user_premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {user_premium.updated_at.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M") if user_premium.updated_at else "‚Äî"}</i>"""

    try:
        await callback.message.edit_text(message_text, reply_markup=kpi_calculator_kb())
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")