import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy import select

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.keyboards.head.group.game.history import (
    HeadGroupHistoryMenu,
    HeadTransactionDetailMenu,
    head_group_history_kb,
    head_transaction_detail_kb,
)
from tgbot.keyboards.head.group.game.main import HeadGameMenu

head_game_history_router = Router()
head_game_history_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_history_router.callback_query(HeadGameMenu.filter(F.menu == "history"))
async def head_group_history(
    callback: CallbackQuery,
    callback_data: HeadGroupHistoryMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    if not user:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    group_transactions = await stp_repo.transaction.get_group_transactions(
        user.fullname
    )

    group_members_result = await stp_repo.session.execute(
        select(Employee).where(Employee.head == user.fullname)
    )
    members = group_members_result.scalars().all()
    employee_names = {
        member.user_id: member.fullname for member in members if member.user_id
    }

    page = callback_data.page

    if not group_transactions:
        await callback.message.edit_text(
            """üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

–£ –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π üôÇ

<i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –±–∞–ª–ª–∞–º–∏</i>""",
            reply_markup=head_group_history_kb(
                [], current_page=page, employee_names=employee_names
            ),
        )
        return

    total_transactions = len(group_transactions)

    message_text = f"""üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

<i>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_history_kb(
            group_transactions, current_page=page, employee_names=employee_names
        ),
    )

    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø—ã] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@head_game_history_router.callback_query(HeadTransactionDetailMenu.filter())
async def head_transaction_detail_view(
    callback: CallbackQuery,
    callback_data: HeadTransactionDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã"""
    transaction_id = callback_data.transaction_id
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction = await stp_repo.transaction.get_transaction(transaction_id)

    if not transaction:
        await callback.message.edit_text(
            """üìú <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚òπ""",
            reply_markup=head_transaction_detail_kb(page),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    employee = await stp_repo.employee.get_user(user_id=transaction.user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    type_emoji = "‚ûï" if transaction.type == "earn" else "‚ûñ"
    type_text = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ" if transaction.type == "earn" else "–°–ø–∏—Å–∞–Ω–∏–µ"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    source_names = {
        "achievement": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
        "product": "üõí –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞",
        "manual": "‚úçÔ∏è –†—É—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
        "casino": "üé∞ –ö–∞–∑–∏–Ω–æ",
    }
    source_name = source_names.get(transaction.source_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    if transaction.source_type == "achievement" and transaction.source_id:
        achievement = await stp_repo.achievement.get_achievement(transaction.source_id)
        match achievement.period:
            case "d":
                source_name = "üèÜ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name
            case "w":
                source_name = "üèÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name
            case "m":
                source_name = "üèÜ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: " + achievement.name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üìä –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥—Ä—É–ø–ø—ã</b>

<b>üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>
<a href='t.me/{employee.username}'>{employee.fullname}</a>

<b>üìà –û–ø–µ—Ä–∞—Ü–∏—è</b>
{type_emoji} {type_text} <b>{transaction.amount}</b> –±–∞–ª–ª–æ–≤

<b>üî¢ ID:</b> <code>{transaction.id}</code>

<b>üìç –ò—Å—Ç–æ—á–Ω–∏–∫</b>
{source_name}

<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>
{transaction.created_at.strftime("%d.%m.%Y –≤ %H:%M")}"""

    if transaction.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n<blockquote expandable>{transaction.comment}</blockquote>"

    await callback.message.edit_text(
        message_text, reply_markup=head_transaction_detail_kb(page)
    )
