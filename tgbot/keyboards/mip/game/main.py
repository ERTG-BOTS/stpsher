from typing import List, Set

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from tgbot.keyboards.user.main import MainMenu


class GameMenu(CallbackData, prefix="game"):
    menu: str
    page: int = 1
    filters: str = "–ù–¶–ö,–ù–¢–ü"


class FilterToggleMenu(CallbackData, prefix="filter_toggle"):
    menu: str  # "achievements_all" –∏–ª–∏ "products_all"
    filter_name: str  # "–ù–¶–ö" –∏–ª–∏ "–ù–¢–ü"
    page: int = 1
    current_filters: str = "–ù–¶–ö,–ù–¢–ü"  # —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã


class ProductsMenu(CallbackData, prefix="products_activation"):
    menu: str
    page: int = 1
    product_id: int = 0
    filters: str = "–ù–¶–ö,–ù–¢–ü"  # comma-separated active filters


class PurchaseActivationMenu(CallbackData, prefix="purchase_activation"):
    purchase_id: int
    page: int = 1


class PurchaseActionMenu(CallbackData, prefix="purchase_action"):
    purchase_id: int
    action: str  # "approve" or "reject"
    page: int = 1


def parse_filters(filters_str: str) -> Set[str]:
    """–ü–∞—Ä—Å–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã
    :param filters_str: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :return:
    """
    if not filters_str:
        return {"–ù–¶–ö", "–ù–¢–ü"}
    return set(
        filter_name.strip()
        for filter_name in filters_str.split(",")
        if filter_name.strip()
    )


def filters_to_string(filters_set: Set[str]) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏
    :param filters_set: –°–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :return:
    """
    return ",".join(sorted(filters_set))


def toggle_filter(current_filters: str, filter_to_toggle: str) -> str:
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :param current_filters: –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :param filter_to_toggle: –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :return:
    """
    filters_set = parse_filters(current_filters)

    if filter_to_toggle in filters_set:
        filters_set.discard(filter_to_toggle)
    else:
        filters_set.add(filter_to_toggle)

    # Ensure at least one filter is active
    if not filters_set:
        filters_set = {"–ù–¶–ö", "–ù–¢–ü"}

    return filters_to_string(filters_set)


def create_filters_row(
    menu: str, current_filters: str, page: int = 1
) -> List[InlineKeyboardButton]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    :param menu: –ú–µ–Ω—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä
    :param current_filters: –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :param page: –¢–µ–∫—É—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :return:
    """
    active_filters = parse_filters(current_filters)
    buttons = []

    filter_options = [("–ù–¶–ö", "–ù–¶–ö"), ("–ù–¢–ü", "–ù–¢–ü")]

    for display_name, filter_name in filter_options:
        is_active = filter_name in active_filters
        emoji = "‚úÖ" if is_active else "‚òëÔ∏è"

        buttons.append(
            InlineKeyboardButton(
                text=f"{emoji} {display_name}",
                callback_data=FilterToggleMenu(
                    menu=menu,
                    filter_name=filter_name,
                    page=page,
                    current_filters=current_filters,
                ).pack(),
            )
        )

    return buttons


def game_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ú–ò–ü –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                callback_data=GameMenu(menu="products_activation").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                callback_data=GameMenu(menu="achievements_all").pack(),
            ),
            InlineKeyboardButton(
                text="üëè –ü—Ä–µ–¥–º–µ—Ç—ã",
                callback_data=ProductsMenu(menu="products_all").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard
