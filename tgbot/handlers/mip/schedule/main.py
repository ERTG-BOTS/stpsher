import datetime
import logging
from typing import Optional

import pytz
from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from tgbot.keyboards.user.main import MainMenu, auth_kb
from tgbot.keyboards.user.schedule.main import (
    DutyNavigation,
    HeadNavigation,
    MonthNavigation,
    ScheduleMenu,
    create_detailed_schedule_keyboard,
    duties_kb,
    get_yekaterinburg_date,
    heads_kb,
    schedule_kb,
    schedule_with_month_kb,
)
from tgbot.misc.dicts import russian_months
from tgbot.services.schedule import (
    DutyScheduleParser,
    HeadScheduleParser,
    ScheduleError,
    ScheduleFileNotFoundError,
    ScheduleParser,
    ScheduleType,
    UserNotFoundError,
)

logger = logging.getLogger(__name__)

user_schedule_router = Router()
user_schedule_router.message.filter(F.chat.type == "private")
user_schedule_router.callback_query.filter(F.message.chat.type == "private")


class ScheduleHandlerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""

    def __init__(self):
        self.schedule_parser = ScheduleParser()
        self.duty_parser = DutyScheduleParser()
        self.head_parser = HeadScheduleParser()
        self.yekaterinburg_tz = pytz.timezone("Asia/Yekaterinburg")

    async def check_user_auth(self, callback: CallbackQuery, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user:
            await callback.message.answer(
                """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
                reply_markup=auth_kb(),
            )
            return False
        return True

    async def handle_schedule_error(
        self, callback: CallbackQuery, error: Exception, fallback_markup=None
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if fallback_markup is None:
            fallback_markup = schedule_kb()

        if isinstance(error, UserNotFoundError):
            error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        elif isinstance(error, ScheduleFileNotFoundError):
            error_msg = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        elif isinstance(error, ScheduleError):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {error}"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n<code>{error}</code>"

        logger.error(f"Schedule error: {error}", exc_info=True)

        try:
            await callback.message.edit_text(
                text=error_msg,
                reply_markup=fallback_markup,
            )
        except Exception as edit_error:
            logger.error(f"Failed to edit message: {edit_error}")
            await callback.answer(error_msg, show_alert=True)

    def get_current_month(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        return russian_months[datetime.datetime.now().month]

    def parse_date_from_callback(self, date_str: str) -> datetime.datetime:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ callback data"""
        target_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        return self.yekaterinburg_tz.localize(target_date)

    async def get_user_schedule_response(
        self, user: User, month: str, compact: bool = True
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.schedule_parser.get_user_schedule_formatted(
            fullname=user.fullname,
            month=month,
            division=user.division,
            compact=compact,
            schedule_type=ScheduleType.REGULAR,
        )

    async def get_duties_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        if date is None:
            date = get_yekaterinburg_date()

        duties = self.duty_parser.get_duties_for_date(date, division)

        # Filter out duties who are not in the database (fired employees)
        if stp_repo:
            active_duties = []
            for duty in duties:
                try:
                    user = await stp_repo.users.get_user(fullname=duty.name)
                    if user:
                        active_duties.append(duty)
                    else:
                        logger.debug(
                            f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {duty.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                except Exception as e:
                    logger.debug(
                        f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {duty.name} –≤ –ë–î: {e}"
                    )
                    # If we can't check, include the duty to avoid false negatives
                    active_duties.append(duty)
            duties = active_duties

        return self.duty_parser.format_duties_for_date(date, duties)

    async def get_heads_response(
        self, division: str, date: Optional[datetime.datetime] = None, stp_repo=None
    ) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø"""
        if date is None:
            date = get_yekaterinburg_date()

        heads = await self.head_parser.get_heads_for_date(date, division, stp_repo)

        # Filter out heads who are not in the database (fired employees)
        if stp_repo:
            active_heads = []
            for head in heads:
                try:
                    user = await stp_repo.users.get_user(fullname=head.name)
                    if user:
                        active_heads.append(head)
                    else:
                        logger.debug(
                            f"[–ì—Ä–∞—Ñ–∏–∫ –†–ì] –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {head.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                        )
                except Exception as e:
                    logger.debug(
                        f"[–ì—Ä–∞—Ñ–∏–∫ –†–ì] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {head.name} –≤ –ë–î: {e}"
                    )
                    # If we can't check, include the head to avoid false negatives
                    active_heads.append(head)
            heads = active_heads

        return self.head_parser.format_heads_for_date(date, heads)


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleHandlerService()


@user_schedule_router.callback_query(MainMenu.filter(F.menu == "schedule"))
async def schedule(callback: CallbackQuery, user: User):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    await callback.message.edit_text(
        """üìÖ –ú–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è""",
        reply_markup=schedule_kb(),
    )


@user_schedule_router.callback_query(ScheduleMenu.filter(F.menu == "my"))
async def user_schedule(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    try:
        month = schedule_service.get_current_month()
        schedule_text = await schedule_service.get_user_schedule_response(
            user=user, month=month, compact=True
        )

        await callback.message.edit_text(
            text=schedule_text,
            reply_markup=schedule_with_month_kb(
                current_month=month, schedule_type="my"
            ),
        )

    except Exception as e:
        await schedule_service.handle_schedule_error(callback, e)


@user_schedule_router.callback_query(MonthNavigation.filter(F.action == "compact"))
async def handle_compact_view(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º—É –≤–∏–¥—É"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    callback_data = MonthNavigation.unpack(callback.data)
    current_month = callback_data.current_month
    schedule_type = callback_data.schedule_type

    try:
        schedule_text = await schedule_service.get_user_schedule_response(
            user=user, month=current_month, compact=True
        )

        await callback.message.edit_text(
            text=schedule_text,
            reply_markup=schedule_with_month_kb(
                current_month=current_month, schedule_type=schedule_type
            ),
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@user_schedule_router.callback_query(MonthNavigation.filter())
async def handle_month_navigation(
    callback: CallbackQuery, callback_data: MonthNavigation, user: User
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    action = callback_data.action
    current_month = callback_data.current_month
    schedule_type = callback_data.schedule_type

    try:
        if action in ["prev", "next"]:
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            schedule_text = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=True
            )

            await callback.message.edit_text(
                text=schedule_text,
                reply_markup=schedule_with_month_kb(
                    current_month=current_month, schedule_type=schedule_type
                ),
            )

        elif action == "detailed":
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            schedule_text = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=False
            )

            keyboard = create_detailed_schedule_keyboard(current_month, schedule_type)
            await callback.message.edit_text(
                text=schedule_text,
                reply_markup=keyboard,
            )

        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@user_schedule_router.callback_query(ScheduleMenu.filter(F.menu == "duties"))
async def duties_schedule(callback: CallbackQuery, user: User, stp_repo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    try:
        current_date = get_yekaterinburg_date()
        duties_text = await schedule_service.get_duties_response(
            division=user.division, date=current_date, stp_repo=stp_repo
        )

        await callback.message.edit_text(
            text=duties_text,
            reply_markup=duties_kb(current_date),
        )

    except Exception as e:
        await schedule_service.handle_schedule_error(callback, e)


@user_schedule_router.callback_query(DutyNavigation.filter())
async def handle_duty_navigation(
    callback: CallbackQuery, callback_data: DutyNavigation, user: User, stp_repo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    try:
        action = callback_data.action

        if action == "-":
            await callback.answer()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
        if action == "today":
            target_date = get_yekaterinburg_date()
        else:
            target_date = schedule_service.parse_date_from_callback(callback_data.date)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–∂—É—Ä–Ω—ã—Ö
        duties_text = await schedule_service.get_duties_response(
            division=user.division, date=target_date, stp_repo=stp_repo
        )

        await callback.message.edit_text(
            text=duties_text,
            reply_markup=duties_kb(target_date),
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@user_schedule_router.callback_query(ScheduleMenu.filter(F.menu == "heads"))
async def heads_schedule(callback: CallbackQuery, user: User, stp_repo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    try:
        current_date = get_yekaterinburg_date()
        heads_text = await schedule_service.get_heads_response(
            division=user.division, date=current_date, stp_repo=stp_repo
        )

        await callback.message.edit_text(
            text=heads_text,
            reply_markup=heads_kb(current_date),
        )

    except Exception as e:
        await schedule_service.handle_schedule_error(callback, e)


@user_schedule_router.callback_query(HeadNavigation.filter())
async def handle_head_navigation(
    callback: CallbackQuery, callback_data: HeadNavigation, user: User, stp_repo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –≥—Ä—É–ø–ø"""
    if not await schedule_service.check_user_auth(callback, user):
        return

    try:
        action = callback_data.action

        if action == "-":
            await callback.answer()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
        if action == "today":
            target_date = get_yekaterinburg_date()
        else:
            target_date = schedule_service.parse_date_from_callback(callback_data.date)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø
        heads_text = await schedule_service.get_heads_response(
            division=user.division, date=target_date, stp_repo=stp_repo
        )

        await callback.message.edit_text(
            text=heads_text,
            reply_markup=heads_kb(target_date),
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
