# tgbot/handlers/mip/search.py
import logging
from typing import Sequence

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import User
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import MipFilter
from tgbot.keyboards.mip.search import (
    EditUserMenu,
    HeadGroupMenu,
    MipScheduleNavigation,
    SearchMenu,
    SearchUserResult,
    ViewUserSchedule,
    edit_user_back_kb,
    get_month_name_by_index,
    head_group_kb,
    search_back_kb,
    search_main_kb,
    search_results_kb,
    user_detail_kb,
    user_schedule_with_month_kb,
)
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.states.mip.search import EditEmployee, SearchEmployee
from tgbot.services.leveling import LevelingSystem
from tgbot.handlers.user.schedule.main import schedule_service

mip_search_router = Router()
mip_search_router.message.filter(F.chat.type == "private", MipFilter())
mip_search_router.callback_query.filter(F.message.chat.type == "private", MipFilter())

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10


def filter_users_by_type(users: Sequence[User], search_type: str) -> list[User]:
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É –ø–æ–∏—Å–∫–∞

    :param users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (specialists, heads, all)
    :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if search_type == "specialists":
        # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã - —Ä–æ–ª—å 1 (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        return [user for user in users if user.role == 1]
    elif search_type == "heads":
        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ - —Ä–æ–ª—å 2 (–≥–æ–ª–æ–≤—ã)
        return [user for user in users if user.role == 2]
    else:
        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        return list(users)


async def get_user_statistics(user_id: int, stp_repo: MainRequestsRepo) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–∞–≥—Ä–∞–¥—ã)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_achievements = await stp_repo.user_achievement.get_user_achievements(
            user_id
        )
        user_awards = await stp_repo.user_award.get_user_awards(user_id)
        achievements_sum = await stp_repo.user_achievement.get_user_achievements_sum(
            user_id
        )
        awards_sum = await stp_repo.user_award.get_user_awards_sum(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ
        most_frequent_achievement = (
            await stp_repo.user_achievement.get_most_frequent_achievement(user_id)
        )
        most_used_award = await stp_repo.user_award.get_most_used_award(user_id)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        current_level = LevelingSystem.calculate_level(achievements_sum)
        user_balance = achievements_sum - awards_sum

        return {
            "level": current_level,
            "balance": user_balance,
            "total_earned": achievements_sum,
            "total_spent": awards_sum,
            "achievements_count": len(user_achievements),
            "awards_count": len(user_awards),
            "most_frequent_achievement": most_frequent_achievement,
            "most_used_award": most_used_award,
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {
            "level": 0,
            "balance": 0,
            "total_earned": 0,
            "total_spent": 0,
            "achievements_count": 0,
            "awards_count": 0,
            "most_frequent_achievement": None,
            "most_used_award": None,
        }


async def get_group_statistics(head_name: str, stp_repo: MainRequestsRepo) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        group_users = await stp_repo.user.get_users_by_head(head_name)

        total_points = 0
        group_achievements = {}
        group_awards = {}

        for user in group_users:
            if user.user_id:  # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                # –°—É–º–º–∏—Ä—É–µ–º –æ—á–∫–∏
                achievements_sum = (
                    await stp_repo.user_achievement.get_user_achievements_sum(
                        user.user_id
                    )
                )
                total_points += achievements_sum

                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                most_frequent_achievement = (
                    await stp_repo.user_achievement.get_most_frequent_achievement(
                        user.user_id
                    )
                )
                if most_frequent_achievement:
                    achievement_name = most_frequent_achievement[0]
                    achievement_count = most_frequent_achievement[1]
                    group_achievements[achievement_name] = (
                        group_achievements.get(achievement_name, 0) + achievement_count
                    )

                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–≥—Ä–∞–¥
                most_used_award = await stp_repo.user_award.get_most_used_award(
                    user.user_id
                )
                if most_used_award:
                    award_name = most_used_award[0]
                    award_count = most_used_award[1]
                    group_awards[award_name] = (
                        group_awards.get(award_name, 0) + award_count
                    )

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        most_popular_achievement = (
            max(group_achievements.items(), key=lambda x: x[1])
            if group_achievements
            else None
        )
        most_popular_award = (
            max(group_awards.items(), key=lambda x: x[1]) if group_awards else None
        )

        return {
            "total_users": len(group_users),
            "total_points": total_points,
            "most_popular_achievement": most_popular_achievement,
            "most_popular_award": most_popular_award,
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã {head_name}: {e}")
        return {
            "total_users": 0,
            "total_points": 0,
            "most_popular_achievement": None,
            "most_popular_award": None,
        }


async def get_group_statistics_by_id(
    head_user_id: int, stp_repo: MainRequestsRepo
) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID
        head_user = await stp_repo.user.get_user(user_id=head_user_id)
        if not head_user:
            return {
                "total_users": 0,
                "total_points": 0,
                "most_popular_achievement": None,
                "most_popular_award": None,
            }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return await get_group_statistics(head_user.fullname, stp_repo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ ID {head_user_id}: {e}")
        return {
            "total_users": 0,
            "total_points": 0,
            "most_popular_achievement": None,
            "most_popular_award": None,
        }


@mip_search_router.callback_query(MainMenu.filter(F.menu == "search"))
async def search_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await state.clear()
    await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<i>–í—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–∫–æ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–±—â–∏–º –ø–æ–∏—Å–∫–æ–º</i>""",
        reply_markup=search_main_kb(),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "specialists"))
async def show_specialists(
    callback: CallbackQuery, callback_data: SearchMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    all_users = await stp_repo.user.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    specialists = filter_users_by_type(all_users, "specialists")

    if not specialists:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(specialists)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = specialists[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</b>

–ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}""",
        reply_markup=search_results_kb(page_users, page, total_pages, "specialists"),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "heads"))
async def show_heads(
    callback: CallbackQuery, callback_data: SearchMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_users = await stp_repo.user.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    heads = filter_users_by_type(all_users, "heads")

    if not heads:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(heads)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = heads[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏</b>

–ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}

<i>üí° –ù–∞–∂–º–∏ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≥—Ä—É–ø–ø—É</i>""",
        reply_markup=search_results_kb(page_users, page, total_pages, "heads"),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "start_search"))
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"""
    bot_message = await callback.message.edit_text(
        """<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
        reply_markup=search_back_kb(),
    )

    await state.update_data(bot_message_id=bot_message.message_id)
    await state.set_state(SearchEmployee.waiting_search_query)


@mip_search_router.message(SearchEmployee.waiting_search_query)
async def process_search_query(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if not search_query or len(search_query) < 2:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=search_back_kb(),
        )
        return

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û
        found_users = await stp_repo.user.get_users_by_fio_parts(search_query, limit=50)

        if not found_users:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=f"""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
                reply_markup=search_back_kb(),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        sorted_users = sorted(
            found_users,
            key=lambda u: (
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                search_query.lower() not in u.fullname.lower(),
                # –ü–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                u.fullname,
            ),
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_found = len(sorted_users)
        total_pages = (total_found + USERS_PER_PAGE - 1) // USERS_PER_PAGE
        page_users = sorted_users[:USERS_PER_PAGE]

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∞–π–¥–µ–Ω–æ: {total_found} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}""",
            reply_markup=search_results_kb(
                page_users, 1, total_pages, "search_results"
            ),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=search_back_kb(),
        )


@mip_search_router.callback_query(SearchUserResult.filter())
async def show_user_details(
    callback: CallbackQuery, callback_data: SearchUserResult, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id

    try:
        user = await stp_repo.user.get_user(user_id=user_id)
        user_head = await stp_repo.user.get_user(fullname=user.head)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
        role_names = {
            0: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
            1: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            2: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            3: "–î–µ–∂—É—Ä–Ω—ã–π",
            5: "–ì–û–ö",
            6: "–ú–ò–ü",
            10: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        }
        role_name = role_names.get(user.role, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å ({user.role})")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await get_user_statistics(user_id, stp_repo)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.position} {user.division}
<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> <a href='t.me/{user_head.username}'>{user.head}</a>
<b>–†–æ–ª—å:</b> {role_name} ({user.role})"""

        if user.email:
            user_info += f"\n<b>–†–∞–±–æ—á–∞—è –ø–æ—á—Ç–∞:</b> {user.email}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö)
        if user.user_id and user.role in [1, 3]:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
            achievement_text = "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
            if stats["most_frequent_achievement"]:
                achievement_text = f"{stats['most_frequent_achievement'][0]} ({stats['most_frequent_achievement'][1]}x)"

            award_text = "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"
            if stats["most_used_award"]:
                award_text = (
                    f"{stats['most_used_award'][0]} ({stats['most_used_award'][1]}x)"
                )

            user_info += f"""

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞</b>
<b>‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å:</b> {stats["level"]}
<b>‚ú® –ë–∞–ª–∞–Ω—Å:</b> {stats["balance"]} –±–∞–ª–ª–æ–≤
<b>üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {stats["total_earned"]} –±–∞–ª–ª–æ–≤
<b>üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {stats["total_spent"]} –±–∞–ª–ª–æ–≤

<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({stats["achievements_count"]}):</b>
<b>–°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ:</b> {achievement_text}

<b>üèÖ –ù–∞–≥—Ä–∞–¥—ã ({stats["awards_count"]}):</b>
<b>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è:</b> {award_text}"""

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        if user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
            group_stats = await get_group_statistics(user.fullname, stp_repo)

            group_achievement_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if group_stats["most_popular_achievement"]:
                group_achievement_text = f"{group_stats['most_popular_achievement'][0]} ({group_stats['most_popular_achievement'][1]}x)"

            group_award_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if group_stats["most_popular_award"]:
                group_award_text = f"{group_stats['most_popular_award'][0]} ({group_stats['most_popular_award'][1]}x)"

            user_info += f"""

<b>üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</b>
<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b> {group_stats["total_users"]}
<b>–û–±—â–∏–µ –æ—á–∫–∏ –≥—Ä—É–ø–ø—ã:</b> {group_stats["total_points"]} –±–∞–ª–ª–æ–≤
<b>–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {group_achievement_text}
<b>–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</b> {group_award_text}

<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã</i>"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        can_edit = user.role in [1, 2]  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
        is_head = user.role == 2  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        head_user_id = user.user_id if is_head else 0

        await callback.message.edit_text(
            user_info,
            reply_markup=user_detail_kb(
                user_id, return_to, head_id, can_edit, is_head, head_user_id
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@mip_search_router.callback_query(HeadGroupMenu.filter())
async def show_head_group(
    callback: CallbackQuery, callback_data: HeadGroupMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Å–ø–∏—Å–æ–∫ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)"""
    head_name = callback_data.head_name
    page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        group_users = await stp_repo.user.get_users_by_head(head_name)

        if not group_users:
            await callback.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –§–ò–û
        sorted_users = sorted(group_users, key=lambda u: u.fullname)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_users = len(sorted_users)
        total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

        start_idx = (page - 1) * USERS_PER_PAGE
        end_idx = start_idx + USERS_PER_PAGE
        page_users = sorted_users[start_idx:end_idx]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
        group_stats = await get_group_statistics(head_name, stp_repo)

        group_achievement_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if group_stats["most_popular_achievement"]:
            group_achievement_text = f"{group_stats['most_popular_achievement'][0]} ({group_stats['most_popular_achievement'][1]}x)"

        group_award_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if group_stats["most_popular_award"]:
            group_award_text = f"{group_stats['most_popular_award'][0]} ({group_stats['most_popular_award'][1]}x)"

        await callback.message.edit_text(
            f"""<b>üë• –ì—Ä—É–ø–ø–∞: {head_name}</b>

<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {total_users}
<b>–û–±—â–∏–µ –æ—á–∫–∏:</b> {group_stats["total_points"]} –±–∞–ª–ª–æ–≤
<b>–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {group_achievement_text}
<b>–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</b> {group_award_text}

<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</b>""",
            reply_markup=head_group_kb(page_users, head_name, page, total_pages),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {head_name}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã", show_alert=True)


@mip_search_router.callback_query(EditUserMenu.filter())
async def start_edit_user(
    callback: CallbackQuery,
    callback_data: EditUserMenu,
    state: FSMContext,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    action = callback_data.action

    if action == "edit_fullname":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.user.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        bot_message = await callback.message.edit_text(
            f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {user.fullname}

–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –§–ò–û:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.update_data(
            bot_message_id=bot_message.message_id,
            user_id=user_id,
            current_fullname=user.fullname,
        )
        await state.set_state(EditEmployee.waiting_new_fullname)


@mip_search_router.message(EditEmployee.waiting_new_fullname)
async def process_edit_fullname(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import re

    new_fullname = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")
    user_id = state_data.get("user_id")
    current_fullname = state_data.get("current_fullname")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    fullname_pattern = r"^[–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+$"
    if not re.match(fullname_pattern, new_fullname):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}

‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.user.update_user(user_id=user_id, fullname=new_fullname)

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úÖ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ</b>

<b>–ë—ã–ª–æ:</b> {current_fullname}
<b>–°—Ç–∞–ª–æ:</b> {new_fullname}

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.clear()
        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û] {message.from_user.username} ({message.from_user.id}) –∏–∑–º–µ–Ω–∏–ª –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_fullname} ‚Üí {new_fullname}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}""",
            reply_markup=edit_user_back_kb(user_id),
        )


@mip_search_router.callback_query(ViewUserSchedule.filter())
async def view_user_schedule(
    callback: CallbackQuery,
    callback_data: ViewUserSchedule,
    stp_repo: MainRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    requested_month_idx = callback_data.month_idx

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.user.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=True
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.division}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.division}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@mip_search_router.callback_query(MipScheduleNavigation.filter())
async def navigate_user_schedule(
    callback: CallbackQuery,
    callback_data: MipScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    return_to = callback_data.return_to
    head_id = callback_data.head_id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.user.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=month_to_display, compact=compact
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.division}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.division}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
