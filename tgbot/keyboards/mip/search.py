from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.database.models import Employee
from tgbot.keyboards.user.main import MainMenu


class SearchMenu(CallbackData, prefix="search"):
    menu: str
    page: int = 1


class SearchUserResult(CallbackData, prefix="search_user"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_group)
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è


class HeadGroupMenu(CallbackData, prefix="head_group"):
    head_id: int
    page: int = 1


class EditUserMenu(CallbackData, prefix="edit_user"):
    user_id: int
    action: str  # "edit_fullname", "edit_role"


class SelectUserRole(CallbackData, prefix="select_role"):
    user_id: int
    role: int  # 1, 2, 3


class ViewUserSchedule(CallbackData, prefix="view_schedule"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_group)
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    month_idx: int = 0  # –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (0 = —Ç–µ–∫—É—â–∏–π)


class MipScheduleNavigation(CallbackData, prefix="mip_sched"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ú–ò–ü"""

    action: str  # "prev", "next", "-", "detailed", "compact"
    user_id: int
    month_idx: int  # –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ (1-12)
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_group)
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è


def search_main_kb() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
                callback_data=SearchMenu(menu="specialists").pack(),
            ),
            InlineKeyboardButton(
                text="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏", callback_data=SearchMenu(menu="heads").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫",
                callback_data=SearchMenu(menu="start_search").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def user_detail_kb(
    user_id: int,
    return_to: str = "search",
    head_id: int = 0,
    can_edit: bool = True,
    is_head: bool = False,
    head_user_id: int = 0,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param return_to: –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥)
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã)
    :param can_edit: –ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param is_head: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
    :param head_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                callback_data=ViewUserSchedule(
                    user_id=user_id, return_to=return_to, head_id=head_id
                ).pack(),
            )
        ]
    ]

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã (–¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)
    if is_head and head_user_id:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É",
                    callback_data=HeadGroupMenu(head_id=head_user_id, page=1).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
    if can_edit:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û",
                    callback_data=EditUserMenu(
                        user_id=user_id, action="edit_fullname"
                    ).pack(),
                )
            ]
        )
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞",
                    callback_data=EditUserMenu(
                        user_id=user_id, action="edit_role"
                    ).pack(),
                )
            ]
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    if return_to == "head_group" and head_id:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ö –≥—Ä—É–ø–ø–µ",
                    callback_data=HeadGroupMenu(head_id=head_id, page=1).pack(),
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data=MainMenu(menu="search").pack(),
                ),
                InlineKeyboardButton(
                    text="üè† –î–æ–º–æ–π",
                    callback_data=MainMenu(menu="main").pack(),
                ),
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def head_group_kb(
    users: list[Employee], head_id: int, page: int = 1, total_pages: int = 1
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Å–ø–∏—Å–æ–∫ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)

    :param users: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    :param head_id: –ò–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    for user in users:
        button_text = f"üë§ {user.fullname} | {user.division}"
        callback_data = SearchUserResult(
            user_id=user.user_id, return_to="head_group", head_id=head_id
        ).pack()
        buttons.append(
            [
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data,
                )
            ]
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # ‚è™
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=HeadGroupMenu(head_id=head_id, page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # ‚óÄÔ∏è
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=HeadGroupMenu(head_id=head_id, page=page - 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        # ‚ñ∂Ô∏è
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=HeadGroupMenu(head_id=head_id, page=page + 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # ‚è©
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è©",
                    callback_data=HeadGroupMenu(
                        head_id=head_id, page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=MainMenu(menu="search").pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def edit_user_back_kb(user_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(user_id=user_id).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_results_kb(
    users: list[Employee], page: int = 1, total_pages: int = 1, search_type: str = "all"
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ (–ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)

    :param users: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (all, specialists, heads)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    for user in users:
        if not user.user_id:
            continue

        button_text = f"üë§ {user.fullname} | {user.division}"
        callback_data = SearchUserResult(
            user_id=user.user_id, return_to=search_type, head_id=0
        ).pack()
        buttons.append(
            [
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data,
                )
            ]
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=SearchMenu(menu=search_type, page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (‚óÄÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=SearchMenu(menu=search_type, page=page - 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (‚ñ∂Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=SearchMenu(menu=search_type, page=page + 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü" (‚è© –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è©",
                    callback_data=SearchMenu(menu=search_type, page=total_pages).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
            callback_data=SearchMenu(menu="start_search").pack(),
        ),
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="search").pack()
        ),
    ]
    buttons.append(navigation_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_back_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="search").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def schedule_back_to_user_kb(
    user_id: int, return_to: str = "search", head_id: int = 0
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param return_to: –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_group)
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
                callback_data=SearchUserResult(
                    user_id=user_id, return_to=return_to, head_id=head_id
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
MONTHS_RU = [
    "—è–Ω–≤–∞—Ä—å",
    "—Ñ–µ–≤—Ä–∞–ª—å",
    "–º–∞—Ä—Ç",
    "–∞–ø—Ä–µ–ª—å",
    "–º–∞–π",
    "–∏—é–Ω—å",
    "–∏—é–ª—å",
    "–∞–≤–≥—É—Å—Ç",
    "—Å–µ–Ω—Ç—è–±—Ä—å",
    "–æ–∫—Ç—è–±—Ä—å",
    "–Ω–æ—è–±—Ä—å",
    "–¥–µ–∫–∞–±—Ä—å",
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTH_EMOJIS = {
    1: "‚ùÑÔ∏è",
    2: "üíô",
    3: "üå∏",
    4: "üå∑",
    5: "üåª",
    6: "‚òÄÔ∏è",
    7: "üèñÔ∏è",
    8: "üåæ",
    9: "üçÇ",
    10: "üéÉ",
    11: "üçÅ",
    12: "üéÑ",
}


def get_month_name_by_index(month_idx: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (1-12)"""
    if 1 <= month_idx <= 12:
        return MONTHS_RU[month_idx - 1]
    return "—è–Ω–≤–∞—Ä—å"


def get_month_index_by_name(month_name: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        return MONTHS_RU.index(month_name.lower()) + 1
    except (ValueError, AttributeError):
        return 1


def user_schedule_with_month_kb(
    user_id: int,
    current_month: str,
    return_to: str = "search",
    head_id: int = 0,
    is_detailed: bool = False,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param current_month: –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü (–Ω–∞–∑–≤–∞–Ω–∏–µ)
    :param return_to: –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_group)
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã)
    :param is_detailed: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (True - –¥–µ—Ç–∞–ª—å–Ω—ã–π, False - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    current_month_idx = get_month_index_by_name(current_month)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü—ã
    prev_month_idx = current_month_idx - 1 if current_month_idx > 1 else 12
    next_month_idx = current_month_idx + 1 if current_month_idx < 12 else 1

    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    month_emoji = MONTH_EMOJIS.get(current_month_idx, "üìÖ")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_row = [
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=MipScheduleNavigation(
                action="prev",
                user_id=user_id,
                month_idx=prev_month_idx,
                return_to=return_to,
                head_id=head_id,
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"{month_emoji} {current_month.capitalize()}",
            callback_data=MipScheduleNavigation(
                action="-",
                user_id=user_id,
                month_idx=current_month_idx,
                return_to=return_to,
                head_id=head_id,
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=MipScheduleNavigation(
                action="next",
                user_id=user_id,
                month_idx=next_month_idx,
                return_to=return_to,
                head_id=head_id,
            ).pack(),
        ),
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    if is_detailed:
        toggle_text = "üìã –ö—Ä–∞—Ç–∫–æ"
        toggle_action = "compact"
    else:
        toggle_text = "üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        toggle_action = "detailed"

    buttons = [
        nav_row,  # –†—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        [
            InlineKeyboardButton(
                text=toggle_text,
                callback_data=MipScheduleNavigation(
                    action=toggle_action,
                    user_id=user_id,
                    month_idx=current_month_idx,
                    return_to=return_to,
                    head_id=head_id,
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É",
                callback_data=SearchUserResult(
                    user_id=user_id, return_to=return_to, head_id=head_id
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def role_selection_kb(user_id: int, current_role: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param current_role: –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    """
    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–æ–ª–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    role_buttons = []

    # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (1)
    if current_role != 1:
        role_buttons.append(
            InlineKeyboardButton(
                text="üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                callback_data=SelectUserRole(user_id=user_id, role=1).pack(),
            )
        )

    # –î–µ–∂—É—Ä–Ω—ã–π (3)
    if current_role != 3:
        role_buttons.append(
            InlineKeyboardButton(
                text="üö® –î–µ–∂—É—Ä–Ω—ã–π",
                callback_data=SelectUserRole(user_id=user_id, role=3).pack(),
            )
        )

    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (2)
    if current_role != 2:
        role_buttons.append(
            InlineKeyboardButton(
                text="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
                callback_data=SelectUserRole(user_id=user_id, role=2).pack(),
            )
        )

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i in range(0, len(role_buttons), 2):
        row = role_buttons[i : i + 2]
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(user_id=user_id).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)
