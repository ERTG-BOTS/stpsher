import logging

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.handlers.group.whois import create_user_info_message, get_role_info
from tgbot.keyboards.user.main import MainMenu, auth_kb, main_kb

logger = logging.getLogger(__name__)

user_router = Router()
user_router.message.filter(F.chat.type == "private")
user_router.callback_query.filter(F.message.chat.type == "private")


@user_router.message(CommandStart())
async def user_start_cmd(message: Message, user: Employee):
    if not user:
        await message.answer(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.fullname}</b>!

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º</i>""",
        reply_markup=main_kb(),
    )


@user_router.callback_query(MainMenu.filter(F.menu == "main"))
async def user_start_cb(callback: CallbackQuery, user: Employee):
    if not user:
        await callback.message.edit_text(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    await callback.message.edit_text(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.fullname}</b>!

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º</i>""",
        reply_markup=main_kb(),
    )


@user_router.message(Command("whois"))
async def private_whois_command(message: Message, user: Employee, stp_repo: MainRequestsRepo):
    """–ö–æ–º–∞–Ω–¥–∞ /whois –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        await message.reply(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /whois –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        forwarded_user_id = message.forward_from.id
        
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            target_user = await stp_repo.employee.get_user(user_id=forwarded_user_id)
            
            if not target_user:
                await message.reply(
                    f"""<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{forwarded_user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–¢–ü
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ @stpsher_bot"""
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            user_head = None
            if target_user.head:
                user_head = await stp_repo.employee.get_user(fullname=target_user.head)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info_message = create_user_info_message(target_user, user_head)
            
            await message.reply(user_info_message, parse_mode="HTML")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            logger.info(
                f"[WHOIS PRIVATE] {user.fullname} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {target_user.fullname} ({target_user.user_id}) —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /whois –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ: {e}")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) > 1:
        search_query = command_parts[1].strip()
        
        if len(search_query) < 1:
            await message.reply("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            target_user = None
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ user_id (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä)
            if search_query.isdigit():
                user_id = int(search_query)
                target_user = await stp_repo.employee.get_user(user_id=user_id)
                
                if target_user:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
                    user_head = None
                    if target_user.head:
                        user_head = await stp_repo.employee.get_user(fullname=target_user.head)
                    
                    user_info_message = create_user_info_message(target_user, user_head)
                    await message.reply(user_info_message, parse_mode="HTML")
                    
                    logger.info(
                        f"[WHOIS PRIVATE] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª –ø–æ user_id '{search_query}': {target_user.fullname}"
                    )
                    return
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username (–µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @ –∏–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ username)
            username_query = search_query
            if username_query.startswith('@'):
                username_query = username_query[1:]  # –£–±–∏—Ä–∞–µ–º @
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ username (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
            if username_query and all(c.isalnum() or c == '_' for c in username_query):
                target_user = await stp_repo.employee.get_user(username=username_query)
                
                if target_user:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
                    user_head = None
                    if target_user.head:
                        user_head = await stp_repo.employee.get_user(fullname=target_user.head)
                    
                    user_info_message = create_user_info_message(target_user, user_head)
                    await message.reply(user_info_message, parse_mode="HTML")
                    
                    logger.info(
                        f"[WHOIS PRIVATE] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª –ø–æ username '{search_query}': {target_user.fullname}"
                    )
                    return
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ user_id –∏–ª–∏ username, –∏—â–µ–º –ø–æ –§–ò–û
            if len(search_query) < 2:
                await message.reply("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∏–º–µ–Ω–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
                return
                
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û
            found_users = await stp_repo.employee.get_users_by_fio_parts(
                search_query, limit=10
            )
            
            if not found_users:
                await message.reply(
                    f"""<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

<b>üí° –ü–æ–ø—Ä–æ–±—É–π:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ ID: <code>/whois 123456789</code>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ username: <code>/whois @roman_domru</code> –∏–ª–∏ <code>/whois roman_domru</code>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: <code>/whois –ò–≤–∞–Ω–æ–≤</code> –∏–ª–∏ <code>/whois –ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤</code>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot {search_query}</code>"""
                )
                return
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if len(found_users) == 1:
                target_user = found_users[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
                user_head = None
                if target_user.head:
                    user_head = await stp_repo.employee.get_user(fullname=target_user.head)
                
                user_info_message = create_user_info_message(target_user, user_head)
                await message.reply(user_info_message, parse_mode="HTML")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                logger.info(
                    f"[WHOIS PRIVATE] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}': {target_user.fullname}"
                )
                return
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            sorted_users = sorted(
                found_users,
                key=lambda u: (
                    search_query.lower() not in u.fullname.lower(),
                    u.fullname,
                ),
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_list = []
            for idx, found_user in enumerate(sorted_users, 1):
                role_info = get_role_info(found_user.role)
                user_entry = f"{idx}. <b>{role_info['emoji']} {found_user.fullname}</b>"
                
                if found_user.position and found_user.division:
                    user_entry += f"\n   üíº {found_user.position} {found_user.division}"
                
                if found_user.username:
                    user_entry += f"\n   üì± @{found_user.username}"
                
                user_list.append(user_entry)
            
            users_text = "\n\n".join(user_list)
            
            await message.reply(
                f"""<b>üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(sorted_users)}</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>":

{users_text}

<b>üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–æ ID: <code>/whois 123456789</code>
‚Ä¢ –ü–æ username: <code>/whois @username</code>
‚Ä¢ –ü–æ –∏–º–µ–Ω–∏: <code>/whois –ü–æ–ª–Ω–æ–µ –ò–º—è</code>
‚Ä¢ Inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot {search_query}</code>
‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + <code>/whois</code>""",
                parse_mode="HTML",
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            logger.info(
                f"[WHOIS PRIVATE] {user.fullname} ({message.from_user.id}) –Ω–∞—à–µ–ª {len(sorted_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /whois –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ: {e}")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.reply(
        """<b>‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /whois –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ</b>

<b>–°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞:</b>

<b>1. –ü–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é:</b>
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/whois</code>

<b>2. –ü–æ Telegram ID:</b>
‚Ä¢ <code>/whois 123456789</code>

<b>3. –ü–æ username:</b>
‚Ä¢ <code>/whois @roman_domru</code>
‚Ä¢ <code>/whois roman_domru</code>

<b>4. –ü–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏:</b>
‚Ä¢ <code>/whois –ò–≤–∞–Ω–æ–≤</code>
‚Ä¢ <code>/whois –ü–µ—Ç—Ä</code>
‚Ä¢ <code>/whois –ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä</code>

<b>üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-–ø–æ–∏—Å–∫: <code>@stpsher_bot –∏–º—è</code>""",
        parse_mode="HTML"
    )
