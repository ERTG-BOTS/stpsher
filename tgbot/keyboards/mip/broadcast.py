from typing import List, Tuple

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from tgbot.keyboards.group import short_name
from tgbot.keyboards.user.main import MainMenu


class BroadcastMenu(CallbackData, prefix="broadcast"):
    action: str


def broadcast_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def broadcast_type_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üë• –í—Å–µ–º", callback_data=BroadcastMenu(action="everyone").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üè¢ –ü–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é",
                callback_data=BroadcastMenu(action="division").pack(),
            ),
            InlineKeyboardButton(
                text="üëî –ü–æ –≥—Ä—É–ø–ø–∞–º",
                callback_data=BroadcastMenu(action="groups").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def division_selection_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üìû –ù–¢–ü 1", callback_data=BroadcastMenu(action="ntp1").pack()
            ),
            InlineKeyboardButton(
                text="üìû –ù–¢–ü 2", callback_data=BroadcastMenu(action="ntp2").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üí¨ –ù–¶–ö", callback_data=BroadcastMenu(action="nck").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=BroadcastMenu(action="back").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def heads_selection_kb(
    heads: List[Tuple[str, int]], selected_heads: List[int] = None
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π

    :param heads: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è, user_id) —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    :param selected_heads: –°–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    if selected_heads is None:
        selected_heads = []

    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Ä—è–¥)
    for i in range(0, len(heads), 2):
        row = []

        # –ü–µ—Ä–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Ä—è–¥—É
        head_name, head_id = heads[i]
        is_selected = head_id in selected_heads
        emoji = "‚úÖ" if is_selected else "‚òëÔ∏è"

        row.append(
            InlineKeyboardButton(
                text=f"{emoji} {short_name(head_name)}",
                callback_data=BroadcastMenu(action=f"toggle_head_{head_id}").pack(),
            )
        )

        # –í—Ç–æ—Ä–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(heads):
            head_name2, head_id2 = heads[i + 1]
            is_selected2 = head_id2 in selected_heads
            emoji2 = "‚úÖ" if is_selected2 else "‚òëÔ∏è"

            row.append(
                InlineKeyboardButton(
                    text=f"{emoji2} {short_name(head_name2)}",
                    callback_data=BroadcastMenu(
                        action=f"toggle_head_{head_id2}"
                    ).pack(),
                )
            )

        buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []

    if selected_heads:
        control_buttons.append(
            InlineKeyboardButton(
                text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({len(selected_heads)})",
                callback_data=BroadcastMenu(action="confirm_heads").pack(),
            )
        )

    if control_buttons:
        buttons.append(control_buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=BroadcastMenu(action="back").pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=BroadcastMenu(action="confirm").pack(),
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=BroadcastMenu(action="cancel").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=BroadcastMenu(action="back").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
