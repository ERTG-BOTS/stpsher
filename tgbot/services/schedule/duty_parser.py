"""
Duty schedule parser functionality.
"""

import logging
import re
from datetime import datetime
from typing import List, Optional, Tuple

import pandas as pd

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo

from .excel_parser import ExcelParser
from .managers import ScheduleFileManager
from .models import DutyInfo

logger = logging.getLogger(__name__)


class DutyScheduleParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö
    """

    def __init__(self, uploads_folder: str = "uploads"):
        self.file_manager = ScheduleFileManager(uploads_folder)
        self.excel_parser = ExcelParser(self.file_manager)

    @staticmethod
    def get_duty_sheet_name(date: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å",
            "–§–µ–≤—Ä–∞–ª—å",
            "–ú–∞—Ä—Ç",
            "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π",
            "–ò—é–Ω—å",
            "–ò—é–ª—å",
            "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å",
            "–û–∫—Ç—è–±—Ä—å",
            "–ù–æ—è–±—Ä—å",
            "–î–µ–∫–∞–±—Ä—å",
        ]
        month_name = month_names[date.month - 1]
        return f"–î–µ–∂—É—Ä—Å—Ç–≤–æ {month_name}"

    @staticmethod
    def find_date_column(df: pd.DataFrame, target_date: datetime) -> Optional[int]:
        """
        –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–π –¥–∞—Ç—ã
        :param df:
        :param target_date: –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –¥–∞—Ç–∞
        :return: –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
        """
        target_day = target_date.day

        for row_idx in range(min(3, len(df))):
            for col_idx in range(len(df.columns)):
                cell_value = (
                    str(df.iloc[row_idx, col_idx])
                    if pd.notna(df.iloc[row_idx, col_idx])
                    else ""
                )

                day_pattern = r"^(\d{1,2})[–ê-–Ø–∞-—è]{1,2}$"
                match = re.search(day_pattern, cell_value.strip())

                if match and int(match.group(1)) == target_day:
                    logger.debug(
                        f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –ù–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π {target_day}: {col_idx}"
                    )
                    return col_idx

        logger.warning(f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –¥–∞—Ç—ã {target_day} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None

    @staticmethod
    def parse_duty_entry(cell_value: str) -> Tuple[str, str]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ, —ç–∫—Å—Ç—Ä–∞–∫—Ç —Ç–∏–ø–∞ —Å–º–µ–Ω—ã –∏ –µ–µ –≤—Ä–µ–º–µ–Ω–∏
        :param cell_value: –ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        :return:
        """
        if not cell_value or cell_value.strip() in ["", "nan", "None"]:
            return "", ""

        cell_value = cell_value.strip()

        if cell_value.startswith("–ü "):
            return "–ü", cell_value[2:].strip()
        elif cell_value.startswith("–° "):
            return "–°", cell_value[2:].strip()
        else:
            if re.search(r"\d{1,2}:\d{2}-\d{1,2}:\d{2}", cell_value):
                return "", cell_value
            else:
                return "", cell_value

    async def get_duties_for_date(
        self, date: datetime, division: str, stp_repo: RequestsRepo
    ) -> List[DutyInfo]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—É—é –¥–∞—Ç—É
        :param date: –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        :param division: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        :param stp_repo:
        :return: –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—É—é –¥–∞—Ç—É
        """
        try:
            schedule_file = self.file_manager.find_schedule_file(division)
            if not schedule_file:
                raise FileNotFoundError(
                    f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –§–∞–π–ª –¥–µ–∂—É—Ä–Ω—ã—Ö {division} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )

            sheet_name = self.get_duty_sheet_name(date)

            try:
                df = pd.read_excel(schedule_file, sheet_name=sheet_name, header=None)
            except Exception:
                english_months = {
                    1: "January",
                    2: "February",
                    3: "March",
                    4: "April",
                    5: "May",
                    6: "June",
                    7: "July",
                    8: "August",
                    9: "September",
                    10: "October",
                    11: "November",
                    12: "December",
                }
                alt_sheet_name = f"–î–µ–∂—É—Ä—Å—Ç–≤–æ {english_months[date.month]}"
                df = pd.read_excel(
                    schedule_file, sheet_name=alt_sheet_name, header=None
                )

            date_col = self.find_date_column(df, date)
            if date_col is None:
                logger.warning(
                    f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –î–∞—Ç–∞ {date.day} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ–∏–∫–µ –¥–µ–∂—É—Ä–Ω—ã—Ö"
                )
                return []

            duties = []

            for row_idx in range(len(df)):
                name = ""
                for col_idx in range(min(3, len(df.columns))):
                    cell_value = (
                        str(df.iloc[row_idx, col_idx])
                        if pd.notna(df.iloc[row_idx, col_idx])
                        else ""
                    )

                    if (
                        len(cell_value.split()) >= 3
                        and re.search(r"[–ê-–Ø–∞-—è]", cell_value)
                        and not re.search(r"\d", cell_value)
                    ):
                        name = cell_value.strip()
                        break

                if not name:
                    continue

                if date_col < len(df.columns):
                    duty_cell = (
                        str(df.iloc[row_idx, date_col])
                        if pd.notna(df.iloc[row_idx, date_col])
                        else ""
                    )

                    if duty_cell and duty_cell.strip() not in ["", "nan", "None"]:
                        shift_type, schedule = self.parse_duty_entry(duty_cell)

                        if shift_type in ["–°", "–ü"] and re.search(
                            r"\d{1,2}:\d{2}-\d{1,2}:\d{2}", schedule
                        ):
                            user: User = await stp_repo.users.get_user(fullname=name)
                            if user:
                                duties.append(
                                    DutyInfo(
                                        name=name,
                                        user_id=user.user_id,
                                        schedule=schedule,
                                        shift_type=shift_type,
                                        work_hours=schedule,
                                    )
                                )

            logger.info(
                f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –ù–∞—à–µ–ª {len(duties)} –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—É {date.strftime('%d.%m.%Y')}"
            )
            return duties

        except Exception as e:
            logger.error(f"[–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö: {e}")
            return []

    @staticmethod
    def get_gender_emoji(name: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –∏–º–µ–Ω–∏
        :param name: –ü–æ–ª–Ω—ã–µ –§–ò–û –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ
        :return: –≠–º–æ–¥–∑–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª–∞
        """
        parts = name.split()
        if len(parts) >= 3:
            patronymic = parts[2]
            if patronymic.endswith("–Ω–∞"):
                return "üë©‚Äçü¶∞"
            elif patronymic.endswith(("–∏—á", "–æ–≤–∏—á", "–µ–≤–∏—á")):
                return "üë®"
        return "üë®"

    @staticmethod
    def parse_time_range(time_str: str) -> Tuple[int, int]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–µ–∂—É—Ä–∫–∏
        :param time_str:
        :return:
        """
        try:
            if "-" not in time_str:
                return 0, 0

            start_time, end_time = time_str.split("-")
            start_parts = start_time.strip().split(":")
            end_parts = end_time.strip().split(":")

            start_minutes = int(start_parts[0]) * 60 + int(start_parts[1])
            end_minutes = int(end_parts[0]) * 60 + int(end_parts[1])

            if end_minutes < start_minutes:
                end_minutes += 24 * 60

            return start_minutes, end_minutes

        except (ValueError, IndexError):
            return 0, 0

    def format_duties_for_date(self, date: datetime, duties: List[DutyInfo]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        :param date: –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        :param duties: –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—É –ø—Ä–æ–≤—Ä–µ–∫–∏
        :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if not duties:
            return f"<b>üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ ‚Ä¢ {date.strftime('%d.%m.%Y')}</b>\n\n‚ùå –î–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        lines = [f"<b>üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ ‚Ä¢ {date.strftime('%d.%m.%Y')}</b>\n"]

        time_groups = {}
        for duty in duties:
            time_schedule = duty.schedule
            if not time_schedule or not re.search(
                r"\d{1,2}:\d{2}-\d{1,2}:\d{2}", time_schedule
            ):
                continue

            if time_schedule not in time_groups:
                time_groups[time_schedule] = {"duties": [], "helpers": []}

            if duty.shift_type == "–°":
                time_groups[time_schedule]["duties"].append(duty)
            elif duty.shift_type == "–ü":
                time_groups[time_schedule]["helpers"].append(duty)
            else:
                time_groups[time_schedule]["duties"].append(duty)

        sorted_times = sorted(
            time_groups.keys(), key=lambda t: self.parse_time_range(t)[0]
        )

        for time_schedule in sorted_times:
            group = time_groups[time_schedule]

            lines.append(f"‚è∞ <b>{time_schedule}</b>")

            for duty in group["duties"]:
                gender_emoji = self.get_gender_emoji(duty.name)
                lines.append(
                    f"{gender_emoji}–°—Ç–∞—Ä—à–∏–π - <a href='tg://user?id={duty.user_id}'>{duty.name}</a>"
                )

            for duty in group["helpers"]:
                gender_emoji = self.get_gender_emoji(duty.name)
                lines.append(
                    f"{gender_emoji}–ü–æ–º–æ—â–Ω–∏–∫ - <a href='tg://user?id={duty.user_id}'>{duty.name}</a>"
                )

            lines.append("")

        if lines and lines[-1] == "":
            lines.pop()

        return "\n".join(lines)
