import logging
from typing import Sequence

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.services.leveling import LevelingSystem

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10


class SearchService:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""

    @staticmethod
    def filter_users_by_type(
        users: Sequence[Employee], search_type: str
    ) -> list[Employee]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É –ø–æ–∏—Å–∫–∞

        :param users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (specialists, heads, all)
        :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        if search_type == "specialists":
            # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã - —Ä–æ–ª—å 1 (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            return [user for user in users if user.role == 1]
        elif search_type == "heads":
            # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ - —Ä–æ–ª—å 2 (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏)
            return [user for user in users if user.role == 2]
        else:
            # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            return list(users)

    @staticmethod
    async def get_user_statistics(user_id: int, stp_repo: MainRequestsRepo) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ–∫—É–ø–∫–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_purchases = await stp_repo.purchase.get_user_purchases(user_id)
            achievements_sum = await stp_repo.transaction.get_user_achievements_sum(
                user_id
            )
            purchases_sum = await stp_repo.purchase.get_user_purchases_sum(user_id)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            user_balance = await stp_repo.transaction.get_user_balance(user_id)
            current_level = LevelingSystem.calculate_level(achievements_sum)

            return {
                "level": current_level,
                "balance": user_balance,
                "total_earned": achievements_sum,
                "total_spent": purchases_sum,
                "purchases_count": len(user_purchases),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "level": 0,
                "balance": 0,
                "total_earned": 0,
                "total_spent": 0,
                "purchases_count": 0,
            }

    @staticmethod
    async def get_group_statistics(head_name: str, stp_repo: MainRequestsRepo) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            group_users = await stp_repo.employee.get_users_by_head(head_name)

            total_points = 0
            group_purchases = {}

            for user in group_users:
                if user.user_id:  # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    # –°—É–º–º–∏—Ä—É–µ–º –æ—á–∫–∏
                    achievements_sum = (
                        await stp_repo.transaction.get_user_achievements_sum(
                            user.user_id
                        )
                    )
                    total_points += achievements_sum

                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    most_bought_product = (
                        await stp_repo.purchase.get_most_bought_product(user.user_id)
                    )
                    if most_bought_product:
                        product_name = most_bought_product[0]
                        product_count = most_bought_product[1]
                        group_purchases[product_name] = (
                            group_purchases.get(product_name, 0) + product_count
                        )

            return {
                "total_users": len(group_users),
                "total_points": total_points,
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã {head_name}: {e}")
            return {
                "total_users": 0,
                "total_points": 0,
            }

    @staticmethod
    async def get_group_statistics_by_id(
        head_user_id: int, stp_repo: MainRequestsRepo
    ) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ ID"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID
            head_user = await stp_repo.employee.get_user(user_id=head_user_id)
            if not head_user:
                return {
                    "total_users": 0,
                    "total_points": 0,
                    "most_popular_achievement": None,
                    "most_popular_product": None,
                }

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await SearchService.get_group_statistics(
                head_user.fullname, stp_repo
            )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ ID {head_user_id}: {e}"
            )
            return {
                "total_users": 0,
                "total_points": 0,
                "most_popular_achievement": None,
                "most_popular_product": None,
            }

    @staticmethod
    def format_user_info_base(
        user: Employee, user_head: Employee = None, stats: dict = None
    ) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        :param user: –°–æ—Ç—Ä—É–¥–Ω–∏–∫
        :param user_head: –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        from tgbot.misc.dicts import roles

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
        role_name = roles.get(user.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.position} {user.division}"""

        if user_head:
            user_info += f"\n<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> <a href='t.me/{user_head.username}'>{user.head}</a>"

        user_info += f"\n\nüõ°Ô∏è<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {role_name} ({user.role})"

        if user.email:
            user_info += f"\n<b>–†–∞–±–æ—á–∞—è –ø–æ—á—Ç–∞:</b> {user.email}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö)
        if user.user_id and user.role in [1, 3] and stats:
            user_info += f"""

<blockquote expandable><b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞</b>
<b>‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å:</b> {stats["level"]}
<b>‚ú® –ë–∞–ª–∞–Ω—Å:</b> {stats["balance"]} –±–∞–ª–ª–æ–≤
<b>üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {stats["total_earned"]} –±–∞–ª–ª–æ–≤
<b>üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {stats["total_spent"]} –±–∞–ª–ª–æ–≤</blockquote>"""

        return user_info

    @staticmethod
    def format_head_group_info(group_stats: dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è

        :param group_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        :return: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        """
        return f"""

<blockquote expandable><b>üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</b>
<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b> {group_stats["total_users"]}
<b>–û–±—â–∏–µ –æ—á–∫–∏ –≥—Ä—É–ø–ø—ã:</b> {group_stats["total_points"]} –±–∞–ª–ª–æ–≤</blockquote>

<i>üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã</i>"""
