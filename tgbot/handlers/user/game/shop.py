import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee, Product
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.user.game.main import GameMenu
from tgbot.keyboards.user.game.shop import (
    SellProductShopMenu,
    ShopBuy,
    ShopConfirm,
    ShopMenu,
    product_confirmation_kb,
    product_purchase_success_kb,
    shop_kb,
    to_game_kb,
)

user_game_shop_router = Router()
user_game_shop_router.message.filter(
    F.chat.type == "private",
)
user_game_shop_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_game_shop_router.callback_query(GameMenu.filter(F.menu == "shop"))
async def game_shop_main(
    callback: CallbackQuery,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é "–ú–∞–≥–∞–∑–∏–Ω" –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    """
    await game_shop(
        callback=callback,
        user=user,
        callback_data=ShopMenu(menu="available", page=1),
        stp_repo=stp_repo,
    )


@user_game_shop_router.callback_query(ShopMenu.filter(F.menu.in_(["available", "all"])))
async def game_shop(
    callback: CallbackQuery,
    user: Employee,
    callback_data: ShopMenu,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä –∏–∑ callback data
    page = getattr(callback_data, "page", 1)
    filter_type = getattr(callback_data, "menu", "available")

    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–∞
    if filter_type == "available":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        products = await stp_repo.product.get_available_products(user_balance)
        filter_title = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"
    else:  # filter_type == "all"
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        division = "–ù–¢–ü" if "–ù–¢–ü" in user.division else "–ù–¶–ö"
        products = await stp_repo.product.get_products(division=division)
        filter_title = "–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"

    if not products:
        empty_message = f"""üíé <b>–ú–∞–≥–∞–∑–∏–Ω - {filter_title}</b>

<b>‚ú® –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

{"–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üòî" if filter_type == "available" else "–í —Ç–≤–æ–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üòî"}

<i>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</i>"""

        await callback.message.edit_text(
            empty_message,
            reply_markup=to_game_kb(),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    products_per_page = 5
    total_products = len(products)
    total_pages = (total_products + products_per_page - 1) // products_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * products_per_page
    end_idx = start_idx + products_per_page
    page_products = products[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    products_list = []
    for counter, product in enumerate(page_products, start=start_idx + 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        availability_icon = ""
        if filter_type == "all":
            availability_icon = "üí∞ " if user_balance >= product.cost else "üîí "

        products_list.append(f"""{counter}. {availability_icon}<b>{product.name}</b>
<blockquote>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}""")
        if product.count > 1:
            products_list.append(f"""üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {product.count}""")
        products_list.append("</blockquote>")

    message_text = f"""üíé <b>–ú–∞–≥–∞–∑–∏–Ω - {filter_title}</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<b>‚ú® –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

{chr(10).join(products_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=shop_kb(
            page, total_pages, page_products, filter_type, user_balance
        ),
    )
    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç –º–∞–≥–∞–∑–∏–Ω ({filter_type}), —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –±–∞–ª–∞–Ω—Å: {user_balance}"
    )


@user_game_shop_router.callback_query(ShopBuy.filter())
async def game_shop_confirmation(
    callback: CallbackQuery,
    callback_data: ShopBuy,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    product_id = callback_data.product_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
    try:
        product_info = await stp_repo.product.get_product(product_id)
    except Exception as e:
        logger.error(f"Error getting product {product_id}: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ", show_alert=True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–ª–æ–≤
    if user_balance < product_info.cost:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ —Ç–µ–±—è: {user_balance} –±–∞–ª–ª–æ–≤\n–ù—É–∂–Ω–æ: {product_info.cost} –±–∞–ª–ª–æ–≤",
            show_alert=True,
        )
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    balance_after_purchase = user_balance - product_info.cost

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üéØ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:</b> {product_info.name}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{product_info.description}

<b>üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {product_info.count}

<b>‚ú® –ë–∞–ª–∞–Ω—Å</b>
‚Ä¢ –¢–µ–∫—É—â–∏–π: {user_balance} –±–∞–ª–ª–æ–≤
‚Ä¢ –°–ø–∏—à–µ—Ç—Å—è: {product_info.cost} –±–∞–ª–ª–æ–≤
‚Ä¢ –û—Å—Ç–∞–Ω–µ—Ç—Å—è : {balance_after_purchase} –±–∞–ª–ª–æ–≤

<i>–ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ <b>üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ</b></i>"""

    await callback.message.edit_text(
        message_text, reply_markup=product_confirmation_kb(product_id, current_page)
    )

    logger.info(
        f"[–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏] {callback.from_user.username} ({user.user_id}) –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç '{product_info.name}'"
    )


@user_game_shop_router.callback_query(ShopConfirm.filter())
async def game_shop_completed(
    callback: CallbackQuery,
    callback_data: ShopConfirm,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    product_id = callback_data.product_id
    current_page = callback_data.page
    action = callback_data.action

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
    if action == "back":
        # Redirect back to shop page with available filter by default
        await game_shop(
            callback=callback,
            user=user,
            callback_data=ShopMenu(menu="available", page=current_page),
            stp_repo=stp_repo,
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–∫—É–ø–∫—É
    if action == "buy":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        try:
            product_info: Product = await stp_repo.product.get_product(product_id)
        except Exception as e:
            logger.error(f"Error getting product {product_id}: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

        if user_balance < product_info.cost:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!\n–£ —Ç–µ–±—è: {user_balance}, –Ω—É–∂–Ω–æ: {product_info.cost}",
                show_alert=True,
            )
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º "stored"
        try:
            new_purchase = await stp_repo.purchase.add_purchase(
                user_id=user.user_id, product_id=product_id, status="stored"
            )
            await stp_repo.transaction.add_transaction(
                user_id=user.user_id,
                type="spend",
                source_type="product",
                source_id=product_id,
                amount=product_info.cost,
                comment=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {product_info.name}",
            )

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_balance - product_info.cost

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            success_message = f"""<b>‚úÖ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –ø—Ä–µ–¥–º–µ—Ç:</b> {product_info.name}

<b>üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {product_info.count}

<b>‚ú® –ë–∞–ª–∞–Ω—Å</b>
‚Ä¢ –ë—ã–ª: {user_balance} –±–∞–ª–ª–æ–≤  
‚Ä¢ –°–ø–∏—Å–∞–Ω–æ: {product_info.cost} –±–∞–ª–ª–æ–≤
‚Ä¢ –°—Ç–∞–ª–æ: {new_balance} –±–∞–ª–ª–æ–≤

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{product_info.description}

<i>üéØ –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ –≤ <b>üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ</b></i>"""

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                success_message,
                reply_markup=product_purchase_success_kb(new_purchase.id),
            )

            logger.info(
                f"[–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞] {callback.from_user.username} ({user.user_id}) –∫—É–ø–∏–ª –ø—Ä–µ–¥–º–µ—Ç '{product_info.name}' –∑–∞ {product_info.cost} –±–∞–ª–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'stored'"
            )

        except Exception as e:
            logger.error(f"Error creating user purchase: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)


@user_game_shop_router.callback_query(SellProductShopMenu.filter())
async def sell_product_from_shop(
    callback: CallbackQuery,
    callback_data: SellProductShopMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    """
    user_product_id = callback_data.user_product_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)
    if not user_product_detail:
        await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_product = user_product_detail.user_purchase
    product_info = user_product_detail.product_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å (—Å—Ç–∞—Ç—É—Å "stored" –∏ usage_count = 0)
    if user_product.status != "stored" or user_product.usage_count > 0:
        await callback.answer(
            "‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", show_alert=True
        )
        return

    try:
        success = await stp_repo.purchase.delete_user_purchase(user_product_id)
        await stp_repo.transaction.add_transaction(
            user_id=user_product.user_id,
            type="earn",
            source_type="product",
            source_id=product_info.id,
            amount=product_info.cost,
            comment=f"–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: {product_info.name}",
        )

        if success:
            await callback.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {product_info.name}.\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {product_info.cost} –±–∞–ª–ª–æ–≤"
            )

            logger.info(
                f"[–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞] {user.username} ({user.user_id}) –ø—Ä–æ–¥–∞–ª –ø—Ä–µ–¥–º–µ—Ç '{product_info.name}' –∑–∞ {product_info.cost} –±–∞–ª–ª–æ–≤"
            )

            # Return to shop since user came from purchase flow
            await game_shop(
                callback=callback,
                user=user,
                callback_data=ShopMenu(menu="available", page=1),
                stp_repo=stp_repo,
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"Error selling product: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)
