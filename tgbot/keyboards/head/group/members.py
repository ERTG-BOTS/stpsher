from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import Sequence

from infrastructure.database.models.STP.employee import Employee
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.dicts import russian_months


def short_name(full_name: str) -> str:
    """Extract short name from full name."""
    # Remove date info in parentheses if present
    clean_name = full_name.split("(")[0].strip()
    parts = clean_name.split()

    if len(parts) >= 2:
        return " ".join(parts[:2])
    return clean_name


class HeadGroupMembersMenu(CallbackData, prefix="head_group_members"):
    menu: str = "members"
    page: int = 1


class HeadMemberDetailMenu(CallbackData, prefix="head_member_detail"):
    member_id: int
    page: int = 1


class HeadMemberActionMenu(CallbackData, prefix="head_member_action"):
    member_id: int
    action: str  # "schedule", "kpi", or "game_profile"
    page: int = 1


class HeadMemberScheduleMenu(CallbackData, prefix="head_member_schedule"):
    member_id: int
    month_idx: int = 0  # 0 = current month
    page: int = 1


class HeadMemberScheduleNavigation(CallbackData, prefix="head_member_sched_nav"):
    member_id: int
    action: str  # "prev_month", "next_month", "detailed", "compact"
    month_idx: int
    page: int = 1


class HeadMemberRoleChange(CallbackData, prefix="head_member_role"):
    member_id: int
    page: int = 1


class HeadMemberStatusSelect(CallbackData, prefix="head_member_status_select"):
    member_id: int
    page: int = 1


class HeadMemberStatusChange(CallbackData, prefix="head_member_status_change"):
    member_id: int
    status_type: str  # "trainee" or "duty"
    page: int = 1


class HeadMemberKPIMenu(CallbackData, prefix="head_member_kpi"):
    member_id: int
    action: str  # "main", "calculator", "salary"
    page: int = 1


class HeadMemberGameProfileMenu(CallbackData, prefix="head_member_game_profile"):
    member_id: int
    page: int = 1


class HeadMemberGameHistoryMenu(CallbackData, prefix="head_member_game_history"):
    member_id: int
    history_page: int = 1
    page: int = 1


class HeadMemberTransactionDetailMenu(
    CallbackData, prefix="head_member_transaction_detail"
):
    member_id: int
    transaction_id: int
    history_page: int = 1
    page: int = 1


def head_group_members_kb(
    members: Sequence[Employee],
    current_page: int = 1,
    members_per_page: int = 8,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä—è–¥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (4 —Ä—è–¥–∞).
    """
    buttons = []

    if not members:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data=MainMenu(menu="group_management").pack(),
                ),
                InlineKeyboardButton(
                    text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
                ),
            ]
        )
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_members = len(members)
    total_pages = (total_members + members_per_page - 1) // members_per_page

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (current_page - 1) * members_per_page
    end_idx = start_idx + members_per_page
    page_members = members[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (2 –≤ —Ä—è–¥)
    for i in range(0, len(page_members), 2):
        row = []

        # –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä—è–¥—É
        member = page_members[i]
        member_short_name = short_name(member.fullname)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_emoji = "üîí " if not member.user_id else ""
        role_emoji = {3: "üëÆ ", 10: "üî® "}.get(member.role, "")
        trainee_emoji = "üë∂üèª " if member.is_trainee else ""
        button_text = f"{status_emoji}{role_emoji}{trainee_emoji}{member_short_name}"

        row.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=HeadMemberDetailMenu(
                    member_id=member.id, page=current_page
                ).pack(),
            )
        )

        # –í—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_members):
            member = page_members[i + 1]
            member_short_name = short_name(member.fullname)
            status_emoji = "üîí " if not member.user_id else ""
            role_emoji = {3: "üëÆ ", 10: "üî® "}.get(member.role, "")
            trainee_emoji = "üë∂üèª " if member.is_trainee else ""
            button_text = (
                f"{status_emoji}{role_emoji}{trainee_emoji}{member_short_name}"
            )

            row.append(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=HeadMemberDetailMenu(
                        member_id=member.id, page=current_page
                    ).pack(),
                )
            )

        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: [‚è™] [‚¨ÖÔ∏è] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] [‚û°Ô∏è] [‚è≠Ô∏è]

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=HeadGroupMembersMenu(menu="members", page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=HeadGroupMembersMenu(
                        menu="members", page=current_page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=HeadGroupMembersMenu(
                        menu="members", page=current_page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=HeadGroupMembersMenu(
                        menu="members", page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=MainMenu(menu="group_management").pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def head_member_detail_kb(
    member_id: int, page: int = 1, member_role: int = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üìÖ –ì—Ä–∞—Ñ–∏–∫",
                callback_data=HeadMemberActionMenu(
                    member_id=member_id, action="schedule", page=page
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üåü –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                callback_data=HeadMemberKPIMenu(
                    member_id=member_id, action="main", page=page
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üèÆ –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                callback_data=HeadMemberActionMenu(
                    member_id=member_id, action="game_profile", page=page
                ).pack(),
            ),
        ],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (—Ä–æ–ª—å 1) –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö (—Ä–æ–ª—å 3)
    if member_role in [1, 3]:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                    callback_data=HeadMemberStatusSelect(
                        member_id=member_id, page=page
                    ).pack(),
                ),
            ]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=HeadGroupMembersMenu(menu="members", page=page).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_month_name_by_index(month_idx: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    if 1 <= month_idx <= 12:
        return russian_months[month_idx]
    return "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"


def head_member_schedule_kb(
    member_id: int, current_month: str, page: int = 1, is_detailed: bool = False
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    current_month_idx = 1
    for month_idx, month_name in russian_months.items():
        if month_name == current_month:
            current_month_idx = month_idx
            break

    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    month_nav_row = []

    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month_idx = current_month_idx - 1 if current_month_idx > 1 else 12
    month_nav_row.append(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=HeadMemberScheduleNavigation(
                member_id=member_id,
                action="prev_month",
                month_idx=prev_month_idx,
                page=page,
            ).pack(),
        )
    )

    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä) - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    month_display = current_month.capitalize()
    month_nav_row.append(
        InlineKeyboardButton(
            text=f"üìÖ {month_display}",
            callback_data="noop",
        )
    )

    # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    next_month_idx = current_month_idx + 1 if current_month_idx < 12 else 1
    month_nav_row.append(
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=HeadMemberScheduleNavigation(
                member_id=member_id,
                action="next_month",
                month_idx=next_month_idx,
                page=page,
            ).pack(),
        )
    )

    buttons.append(month_nav_row)

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ/–∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
    view_toggle_text = "üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ" if is_detailed else "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ"
    view_action = "compact" if is_detailed else "detailed"

    buttons.append(
        [
            InlineKeyboardButton(
                text=view_toggle_text,
                callback_data=HeadMemberScheduleNavigation(
                    member_id=member_id,
                    action=view_action,
                    month_idx=current_month_idx,
                    page=page,
                ).pack(),
            )
        ]
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=HeadMemberDetailMenu(
                    member_id=member_id, page=page
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)
