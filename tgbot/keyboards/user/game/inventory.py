from typing import List

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import Sequence

from infrastructure.database.repo.STP.purchase import PurchaseDetailedParams
from infrastructure.database.models.STP.transactions import Transaction
from tgbot.keyboards.user.game.main import GameMenu
from tgbot.keyboards.user.main import MainMenu


class InventoryHistoryMenu(CallbackData, prefix="inventory_history"):
    menu: str = "inventory"
    page: int = 1


class ProductDetailMenu(CallbackData, prefix="product_detail"):
    user_product_id: int


class UseProductMenu(CallbackData, prefix="use_product"):
    user_product_id: int


class SellProductMenu(CallbackData, prefix="sell_product_inventory"):
    user_product_id: int
    source_menu: str = "inventory"


class CancelActivationMenu(CallbackData, prefix="cancel_activation"):
    user_product_id: int


def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
        "canceled": "üî•",
        "rejected": "‚õî",
    }
    return status_emojis.get(status, "‚ùì")


def inventory_kb(
    user_products: List[PurchaseDetailedParams],
    current_page: int = 1,
    products_per_page: int = 8,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 2 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä—è–¥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (4 —Ä—è–¥–∞).
    """
    buttons = []

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_products = len(user_products)
    total_pages = (total_products + products_per_page - 1) // products_per_page

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (current_page - 1) * products_per_page
    end_idx = start_idx + products_per_page
    page_products = user_products[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (2 –≤ —Ä—è–¥)
    for i in range(0, len(page_products), 2):
        row = []

        # –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—è–¥—É
        product_detail = page_products[i]
        user_product = product_detail.user_purchase
        product_info = product_detail.product_info

        date_str = user_product.bought_at.strftime("%d.%m.%y")
        status_emoji = get_status_emoji(user_product.status)
        usage_info = f"({product_detail.current_usages}/{product_detail.max_usages})"
        button_text = f"{status_emoji} {usage_info} {product_info.name} ({date_str})"

        row.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=ProductDetailMenu(user_product_id=user_product.id).pack(),
            )
        )

        # –í—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_products):
            product_detail = page_products[i + 1]
            user_product = product_detail.user_purchase
            product_info = product_detail.product_info

            date_str = user_product.bought_at.strftime("%d.%m.%y")
            status_emoji = get_status_emoji(user_product.status)
            usage_info = (
                f"({product_detail.current_usages}/{product_detail.max_usages})"
            )
            button_text = (
                f"{status_emoji} {usage_info} {product_info.name} ({date_str})"
            )

            row.append(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=ProductDetailMenu(
                        user_product_id=user_product.id
                    ).pack(),
                )
            )

        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: [‚è™] [‚¨ÖÔ∏è] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] [‚û°Ô∏è] [‚è≠Ô∏è]

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=InventoryHistoryMenu(menu="inventory", page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=InventoryHistoryMenu(
                        menu="inventory", page=current_page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=InventoryHistoryMenu(
                        menu="inventory", page=current_page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=InventoryHistoryMenu(
                        menu="inventory", page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="game").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def to_game_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üíé –ú–∞–≥–∞–∑–∏–Ω",
                callback_data=GameMenu(menu="shop").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="game").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def product_detail_kb(
    user_product_id: int,
    can_use: bool = False,
    can_sell: bool = False,
    can_cancel: bool = False,
    source_menu: str = "inventory",
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    buttons = []

    if can_use:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
                    callback_data=UseProductMenu(
                        user_product_id=user_product_id
                    ).pack(),
                )
            ]
        )

    if can_sell:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üí∏ –í–µ—Ä–Ω—É—Ç—å",
                    callback_data=SellProductMenu(
                        user_product_id=user_product_id, source_menu=source_menu
                    ).pack(),
                )
            ]
        )

    if can_cancel:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úãüèª –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é",
                    callback_data=CancelActivationMenu(
                        user_product_id=user_product_id
                    ).pack(),
                )
            ]
        )

    # Context-aware back button
    if source_menu == "shop":
        from tgbot.keyboards.user.game.shop import ShopMenu

        back_callback = ShopMenu(menu="available", page=1).pack()
    else:
        back_callback = GameMenu(menu="inventory").pack()

    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
