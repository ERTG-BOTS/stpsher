import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.handlers.gok.game.main import filter_items_by_division
from tgbot.keyboards.gok.main import GokProductsMenu, parse_filters
from tgbot.keyboards.head.game.products import head_products_paginated_kb

head_game_products_router = Router()
head_game_products_router.message.filter(F.chat.type == "private", HeadFilter())
head_game_products_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_products_router.callback_query(
    GokProductsMenu.filter(F.menu == "products_all")
)
async def head_products_all(
    callback: CallbackQuery, callback_data: GokProductsMenu, stp_repo: MainRequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback data
    page = getattr(callback_data, "page", 1)
    filters = getattr(callback_data, "filters", "–ù–¶–ö,–ù–¢–ü")

    # –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    active_filters = parse_filters(filters)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_products = await stp_repo.product.get_products()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filtered_products = filter_items_by_division(all_products, active_filters)

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    products_per_page = 5
    total_products = len(filtered_products)
    total_pages = (total_products + products_per_page - 1) // products_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * products_per_page
    end_idx = start_idx + products_per_page
    page_products = filtered_products[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    products_list = []
    for counter, product in enumerate(page_products, start=start_idx + 1):
        product_text = f"""
<b>{counter}. {product.name}</b>
üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {product.count}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost} –±–∞–ª–ª–æ–≤
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {product.division}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}"""
        products_list.append(product_text)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_ntp = sum(1 for product in all_products if product.division == "–ù–¢–ü")
    stats_nck = sum(1 for product in all_products if product.division == "–ù–¶–ö")
    filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_products}"

    message_text = f"""
<b>üëè –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote expandable><b>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>  
‚Ä¢ –ù–¢–ü: {stats_ntp}  
‚Ä¢ –ù–¶–ö: {stats_nck}  
{filtered_stats}
</blockquote>{chr(10).join(products_list)}
    """

    await callback.message.edit_text(
        message_text,
        reply_markup=head_products_paginated_kb(page, total_pages, filters),
    )
    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü—Ä–µ–¥–º–µ—Ç—ã] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, —Ñ–∏–ª—å—Ç—Ä—ã: {filters}"
    )
