import datetime
import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.mip.game.purchases import purchase_notify_kb
from tgbot.keyboards.user.game.inventory import (
    CancelActivationMenu,
    InventoryHistoryMenu,
    ProductDetailMenu,
    SellProductMenu,
    UseProductMenu,
    inventory_kb,
    product_detail_kb,
    to_game_kb,
)
from tgbot.keyboards.user.game.main import GameMenu
from tgbot.keyboards.user.game.shop import ProductDetailsShop
from tgbot.keyboards.user.schedule.main import get_yekaterinburg_date
from tgbot.misc.helpers import get_role, tz
from tgbot.services.broadcaster import broadcast
from tgbot.services.mailing import (
    send_activation_product_email,
    send_cancel_product_email,
)
from tgbot.services.schedule import DutyScheduleParser
from tgbot.services.schedule.parsers import ScheduleParser


def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
        "canceled": "üî•",
        "rejected": "‚õî",
    }
    return status_emojis.get(status, "‚ùì")


user_game_inventory_router = Router()
user_game_inventory_router.message.filter(
    F.chat.type == "private",
)
user_game_inventory_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_game_inventory_router.callback_query(GameMenu.filter(F.menu == "inventory"))
async def game_inventory(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    user_products_with_details = (
        await stp_repo.purchase.get_user_purchases_with_details(
            user_id=callback.from_user.id
        )
    )

    if not user_products_with_details:
        await callback.message.edit_text(
            """üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üôÇ

<i>–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –≤ <b>üíé –ú–∞–≥–∞–∑–∏–Ω–µ</b></i>""",
            reply_markup=to_game_kb(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    total_products = len(user_products_with_details)
    message_text = f"""üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ: {total_products}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=inventory_kb(user_products_with_details, current_page=1),
    )


@user_game_inventory_router.callback_query(
    InventoryHistoryMenu.filter(F.menu == "inventory")
)
async def game_inventory_paginated(
    callback: CallbackQuery,
    callback_data: InventoryHistoryMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    page = callback_data.page

    user_products_with_details = (
        await stp_repo.purchase.get_user_purchases_with_details(
            user_id=callback.from_user.id
        )
    )

    if not user_products_with_details:
        await callback.message.edit_text(
            """üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üôÇ

<i>–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –≤ <b>üíé –ú–∞–≥–∞–∑–∏–Ω–µ</b></i>""",
            reply_markup=to_game_kb(),
        )
        return

    total_products = len(user_products_with_details)
    message_text = f"""üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ: {total_products}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=inventory_kb(user_products_with_details, current_page=page),
    )


@user_game_inventory_router.callback_query(ProductDetailMenu.filter())
async def product_detail_view(
    callback: CallbackQuery,
    callback_data: ProductDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_product_id = callback_data.user_product_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)

    if not user_product_detail:
        await callback.message.edit_text(
            """<b>üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚òπ""",
            reply_markup=to_game_kb(),
        )
        return

    user_product = user_product_detail.user_purchase
    product_info = user_product_detail.product_info

    status_names = {
        "stored": "–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        "used_up": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "canceled": "–û—Ç–º–µ–Ω–µ–Ω",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
    }
    status_name = status_names.get(user_product.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
    can_use = (
        user_product.status == "stored"
        and user_product_detail.current_usages < user_product_detail.max_usages
    )

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "stored" –ò usage_count —Ä–∞–≤–µ–Ω 0 (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è)
    can_sell = user_product.status == "stored" and user_product.usage_count == 0

    # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "review" (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    can_cancel = user_product.status == "review"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""
<b>üõí –ü—Ä–µ–¥–º–µ—Ç:</b> {product_info.name}

<b>üìä –°—Ç–∞—Ç—É—Å</b>  
{status_name}

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{user_product.usage_count} –∏–∑ {product_info.count}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>  
{product_info.cost} –±–∞–ª–ª–æ–≤

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>  
{product_info.description}

<blockquote expandable><b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>  
{user_product.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}</blockquote>"""

    if user_product.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n‚îî {user_product.comment}"

    if user_product.updated_by_user_id:
        manager = await stp_repo.employee.get_user(
            user_id=user_product.updated_by_user_id
        )
        if manager.username:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='t.me/{manager.username}'>"
                f"{manager.fullname}</a>"
            )
        else:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='tg://user?id={manager.user_id}'>"
                f"{manager.fullname}</a>"
            )
        message_text += f"\n\n<b>üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n{user_product.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}</blockquote>"

    # Updated keyboard logic - default to inventory context when accessed from inventory
    keyboard = product_detail_kb(
        user_product.id,
        can_use=can_use,
        can_sell=can_sell,
        can_cancel=can_cancel,
        source_menu="inventory",
    )

    await callback.message.edit_text(message_text, reply_markup=keyboard)


@user_game_inventory_router.callback_query(ProductDetailsShop.filter())
async def product_detail_view_from_shop(
    callback: CallbackQuery,
    callback_data: ProductDetailsShop,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    user_product_id = callback_data.user_product_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)

    if not user_product_detail:
        await callback.message.edit_text(
            """<b>üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚òπ""",
            reply_markup=to_game_kb(),
        )
        return

    user_product = user_product_detail.user_purchase
    product_info = user_product_detail.product_info

    status_names = {
        "stored": "–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        "used_up": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "canceled": "–û—Ç–º–µ–Ω–µ–Ω",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
    }
    status_name = status_names.get(user_product.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    can_use = (
        user_product.status == "stored"
        and user_product_detail.current_usages < user_product_detail.max_usages
    )

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "stored" –ò usage_count —Ä–∞–≤–µ–Ω 0 (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è)
    can_sell = user_product.status == "stored" and user_product.usage_count == 0

    # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "review" (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    can_cancel = user_product.status == "review"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""
<b>üõí –ü—Ä–µ–¥–º–µ—Ç:</b> {product_info.name}

<b>üìä –°—Ç–∞—Ç—É—Å</b>  
{status_name}

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{user_product.usage_count} –∏–∑ {product_info.count}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>  
{product_info.cost} –±–∞–ª–ª–æ–≤

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>  
{product_info.description}

<blockquote expandable><b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>  
{user_product.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}</blockquote>"""

    if user_product.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n‚îî {user_product.comment}"

    if user_product.updated_by_user_id:
        manager = await stp_repo.employee.get_user(
            user_id=user_product.updated_by_user_id
        )
        if manager.username:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='t.me/{manager.username}'>"
                f"{manager.fullname}</a>"
            )
        else:
            message_text += (
                f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π</b>\n<a href='tg://user?id={manager.user_id}'>"
                f"{manager.fullname}</a>"
            )
        message_text += f"\n\n<b>üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n{user_product.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}</blockquote>"

    # Updated keyboard logic - set shop context since this came from shop
    keyboard = product_detail_kb(
        user_product.id,
        can_use=can_use,
        can_sell=can_sell,
        can_cancel=can_cancel,
        source_menu="shop",
    )

    await callback.message.edit_text(message_text, reply_markup=keyboard)


@user_game_inventory_router.callback_query(UseProductMenu.filter())
async def use_product_handler(
    callback: CallbackQuery,
    callback_data: UseProductMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç" –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
    :param callback:
    :param callback_data:
    :param user:
    :param stp_repo:
    :return:
    """
    user_product_id = callback_data.user_product_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)
    if not user_product_detail:
        await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if user_product_detail.product_info.activate_days:
        current_day = datetime.datetime.now(tz).day
        activate_days = user_product_detail.product_info.activate_days

        if activate_days and current_day not in activate_days:
            # Detect if it's a continuous range
            sorted_days = sorted(activate_days)
            if sorted_days == list(range(sorted_days[0], sorted_days[-1] + 1)):
                # continuous range (e.g., 1‚Äì7)
                days_text = f"—Å {sorted_days[0]} –ø–æ {sorted_days[-1]} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞"
            else:
                # non-continuous days (e.g., [1, 5, 10])
                days_text = "–≤ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞: " + ", ".join(
                    map(str, sorted_days)
                )

            await callback.answer(
                f"‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ {days_text}", show_alert=True
            )
            return

    success = await stp_repo.purchase.use_purchase(user_product_id)

    # Refresh the product detail view
    callback_data = ProductDetailMenu(user_product_id=user_product_id)
    await product_detail_view(callback, callback_data, stp_repo)

    if success:
        product_name = user_product_detail.product_info.name
        confirmer = get_role(user_product_detail.product_info.manager_role)["name"]

        # Check if user has work shift today
        current_date = get_yekaterinburg_date()
        schedule_parser = ScheduleParser()

        user_has_work_shift = False
        try:
            # Convert month to Russian month name in uppercase
            month_names = {
                1: "–Ø–ù–í–ê–†–¨",
                2: "–§–ï–í–†–ê–õ–¨",
                3: "–ú–ê–†–¢",
                4: "–ê–ü–†–ï–õ–¨",
                5: "–ú–ê–ô",
                6: "–ò–Æ–ù–¨",
                7: "–ò–Æ–õ–¨",
                8: "–ê–í–ì–£–°–¢",
                9: "–°–ï–ù–¢–Ø–ë–†–¨",
                10: "–û–ö–¢–Ø–ë–†–¨",
                11: "–ù–û–Ø–ë–†–¨",
                12: "–î–ï–ö–ê–ë–†–¨",
            }
            current_month = month_names[current_date.month]

            if user.division in ["–ù–¢–ü1", "–ù–¢–ü2"]:
                # For –ù–¢–ü1/–ù–¢–ü2, check if user has work shift today
                user_schedule = schedule_parser.get_user_schedule(
                    user.fullname,
                    current_month,
                    user.division,
                )

                # Get today's schedule entry
                day_key = None
                for day, schedule_value in user_schedule.items():
                    if str(current_date.day) in day:
                        day_key = day
                        break

                if day_key:
                    schedule_value = user_schedule[day_key]
                    # Check if it's a valid work shift (contains time format)
                    user_has_work_shift = schedule_parser.utils.is_time_format(
                        schedule_value
                    )

            elif user.division == "–ù–¶–ö":
                # For –ù–¶–ö, just check if user works today (has any schedule entry that's not vacation/day off)
                user_schedule = schedule_parser.get_user_schedule(
                    user.fullname,
                    current_month,
                    user.division,
                )

                # Get today's schedule entry
                day_key = None
                for day, schedule_value in user_schedule.items():
                    if str(current_date.day) in day:
                        day_key = day
                        break

                if day_key:
                    schedule_value = user_schedule[day_key]
                    # For –ù–¶–ö, consider working if not vacation, day off, or empty
                    user_has_work_shift = schedule_value not in [
                        "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                        "–í",
                        "–û",
                        "",
                        "0",
                        "0.0",
                    ]

        except Exception as schedule_error:
            logger.warning(
                f"Could not check work schedule for {user.fullname}: {schedule_error}"
            )
            # Continue with activation even if schedule check fails
            user_has_work_shift = True

        await callback.answer(
            f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç {product_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n\n"
            f"üîî –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É: {confirmer}",
            show_alert=True,
        )

        # Determine notification recipients based on work shift and manager_role
        manager_ids = []

        if user_has_work_shift:
            manager_role = user_product_detail.product_info.manager_role

            if manager_role == 3:
                # For manager_role 3, notify only current duty officers
                duty_scheduler = DutyScheduleParser()
                current_senior = await duty_scheduler.get_current_senior_duty(
                    user.division, stp_repo
                )
                current_helper = await duty_scheduler.get_current_helper_duty(
                    user.division, stp_repo
                )

                if current_senior and current_senior.user_id != user.user_id:
                    manager_ids.append(current_senior.user_id)
                if current_helper and current_helper.user_id != user.user_id:
                    manager_ids.append(current_helper.user_id)
            elif manager_role in [5, 6]:
                # For manager_role 5 or 6, notify users with the same role
                users_with_role = await stp_repo.employee.get_users_by_role(
                    manager_role
                )
                for role_user in users_with_role:
                    if role_user.user_id != user.user_id:
                        manager_ids.append(role_user.user_id)

        if manager_ids:
            notification_text = f"""<b>üîî –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é</b>

<b>üõí –ü—Ä–µ–¥–º–µ—Ç:</b> {product_name}
<b>üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>üìã –û–ø–∏—Å–∞–Ω–∏–µ:</b> {user_product_detail.product_info.description}

<b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>"""

            user_head: Employee | None = await stp_repo.employee.get_user(
                fullname=user.head
            )

            # Send email notification only if user has work shift
            if user_has_work_shift and user_head:
                duty_scheduler = DutyScheduleParser()
                current_duty = await duty_scheduler.get_current_senior_duty(
                    division=str(user_head.division), stp_repo=stp_repo
                )
                if current_duty:
                    current_duty_user = await stp_repo.employee.get_user(
                        user_id=current_duty.user_id
                    )
                    bot_info = await callback.bot.get_me()
                    await send_activation_product_email(
                        user,
                        user_head,
                        current_duty_user,
                        user_product_detail.product_info,
                        user_product_detail.user_purchase,
                        bot_username=bot_info.username,
                    )

            result = await broadcast(
                bot=callback.bot,
                users=manager_ids,
                text=notification_text,
                reply_markup=purchase_notify_kb(),
            )

            logger.info(
                f"[–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] {user.username} ({user.user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ '{product_name}'. –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {result} –∏–∑ {len(manager_ids)}"
            )
    else:
        await callback.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", show_alert=True)


@user_game_inventory_router.callback_query(SellProductMenu.filter())
async def sell_product_handler(
    callback: CallbackQuery,
    callback_data: SellProductMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ - —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–ª—ã
    """
    user_product_id = callback_data.user_product_id
    source_menu = callback_data.source_menu

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)
    if not user_product_detail:
        await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_product = user_product_detail.user_purchase
    product_info = user_product_detail.product_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å (—Å—Ç–∞—Ç—É—Å "stored" –∏ usage_count = 0)
    if user_product.status != "stored" or user_product.usage_count > 0:
        await callback.answer(
            "‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", show_alert=True
        )
        return

    try:
        success = await stp_repo.purchase.delete_user_purchase(user_product_id)
        await stp_repo.transaction.add_transaction(
            user_id=user_product.user_id,
            transaction_type="earn",
            source_type="product",
            source_id=product_info.id,
            amount=product_info.cost,
            comment=f"–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: {product_info.name}",
        )

        if success:
            await callback.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {product_info.name}.\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {product_info.cost} –±–∞–ª–ª–æ–≤"
            )

            logger.info(
                f"[–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞] {user.username} ({user.user_id}) –ø—Ä–æ–¥–∞–ª  '{product_info.name}' –∑–∞ {product_info.cost} –±–∞–ª–ª–æ–≤"
            )

            # Context-aware navigation
            if source_menu == "shop":
                # Return to shop if user came from purchase flow
                from tgbot.handlers.user.game.shop import game_shop
                from tgbot.keyboards.user.game.shop import ShopMenu

                await game_shop(
                    callback=callback,
                    user=user,
                    callback_data=ShopMenu(menu="available", page=1),
                    stp_repo=stp_repo,
                )
            else:
                # Return to inventory if user came from inventory menu
                await game_inventory(
                    callback=callback,
                    stp_repo=stp_repo,
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)

    except Exception as e:
        logger.error(f"Error selling product: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)


@user_game_inventory_router.callback_query(CancelActivationMenu.filter())
async def cancel_activation_handler(
    callback: CallbackQuery,
    callback_data: CancelActivationMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ - –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å "review" –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "stored"
    """
    user_product_id = callback_data.user_product_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    user_product_detail = await stp_repo.purchase.get_purchase_details(user_product_id)
    if not user_product_detail:
        await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_product = user_product_detail.user_purchase
    product_info = user_product_detail.product_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
    if user_product.status != "review":
        await callback.answer(
            "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True
        )
        return

    try:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "stored"
        success = await stp_repo.purchase.update_purchase(
            purchase_id=user_product_id, status="stored"
        )

        if success:
            await callback.answer(
                f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{product_info.name}' –æ—Ç–º–µ–Ω–µ–Ω–∞!"
            )

            # Refresh the product detail view
            await product_detail_view(
                callback, ProductDetailMenu(user_product_id=user_product_id), stp_repo
            )

            user_head: Employee | None = await stp_repo.employee.get_user(
                fullname=user.head
            )
            duty_scheduler = DutyScheduleParser()
            current_duty = await duty_scheduler.get_current_senior_duty(
                division=str(user_head.division), stp_repo=stp_repo
            )
            current_duty_user = await stp_repo.employee.get_user(
                user_id=current_duty.user_id
            )
            bot_info = await callback.bot.get_me()
            await send_cancel_product_email(
                user,
                user_head,
                current_duty_user,
                product_info,
                user_product,
                bot_username=bot_info.username,
            )

            logger.info(
                f"[–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏] {user.username} ({user.user_id}) –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é '{product_info.name}'"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"Error canceling activation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
