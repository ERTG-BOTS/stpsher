from datetime import datetime, timedelta
from typing import List

import pytz
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from tgbot.keyboards.user.main import MainMenu

# –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
MONTHS_RU = [
    "—è–Ω–≤–∞—Ä—å",
    "—Ñ–µ–≤—Ä–∞–ª—å",
    "–º–∞—Ä—Ç",
    "–∞–ø—Ä–µ–ª—å",
    "–º–∞–π",
    "–∏—é–Ω—å",
    "–∏—é–ª—å",
    "–∞–≤–≥—É—Å—Ç",
    "—Å–µ–Ω—Ç—è–±—Ä—å",
    "–æ–∫—Ç—è–±—Ä—å",
    "–Ω–æ—è–±—Ä—å",
    "–¥–µ–∫–∞–±—Ä—å",
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTH_EMOJIS = {
    "—è–Ω–≤–∞—Ä—å": "‚ùÑÔ∏è",
    "—Ñ–µ–≤—Ä–∞–ª—å": "üíô",
    "–º–∞—Ä—Ç": "üå∏",
    "–∞–ø—Ä–µ–ª—å": "üå∑",
    "–º–∞–π": "üåª",
    "–∏—é–Ω—å": "‚òÄÔ∏è",
    "–∏—é–ª—å": "üèñÔ∏è",
    "–∞–≤–≥—É—Å—Ç": "üåæ",
    "—Å–µ–Ω—Ç—è–±—Ä—å": "üçÇ",
    "–æ–∫—Ç—è–±—Ä—å": "üéÉ",
    "–Ω–æ—è–±—Ä—å": "üçÅ",
    "–¥–µ–∫–∞–±—Ä—å": "üéÑ",
}


class ScheduleMenu(CallbackData, prefix="schedule_menu"):
    menu: str


class HeadNavigation(CallbackData, prefix="head_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø"""

    action: str  # "prev", "next", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD


class DutyNavigation(CallbackData, prefix="duty_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –¥–µ–∂—É—Ä—Å—Ç–≤"""

    action: str  # "prev", "next", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD


class GroupNavigation(CallbackData, prefix="group_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""

    action: str  # "prev", "next", "prev_page", "next_page", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    page: int = 1  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    user_type: str = "user"  # "head" –∏–ª–∏ "user"
    from_group_mgmt: bool = False  # –≤—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π


def get_yekaterinburg_date() -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É"""
    yekaterinburg_tz = pytz.timezone("Asia/Yekaterinburg")
    return datetime.now(yekaterinburg_tz)


def duties_kb(current_date: datetime = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    today = get_yekaterinburg_date().date()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = current_date.strftime("%d.%m")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_row = [
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=DutyNavigation(
                action="prev", date=prev_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"üìÖ {date_str}",
            callback_data=DutyNavigation(
                action="-", date=current_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=DutyNavigation(
                action="next", date=next_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
    ]

    buttons = [nav_row]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    if current_date.date() != today:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üìç –°–µ–≥–æ–¥–Ω—è",
                    callback_data=DutyNavigation(
                        action="today", date=today.strftime("%Y-%m-%d")
                    ).pack(),
                ),
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="schedule").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


class MonthNavigation(CallbackData, prefix="month_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º"""

    action: str  # "prev", "next", "-", "detailed", "compact"
    current_month: str  # —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    schedule_type: str = "my"  # "my", "duties", "heads"


def schedule_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üëî –ú–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data=ScheduleMenu(menu="my").pack()
            ),
            InlineKeyboardButton(
                text="‚ù§Ô∏è –ú–æ—è –≥—Ä—É–ø–ø–∞", callback_data=ScheduleMenu(menu="group").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ", callback_data=ScheduleMenu(menu="duties").pack()
            ),
            InlineKeyboardButton(
                text="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏", callback_data=ScheduleMenu(menu="heads").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def get_available_months() -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞

    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
    """
    # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    # –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã
    return MONTHS_RU


def get_month_index(month: str) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ

    Args:
        month: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞

    Returns:
        –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        return MONTHS_RU.index(month.lower())
    except ValueError:
        return 0


def get_next_month(current_month: str, available_months: List[str]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Å—è—Ü

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        available_months: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤

    Returns:
        –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ—Ç
    """
    try:
        current_index = available_months.index(current_month.lower())
        if current_index < len(available_months) - 1:
            return available_months[current_index + 1]
        else:
            return current_month.lower()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ—Ç
    except (ValueError, IndexError):
        return current_month.lower()


def get_prev_month(current_month: str, available_months: List[str]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Å—è—Ü

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        available_months: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤

    Returns:
        –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–µ—Ç
    """
    try:
        current_index = available_months.index(current_month.lower())
        if current_index > 0:
            return available_months[current_index - 1]
        else:
            return current_month.lower()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–µ—Ç
    except (ValueError, IndexError):
        return current_month.lower()


def schedule_with_month_kb(
    current_month: str, schedule_type: str = "my"
) -> InlineKeyboardMarkup:
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        schedule_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    available_months = get_available_months()
    current_month = current_month.lower()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü—ã
    prev_month = get_prev_month(current_month, available_months)
    next_month = get_next_month(current_month, available_months)

    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    month_emoji = MONTH_EMOJIS.get(current_month, "üìÖ")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_row = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü)
    if prev_month != current_month:
        nav_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=MonthNavigation(
                    action="prev", current_month=prev_month, schedule_type=schedule_type
                ).pack(),
            )
        )

    # –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    nav_row.append(
        InlineKeyboardButton(
            text=f"{month_emoji} {current_month.capitalize()}",
            callback_data=MonthNavigation(
                action="-",
                current_month=current_month,
                schedule_type=schedule_type,
            ).pack(),
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü)
    if next_month != current_month:
        nav_row.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=MonthNavigation(
                    action="next", current_month=next_month, schedule_type=schedule_type
                ).pack(),
            )
        )

    buttons = [
        nav_row,  # –†—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        [
            InlineKeyboardButton(
                text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                callback_data=MonthNavigation(
                    action="detailed",
                    current_month=current_month,
                    schedule_type=schedule_type,
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="schedule").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def create_detailed_schedule_keyboard(current_month: str, schedule_type: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    available_months = get_available_months()
    current_month_lower = current_month.lower()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü—ã
    prev_month = get_prev_month(current_month_lower, available_months)
    next_month = get_next_month(current_month_lower, available_months)

    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    month_emoji = MONTH_EMOJIS.get(current_month_lower, "üìÖ")

    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã)
    nav_row = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü)
    if prev_month != current_month_lower:  # –ï—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        nav_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=MonthNavigation(
                    action="prev", current_month=prev_month, schedule_type=schedule_type
                ).pack(),
            )
        )

    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    nav_row.append(
        InlineKeyboardButton(
            text=f"{month_emoji} {current_month.capitalize()}",
            callback_data=MonthNavigation(
                action="-",
                current_month=current_month_lower,
                schedule_type=schedule_type,
            ).pack(),
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü)
    if next_month != current_month_lower:  # –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        nav_row.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=MonthNavigation(
                    action="next", current_month=next_month, schedule_type=schedule_type
                ).pack(),
            )
        )

    buttons.append(nav_row)

    # –ö–Ω–æ–ø–∫–∞ "–ö—Ä–∞—Ç–∫–æ"
    buttons.append(
        [
            InlineKeyboardButton(
                text="üìã –ö—Ä–∞—Ç–∫–æ",
                callback_data=MonthNavigation(
                    action="compact",
                    current_month=current_month_lower,
                    schedule_type=schedule_type,
                ).pack(),
            ),
        ]
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="schedule").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def heads_kb(current_date: datetime = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –≥—Ä—É–ø–ø

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    today = get_yekaterinburg_date().date()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = current_date.strftime("%d.%m")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_row = [
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=HeadNavigation(
                action="prev", date=prev_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"üìÖ {date_str}",
            callback_data=HeadNavigation(
                action="-", date=current_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=HeadNavigation(
                action="next", date=next_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
    ]

    buttons = [nav_row]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    if current_date.date() != today:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üìç –°–µ–≥–æ–¥–Ω—è",
                    callback_data=HeadNavigation(
                        action="today", date=today.strftime("%Y-%m-%d")
                    ).pack(),
                ),
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="schedule").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def changed_schedule_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üëî –ú–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data=ScheduleMenu(menu="my").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def group_schedule_kb(
    current_date: datetime = None,
    page: int = 1,
    total_pages: int = 1,
    has_prev: bool = False,
    has_next: bool = False,
    user_type: str = "user",
    from_group_mgmt: bool = False,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        has_prev: –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        has_next: –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("head" –∏–ª–∏ "user")
        from_group_mgmt: –í—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    today = get_yekaterinburg_date().date()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = current_date.strftime("%d.%m")

    buttons = []

    # –†—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_row = [
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=GroupNavigation(
                action="prev",
                date=prev_date.strftime("%Y-%m-%d"),
                page=1,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
                user_type=user_type,
                from_group_mgmt=from_group_mgmt,
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"üìÖ {date_str}",
            callback_data=GroupNavigation(
                action="-",
                date=current_date.strftime("%Y-%m-%d"),
                page=page,
                user_type=user_type,
                from_group_mgmt=from_group_mgmt,
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=GroupNavigation(
                action="next",
                date=next_date.strftime("%Y-%m-%d"),
                page=1,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
                user_type=user_type,
                from_group_mgmt=from_group_mgmt,
            ).pack(),
        ),
    ]
    buttons.append(nav_row)

    # –†—è–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ö–Ω–æ–ø–∫–∞ "‚è™" (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=GroupNavigation(
                        action="prev_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=1,
                        user_type=user_type,
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if has_prev:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=GroupNavigation(
                        action="prev_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=page - 1,
                        user_type=user_type,
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ö–Ω–æ–ø–∫–∞ "‚û°Ô∏è" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if has_next:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=GroupNavigation(
                        action="next_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=page + 1,
                        user_type=user_type,
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ö–Ω–æ–ø–∫–∞ "‚è≠Ô∏è" (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=GroupNavigation(
                        action="next_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=total_pages,
                        user_type=user_type,
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    if current_date.date() != today:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üìç –°–µ–≥–æ–¥–Ω—è",
                    callback_data=GroupNavigation(
                        action="today",
                        date=today.strftime("%Y-%m-%d"),
                        page=1,
                        user_type=user_type,
                    ).pack(),
                ),
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if from_group_mgmt:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data=MainMenu(menu="group_management").pack(),
                ),
                InlineKeyboardButton(
                    text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
                ),
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="schedule").pack()
                ),
                InlineKeyboardButton(
                    text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
                ),
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)
