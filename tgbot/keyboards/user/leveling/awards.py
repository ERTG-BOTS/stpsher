from typing import List

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.database.models import User
from infrastructure.database.repo.STP.award_usage import AwardUsageWithDetails
from tgbot.keyboards.mip.leveling.main import LevelingMenu
from tgbot.keyboards.user.main import MainMenu


class UseAwardMenu(CallbackData, prefix="use_award"):
    user_award_id: int


class AwardHistoryMenu(CallbackData, prefix="award_history"):
    menu: str = "history"
    page: int = 1


class AwardPurchaseMenu(CallbackData, prefix="award_purchase"):
    award_id: int
    page: int = 1


class AwardPurchaseConfirmMenu(CallbackData, prefix="award_buy_confirm"):
    award_id: int
    page: int = 1
    action: str  # "buy" or "back"


class AwardsMenu(CallbackData, prefix="awards"):
    menu: str
    page: int = 1
    award_id: int = 0


class AwardDetailMenu(CallbackData, prefix="award_detail"):
    user_award_id: int


class SellAwardMenu(CallbackData, prefix="sell_award"):
    user_award_id: int
    source_menu: str = "bought"  # "bought" –∏–ª–∏ "available"


class CancelActivationMenu(CallbackData, prefix="cancel_activation"):
    user_award_id: int


class DutyAwardActivationMenu(CallbackData, prefix="duty_activation"):
    user_award_id: int
    page: int = 1


class DutyAwardActionMenu(CallbackData, prefix="duty_action"):
    user_award_id: int
    action: str  # "approve" or "reject"
    page: int = 1


class DutyActivationListMenu(CallbackData, prefix="duty_list"):
    menu: str = "duty_activation"
    page: int = 1


def get_status_emoji(status: str) -> str:
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
        "canceled": "‚ùå",
        "rejected": "‚õî",
    }
    return status_emojis.get(status, "‚ùì")


def awards_kb(user: User = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥.

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = []

    # Add duty activation button first if user is a duty (role 3)
    if user and user.role == 3:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥",
                    callback_data=LevelingMenu(menu="awards_activation").pack(),
                ),
            ]
        )

    buttons.extend(
        [
            [
                InlineKeyboardButton(
                    text="‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ",
                    callback_data=AwardsMenu(menu="available").pack(),
                ),
                InlineKeyboardButton(
                    text="‚ú¥Ô∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ",
                    callback_data=AwardsMenu(menu="executed").pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ", callback_data=AwardsMenu(menu="all").pack()
                ),
            ],
        ]
    )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def available_awards_paginated_kb(
    current_page: int, total_pages: int, page_awards: list = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
    """
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Ä—è–¥)
    if page_awards:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        start_idx = (current_page - 1) * 5  # 5 –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

        for i in range(0, len(page_awards), 2):
            award_row = []

            # –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ —Ä—è–¥—É
            first_award = page_awards[i]
            first_award_number = start_idx + i + 1
            award_row.append(
                InlineKeyboardButton(
                    text=f"{first_award_number}. {first_award.name}",
                    callback_data=AwardPurchaseMenu(
                        award_id=first_award.id, page=current_page
                    ).pack(),
                )
            )

            # –í—Ç–æ—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(page_awards):
                second_award = page_awards[i + 1]
                second_award_number = start_idx + i + 2
                award_row.append(
                    InlineKeyboardButton(
                        text=f"{second_award_number}. {second_award.name}",
                        callback_data=AwardPurchaseMenu(
                            award_id=second_award.id, page=current_page
                        ).pack(),
                    )
                )

            buttons.append(award_row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=AwardsMenu(menu="available", page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=AwardsMenu(
                        menu="available", page=current_page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=AwardsMenu(
                        menu="available", page=current_page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=AwardsMenu(menu="available", page=total_pages).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigation_row = [
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="awards").pack()
        ),
        InlineKeyboardButton(
            text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
        ),
    ]
    buttons.append(navigation_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def award_confirmation_kb(award_id: int, page: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ö—É–ø–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                callback_data=AwardPurchaseConfirmMenu(
                    award_id=award_id, page=page, action="buy"
                ).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=AwardPurchaseConfirmMenu(
                    award_id=award_id, page=page, action="back"
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duty_award_activation_kb(
    current_page: int, total_pages: int, page_awards: list = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –¥–µ–∂—É—Ä–Ω—ã–º–∏
    """
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥ –∏–∑-–∑–∞ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)
    if page_awards:
        start_idx = (current_page - 1) * 5  # 5 –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

        for i, award_detail in enumerate(page_awards):
            user_award = award_detail.user_award
            award_info = award_detail.award_info
            award_number = start_idx + i + 1

            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"{award_number}. {award_info.name}",
                        callback_data=DutyAwardActivationMenu(
                            user_award_id=user_award.id, page=current_page
                        ).pack(),
                    )
                ]
            )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=DutyActivationListMenu(
                        menu="duty_activation", page=1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=DutyActivationListMenu(
                        menu="duty_activation", page=current_page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=DutyActivationListMenu(
                        menu="duty_activation", page=current_page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=DutyActivationListMenu(
                        menu="duty_activation", page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigation_row = [
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="awards").pack()
        ),
        InlineKeyboardButton(
            text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
        ),
    ]
    buttons.append(navigation_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def duty_award_detail_kb(user_award_id: int, current_page: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–µ–∂—É—Ä–Ω—ã–º"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=DutyAwardActionMenu(
                    user_award_id=user_award_id, action="approve", page=current_page
                ).pack(),
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=DutyAwardActionMenu(
                    user_award_id=user_award_id, action="reject", page=current_page
                ).pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=DutyActivationListMenu(
                    menu="duty_activation", page=current_page
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def awards_paginated_kb(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_row = []

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        # [‚è™] [‚¨ÖÔ∏è] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] [‚û°Ô∏è] [‚è≠Ô∏è]

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=AwardsMenu(menu="all", page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=AwardsMenu(menu="all", page=current_page - 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=AwardsMenu(menu="all", page=current_page + 1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=AwardsMenu(menu="all", page=total_pages).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigation_row = [
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="awards").pack()
        ),
        InlineKeyboardButton(
            text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
        ),
    ]
    buttons.append(navigation_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def award_history_kb(
    user_awards: List[AwardUsageWithDetails],
    current_page: int = 1,
    awards_per_page: int = 8,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 2 –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ä—è–¥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (4 —Ä—è–¥–∞).
    """
    buttons = []

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_awards = len(user_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (current_page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = user_awards[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–¥ (2 –≤ —Ä—è–¥)
    for i in range(0, len(page_awards), 2):
        row = []

        # –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ —Ä—è–¥—É
        award_detail = page_awards[i]
        user_award = award_detail.user_award
        award_info = award_detail.award_info

        date_str = user_award.bought_at.strftime("%d.%m.%y")
        status_emoji = get_status_emoji(user_award.status)
        usage_info = f"({award_detail.current_usages}/{award_detail.max_usages})"
        button_text = f"{status_emoji} {usage_info} {award_info.name} ({date_str})"

        row.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=AwardDetailMenu(user_award_id=user_award.id).pack(),
            )
        )

        # –í—Ç–æ—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_awards):
            award_detail = page_awards[i + 1]
            user_award = award_detail.user_award
            award_info = award_detail.award_info

            date_str = user_award.bought_at.strftime("%d.%m.%y")
            status_emoji = get_status_emoji(user_award.status)
            usage_info = f"({award_detail.current_usages}/{award_detail.max_usages})"
            button_text = f"{status_emoji} {usage_info} {award_info.name} ({date_str})"

            row.append(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=AwardDetailMenu(user_award_id=user_award.id).pack(),
                )
            )

        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: [‚è™] [‚¨ÖÔ∏è] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] [‚û°Ô∏è] [‚è≠Ô∏è]

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=AwardHistoryMenu(menu="history", page=1).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=AwardHistoryMenu(
                        menu="history", page=current_page - 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=AwardHistoryMenu(
                        menu="history", page=current_page + 1
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if current_page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=AwardHistoryMenu(
                        menu="history", page=total_pages
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="awards").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def to_awards_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu="awards").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def award_detail_back_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=AwardsMenu(menu="executed").pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def award_detail_kb(
    user_award_id: int,
    can_use: bool = False,
    can_sell: bool = False,
    can_cancel: bool = False,
    source_menu: str = "bought",
) -> InlineKeyboardMarkup:
    buttons = []

    if can_use:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                    callback_data=UseAwardMenu(user_award_id=user_award_id).pack(),
                )
            ]
        )

    if can_sell:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üí∏ –í–µ—Ä–Ω—É—Ç—å",
                    callback_data=SellAwardMenu(
                        user_award_id=user_award_id, source_menu=source_menu
                    ).pack(),
                )
            ]
        )

    if can_cancel:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úãüèª –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é",
                    callback_data=CancelActivationMenu(
                        user_award_id=user_award_id
                    ).pack(),
                )
            ]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=AwardsMenu(menu="executed").pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def award_purchase_success_kb(user_award_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                callback_data=UseAwardMenu(user_award_id=user_award_id).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="üí∏ –í–µ—Ä–Ω—É—Ç—å",
                callback_data=SellAwardMenu(
                    user_award_id=user_award_id,
                    source_menu="available",
                ).pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùáÔ∏è –ö –¥–æ—Å—Ç—É–ø–Ω—ã–º",
                callback_data=AwardsMenu(menu="available").pack(),
            ),
            InlineKeyboardButton(
                text="‚ú¥Ô∏è –ö –∫—É–ø–ª–µ–Ω–Ω—ã–º",
                callback_data=AwardsMenu(menu="executed").pack(),
            ),
        ],
        [
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
