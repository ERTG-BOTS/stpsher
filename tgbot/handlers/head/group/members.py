import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.handlers.user.schedule.main import schedule_service
from tgbot.keyboards.head.group.main import GroupManagementMenu
from tgbot.keyboards.head.group.members import (
    HeadGroupMembersMenu,
    HeadMemberActionMenu,
    HeadMemberDetailMenu,
    HeadMemberScheduleMenu,
    HeadMemberScheduleNavigation,
    get_month_name_by_index,
    head_group_members_kb,
    head_member_detail_kb,
    head_member_schedule_kb,
)

head_group_members_router = Router()
head_group_members_router.message.filter(F.chat.type == "private", HeadFilter())
head_group_members_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_group_members_router.callback_query(
    GroupManagementMenu.filter(F.menu == "members")
)
async def group_mgmt_members_cb(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–∞–≤–∞ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ)
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.message.edit_text(
            """‚ùå <b>–û—à–∏–±–∫–∞</b>
            
–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(current_user.fullname)

    if not group_members:
        await callback.message.edit_text(
            """üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.
            
<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>""",
            reply_markup=head_group_members_kb([], current_page=1),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    total_members = len(group_members)

    message_text = f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_members_kb(group_members, current_page=1),
    )


@head_group_members_router.callback_query(HeadGroupMembersMenu.filter())
async def group_members_pagination_cb(
    callback: CallbackQuery,
    callback_data: HeadGroupMembersMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ)
    current_user = await stp_repo.employee.get_user(user_id=callback.from_user.id)

    if not current_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(current_user.fullname)

    if not group_members:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    total_members = len(group_members)
    page = callback_data.page

    message_text = f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_group_members_kb(group_members, current_page=page),
    )


@head_group_members_router.callback_query(HeadMemberDetailMenu.filter())
async def member_detail_cb(
    callback: CallbackQuery,
    callback_data: HeadMemberDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
    all_users = await stp_repo.employee.get_users()
    member = None
    for user in all_users:
        if user.id == callback_data.member_id:
            member = user
            break

    if not member:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    message_text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}
<b>Email:</b> {member.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not member.user_id:
        message_text += "\n<b>–°—Ç–∞—Ç—É—Å:</b> üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ"

    message_text += "\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"

    await callback.message.edit_text(
        message_text,
        reply_markup=head_member_detail_kb(member.id, callback_data.page),
        parse_mode="HTML",
    )


@head_group_members_router.callback_query(HeadMemberActionMenu.filter())
async def member_action_cb(
    callback: CallbackQuery,
    callback_data: HeadMemberActionMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/KPI)"""
    # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
    all_users = await stp_repo.employee.get_users()
    member = None
    for user in all_users:
        if user.id == callback_data.member_id:
            member = user
            break

    if not member:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if callback_data.action == "schedule":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_callback_data = HeadMemberScheduleMenu(
            member_id=member.id, month_idx=0, page=callback_data.page
        )
        await view_member_schedule(callback, schedule_callback_data, stp_repo)
        return

    elif callback_data.action == "kpi":
        message_text = f"""üìä <b>KPI: {member.fullname}</b>

<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""

    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return

    await callback.message.edit_text(
        message_text,
        reply_markup=head_member_detail_kb(member.id, callback_data.page),
    )


@head_group_members_router.callback_query(HeadMemberScheduleMenu.filter())
async def view_member_schedule(
    callback: CallbackQuery,
    callback_data: HeadMemberScheduleMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    requested_month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=current_month, compact=True
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@head_group_members_router.callback_query(HeadMemberScheduleNavigation.filter())
async def navigate_member_schedule(
    callback: CallbackQuery,
    callback_data: HeadMemberScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã"""
    member_id = callback_data.member_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        # –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
        all_users = await stp_repo.employee.get_users()
        member = None
        for user in all_users:
            if user.id == member_id:
                member = user
                break

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=month_to_display, compact=compact
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=head_member_schedule_kb(
                    member_id=member_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
