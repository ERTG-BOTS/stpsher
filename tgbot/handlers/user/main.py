from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.keyboards.user.main import MainMenu, auth_kb, main_kb

user_router = Router()
user_router.message.filter(F.chat.type == "private")
user_router.callback_query.filter(F.message.chat.type == "private")


@user_router.message(CommandStart())
async def user_start_cmd(message: Message, user: User, stp_repo: RequestsRepo):
    if not user:
        await message.answer(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    user_achievements = await stp_repo.user_achievement.get_user_achievements(
        user.user_id
    )
    user_awards = await stp_repo.user_award.get_user_awards(user.user_id)
    achievements_sum = await stp_repo.user_achievement.get_user_achievements_sum(
        user_id=user.user_id
    )
    awards_sum = await stp_repo.user_award.get_user_awards_sum(user_id=user.user_id)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö
    most_frequent_achievement = (
        await stp_repo.user_achievement.get_most_frequent_achievement(
            user_id=user.user_id
        )
    )
    most_used_award = await stp_repo.user_award.get_most_used_award(
        user_id=user.user_id
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if most_frequent_achievement:
        achievement_text = (
            f"{most_frequent_achievement[0]} ({most_frequent_achievement[1]}x)"
        )
    else:
        achievement_text = "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–π —á–∞—Å—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    if most_used_award:
        award_text = f"{most_used_award[0]} ({most_used_award[1]}x)"
    else:
        award_text = "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"

    # TODO –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.fullname}</b>!

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –°–¢–ü

<b>‚öîÔ∏è –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> {round(achievements_sum / 100)}
<b>‚ú® –ö–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤:</b> {achievements_sum - awards_sum} –±–∞–ª–ª–æ–≤

<blockquote><b>üìä –ë–∞–ª–∞–Ω—Å</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {achievements_sum} –±–∞–ª–ª–æ–≤
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {awards_sum} –±–∞–ª–ª–æ–≤

<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>
<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</b> {len(user_achievements)}
<b>–°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ:</b> {achievement_text}

<b>üèÖ –ù–∞–≥—Ä–∞–¥—ã</b>
<b>–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ:</b> {len(user_awards)}
<b>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è:</b> {award_text}</blockquote>""",
        reply_markup=main_kb(),
    )


@user_router.callback_query(MainMenu.filter(F.menu == "main"))
async def user_start_cb(callback: CallbackQuery, user: User, stp_repo: RequestsRepo):
    if not user:
        await callback.message.edit_text(
            """üëã –ü—Ä–∏–≤–µ—Ç

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –°–¢–ü

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏""",
            reply_markup=auth_kb(),
        )
        return

    user_achievements = await stp_repo.user_achievement.get_user_achievements(
        user.user_id
    )
    user_awards = await stp_repo.user_award.get_user_awards(user.user_id)
    achievements_sum = await stp_repo.user_achievement.get_user_achievements_sum(
        user_id=user.user_id
    )
    awards_sum = await stp_repo.user_award.get_user_awards_sum(user_id=user.user_id)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö
    most_frequent_achievement = (
        await stp_repo.user_achievement.get_most_frequent_achievement(
            user_id=user.user_id
        )
    )
    most_used_award = await stp_repo.user_award.get_most_used_award(
        user_id=user.user_id
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if most_frequent_achievement:
        achievement_text = (
            f"{most_frequent_achievement[0]} ({most_frequent_achievement[1]}x)"
        )
    else:
        achievement_text = "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–π —á–∞—Å—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã
    if most_used_award:
        award_text = f"{most_used_award[0]} ({most_used_award[1]}x)"
    else:
        award_text = "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥"

    # TODO –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
    await callback.message.edit_text(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.fullname}</b>!

–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –°–¢–ü

<b>‚öîÔ∏è –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:</b> {round(achievements_sum / 100)}
<b>‚ú® –ö–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤:</b> {achievements_sum - awards_sum} –±–∞–ª–ª–æ–≤

<blockquote><b>üìä –ë–∞–ª–∞–Ω—Å</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {achievements_sum} –±–∞–ª–ª–æ–≤
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {awards_sum} –±–∞–ª–ª–æ–≤

<b>üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>
<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</b> {len(user_achievements)}
<b>–°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ:</b> {achievement_text}

<b>üèÖ –ù–∞–≥—Ä–∞–¥—ã</b>
<b>–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ:</b> {len(user_awards)}
<b>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è:</b> {award_text}</blockquote>""",
        reply_markup=main_kb(),
    )
