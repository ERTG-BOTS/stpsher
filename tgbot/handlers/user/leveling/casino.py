import asyncio
import logging
from functools import lru_cache
from typing import List

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.user.leveling.casino import (
    CasinoMenu,
    back_to_casino_kb,
    betting_kb,
    casino_main_kb,
    play_again_kb,
)
from tgbot.keyboards.user.main import MainMenu

user_leveling_casino_router = Router()
user_leveling_casino_router.message.filter(
    F.chat.type == "private",
)
user_leveling_casino_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@lru_cache(maxsize=64)
def get_score_change(dice_value: int) -> int:
    if dice_value in (1, 22, 43):  # three-of-a-kind (except 777)
        return 7
    elif dice_value in (
        16,
        32,
        48,
        52,
        56,
        60,
        61,
        62,
        63,
    ):  # all combinations with two 7's
        return 5
    elif dice_value == 64:  # jackpot (777)
        return 10
    else:
        return -1


@lru_cache(maxsize=64)
def get_combo_parts(dice_value: int) -> List[str]:
    values = ["bar", "grapes", "lemon", "seven"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return result


@lru_cache(maxsize=64)
def get_combo_text(dice_value: int) -> str:
    parts: List[str] = get_combo_parts(dice_value)
    emoji_map = {"bar": "üç´", "grapes": "üçá", "lemon": "üçã", "seven": "7Ô∏è‚É£"}

    emoji_parts = [emoji_map.get(part, part) for part in parts]
    return " ".join(emoji_parts)


def get_slot_result_multiplier(slot_value: int) -> tuple[str, float]:
    score_change = get_score_change(slot_value)
    combo_text = get_combo_text(slot_value)

    if score_change == 10:  # –î–∂–µ–∫–ø–æ—Ç (777)
        return f"üé∞ {combo_text} - –î–∂–µ–∫–ø–æ—Ç! üé∞", 5.0
    elif score_change == 7:  # –¢—Ä–∏ –≤ —Ä—è–¥ –ª—é–±—ã—Ö
        return f"üî• {combo_text} - –¢—Ä–∏ –≤ —Ä—è–¥! üî•", 3.5
    elif score_change == 5:  # –î–≤–µ —Å–µ–º–µ—Ä–∫–∏
        return f"‚ú® {combo_text} - –î–≤–µ —Å–µ–º–µ—Ä–∫–∏! ‚ú®", 2.5
    else:  # loss
        return f"{combo_text}", 0.0


def get_dice_result_multiplier(dice_value: int) -> tuple[str, float]:
    # Target: Slots have 20.31% win rate, 58.59% expected return
    # Dice: Only 6 wins to match slots more closely
    if dice_value == 6:  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - 1/6 = 16.67%
        # Expected return: 16.67% √ó 3.5 = 58.35% (matches slots' 58.59%)
        return f"üé≤ {dice_value} - –î–∂–µ–∫–ø–æ—Ç! üé≤", 3.5
    else:  # dice_value 1,2,3,4,5 - –ü—Ä–æ–∏–≥—Ä—ã—à (5/6 = 83.33%)
        return f"üé≤ {dice_value}", 0.0


@user_leveling_casino_router.callback_query(MainMenu.filter(F.menu == "casino"))
async def casino_main_menu(
    callback: CallbackQuery, user: User, stp_repo: MainRequestsRepo
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"""
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    await callback.message.edit_text(
        f"""üé∞ <b>–ö–∞–∑–∏–Ω–æ</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ

üçÄ <b>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É!</b>""",
        reply_markup=casino_main_kb(),
    )

    logger.info(
        f"[–ö–∞–∑–∏–Ω–æ] {callback.from_user.username} ({callback.from_user.id}) –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"
    )


@user_leveling_casino_router.callback_query(CasinoMenu.filter(F.menu == "main"))
async def casino_main_menu_back(
    callback: CallbackQuery, user: User, stp_repo: MainRequestsRepo
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"""
    await casino_main_menu(callback, user, stp_repo)


@user_leveling_casino_router.callback_query(CasinoMenu.filter(F.menu == "slots"))
async def casino_slot_betting(
    callback: CallbackQuery, user: User, stp_repo: MainRequestsRepo
):
    """–í—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã"""
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    if user_balance < 10:
        await callback.message.edit_text(
            """üíî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 –±–∞–ª–ª–æ–≤
–í—ã–ø–æ–ª–Ω—è–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–ª–æ–≤!""",
            reply_markup=back_to_casino_kb(),
        )
        return

    await callback.message.edit_text(
        f"""üé∞ <b>–ö–∞–∑–∏–Ω–æ - –°–ª–æ—Ç—ã</b>

‚ú® <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</b>
1. –ù–∞–∑–Ω–∞—á—å —Å—Ç–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
2. –ñ–º–∏ <b>üé∞ –ö—Ä—É—Ç–∏—Ç—å üé∞</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé∞ –î–∂–µ–∫–ø–æ—Ç - –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x5
üî• –¢—Ä–∏ –≤ —Ä—è–¥ ‚Üí x3.5  
‚ú® –î–≤–µ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x2.5</blockquote>""",
        reply_markup=betting_kb(user_balance, game_type="slots"),
    )


@user_leveling_casino_router.callback_query(CasinoMenu.filter(F.menu == "dice"))
async def casino_dice_betting(
    callback: CallbackQuery, user: User, stp_repo: MainRequestsRepo
):
    """–í—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    if user_balance < 10:
        await callback.message.edit_text(
            """üíî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 –±–∞–ª–ª–æ–≤
–í—ã–ø–æ–ª–Ω—è–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–ª–æ–≤!""",
            reply_markup=back_to_casino_kb(),
        )
        return

    await callback.message.edit_text(
        f"""üé≤ <b>–ö–∞–∑–∏–Ω–æ - –ö–æ—Å—Ç–∏</b>

‚ú® <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</b>
1. –ù–∞–∑–Ω–∞—á—å —Å—Ç–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
2. –ñ–º–∏ <b>üé≤ –ö–∏–Ω—É—Ç—å üé≤</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé≤ –í—ã–ø–∞–ª–æ 6 ‚Üí x3.5 (–î–∂–µ–∫–ø–æ—Ç!)</blockquote>""",
        reply_markup=betting_kb(user_balance, game_type="dice"),
    )


@user_leveling_casino_router.callback_query(CasinoMenu.filter(F.menu == "rate"))
async def casino_rate_adjustment(
    callback: CallbackQuery,
    callback_data: CasinoMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏"""
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)
    new_rate = callback_data.current_rate
    game_type = callback_data.game_type

    if game_type == "dice":
        await callback.message.edit_text(
            f"""üé≤ <b>–ö–∞–∑–∏–Ω–æ - –ö–æ—Å—Ç–∏</b>

‚ú® <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</b>
1. –ù–∞–∑–Ω–∞—á—å —Å—Ç–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
2. –ñ–º–∏ <b>üé≤ –ö–∏–Ω—É—Ç—å üé≤</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé≤ –í—ã–ø–∞–ª–æ 6 ‚Üí x3.5 (–î–∂–µ–∫–ø–æ—Ç!)</blockquote>""",
            reply_markup=betting_kb(user_balance, new_rate, game_type),
        )
    else:
        await callback.message.edit_text(
            f"""üé∞ <b>–ö–∞–∑–∏–Ω–æ - –°–ª–æ—Ç—ã</b>

‚ú® <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} –±–∞–ª–ª–æ–≤

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</b>
1. –ù–∞–∑–Ω–∞—á—å —Å—Ç–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
2. –ñ–º–∏ <b>üé∞ –ö—Ä—É—Ç–∏—Ç—å üé∞</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé∞ –î–∂–µ–∫–ø–æ—Ç - –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x5
üî• –¢—Ä–∏ –≤ —Ä—è–¥ ‚Üí x3.5  
‚ú® –î–≤–µ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x2.5</blockquote>""",
            reply_markup=betting_kb(user_balance, new_rate, game_type),
        )


@user_leveling_casino_router.callback_query(CasinoMenu.filter(F.menu == "bet"))
async def casino_game(
    callback: CallbackQuery,
    callback_data: CasinoMenu,
    user: User,
    stp_repo: MainRequestsRepo,
):
    """–ò–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ (—Å–ª–æ—Ç—ã –∏–ª–∏ –∫–æ—Å—Ç–∏)"""
    bet_amount = callback_data.bet_amount
    game_type = callback_data.game_type
    user_balance = await stp_repo.transaction.get_user_balance(user.user_id)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    if bet_amount > user_balance:
        await callback.message.edit_text(
            """‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –ø–æ–º–µ–Ω—å—à–µ –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤!""",
            reply_markup=back_to_casino_kb(),
        )
        return

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    if game_type == "dice":
        await callback.message.edit_text(
            f"""üé≤ <b>–ö–∏–¥–∞–µ–º –∫–æ—Å—Ç–∏...</b>

üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet_amount} –±–∞–ª–ª–æ–≤
‚è∞ <b>–ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé≤ –í—ã–ø–∞–ª–æ 6 ‚Üí x3.5 (–î–∂–µ–∫–ø–æ—Ç!)</blockquote>"""
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–æ—Å—Ç–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π!
        dice_result = await callback.message.answer_dice(emoji="üé≤")
        dice_value = dice_result.dice.value

        # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ—Å—Ç–∏ (–æ–∫–æ–ª–æ 2 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text, multiplier = get_dice_result_multiplier(dice_value)
        game_name = "–∫–æ—Å—Ç—è—Ö"
    else:
        await callback.message.edit_text(
            f"""üé∞ <b>–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω...</b>

üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet_amount} –±–∞–ª–ª–æ–≤
‚è∞ <b>–ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...</b>

<blockquote expandable>üíé <b>–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥:</b>
üé∞ –î–∂–µ–∫–ø–æ—Ç - –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x5
üî• –¢—Ä–∏ –≤ —Ä—è–¥ ‚Üí x3.5  
‚ú® –î–≤–µ —Å–µ–º–µ—Ä–∫–∏ ‚Üí x2.5</blockquote>"""
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π!
        slot_result = await callback.message.answer_dice(emoji="üé∞")
        slot_value = slot_result.dice.value

        # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç–∞ (–æ–∫–æ–ª–æ 2 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text, multiplier = get_slot_result_multiplier(slot_value)
        game_name = "—Å–ª–æ—Ç–∞—Ö"

    if multiplier > 0:
        # –í—ã–∏–≥—Ä—ã—à
        winnings = int(bet_amount * multiplier)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
        await stp_repo.transaction.add_transaction(
            user_id=user.user_id,
            type="earn",
            source_type="casino",
            amount=winnings,
            comment=f"–í—ã–∏–≥—Ä—ã—à –≤ {game_name}: {result_text} (x{multiplier})",
        )

        new_balance = await stp_repo.transaction.get_user_balance(user.user_id)
        final_result = f"""üéâ <b>–ü–æ–±–µ–¥–∞</b> üéâ

{result_text}

üî• –í—ã–∏–≥—Ä—ã—à: {bet_amount} x{multiplier} = {winnings} –±–∞–ª–ª–æ–≤!
‚ú® –ë–∞–ª–∞–Ω—Å: {new_balance - bet_amount} ‚Üí {new_balance} –±–∞–ª–ª–æ–≤"""

        logger.info(
            f"[–ö–∞–∑–∏–Ω–æ] {callback.from_user.username} –≤—ã–∏–≥—Ä–∞–ª {winnings} –±–∞–ª–ª–æ–≤ –≤ {game_name} ({result_text})"
        )

    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        await stp_repo.transaction.add_transaction(
            user_id=user.user_id,
            type="spend",
            source_type="casino",
            amount=bet_amount,
            comment=f"–ü—Ä–æ–∏–≥—Ä—ã—à –≤ {game_name}: {result_text}",
        )

        new_balance = await stp_repo.transaction.get_user_balance(user.user_id)
        final_result = f"""üíî <b>–ü—Ä–æ–∏–≥—Ä—ã—à</b>

{result_text}

üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: -{bet_amount} –±–∞–ª–ª–æ–≤
‚ú® –ë–∞–ª–∞–Ω—Å: {new_balance + bet_amount} ‚Üí {new_balance} –±–∞–ª–ª–æ–≤

<i>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ - —É–¥–∞—á–∞ —Ä—è–¥–æ–º!</i>"""

        logger.info(
            f"[–ö–∞–∑–∏–Ω–æ] {callback.from_user.username} –ø—Ä–æ–∏–≥—Ä–∞–ª {bet_amount} –±–∞–ª–ª–æ–≤ –≤ {game_name} ({result_text})"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.answer(
        final_result,
        reply_markup=play_again_kb(bet_amount, game_type),
    )
