import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.keyboards.user.main import MainMenu
from tgbot.keyboards.user.search.main import UserSearchMenu, user_search_main_kb
from tgbot.keyboards.user.search.search import (
    UserSearchUserResult,
    user_search_back_kb,
    user_search_results_kb,
    user_user_detail_kb,
)
from tgbot.misc.states.search import SearchEmployee
from tgbot.services.search import SearchService

user_search_router = Router()

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–æ–ª–∏ 1 –∏ 3)
user_search_router.message.filter(F.chat.type == "private")
user_search_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10


@user_search_router.callback_query(MainMenu.filter(F.menu == "search"))
async def user_search_main_menu(
    callback: CallbackQuery, state: FSMContext, user: Employee
):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏ 1 –∏ 3
    if user.role not in [1, 3]:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<i>–í—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–∫–æ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–±—â–∏–º –ø–æ–∏—Å–∫–æ–º</i>""",
        reply_markup=user_search_main_kb(),
    )


@user_search_router.callback_query(UserSearchMenu.filter())
async def user_search_menu_handler(
    callback: CallbackQuery,
    callback_data: UserSearchMenu,
    stp_repo: MainRequestsRepo,
    state: FSMContext,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user.role not in [1, 3]:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    menu = callback_data.menu

    if menu == "specialists":
        await show_user_specialists(callback, callback_data, stp_repo)
    elif menu == "heads":
        await show_user_heads(callback, callback_data, stp_repo)
    elif menu == "start_search":
        await start_user_search(callback, state)


async def show_user_specialists(
    callback: CallbackQuery,
    callback_data: UserSearchMenu,
    stp_repo: MainRequestsRepo,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    specialists = SearchService.filter_users_by_type(all_users, "specialists")

    if not specialists:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    specialists.sort(key=lambda u: u.fullname)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(specialists)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = specialists[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</b>

–ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}""",
        reply_markup=user_search_results_kb(
            page_users,
            page,
            total_pages,
            "specialists",
        ),
    )


async def show_user_heads(
    callback: CallbackQuery,
    callback_data: UserSearchMenu,
    stp_repo: MainRequestsRepo,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    heads = SearchService.filter_users_by_type(all_users, "heads")

    if not heads:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    heads.sort(key=lambda u: u.fullname)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(heads)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = heads[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏</b>

–ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}""",
        reply_markup=user_search_results_kb(
            page_users,
            page,
            total_pages,
            "heads",
        ),
    )


async def start_user_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    bot_message = await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
        reply_markup=user_search_back_kb(),
    )

    await state.update_data(bot_message_id=bot_message.message_id)
    await state.set_state(SearchEmployee.waiting_search_query)


@user_search_router.message(SearchEmployee.waiting_search_query)
async def process_user_search_query(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    search_query = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if not search_query or len(search_query) < 2:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=user_search_back_kb(),
        )
        return

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û
        found_users = await stp_repo.employee.get_users_by_fio_parts(
            search_query, limit=50
        )

        if not found_users:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=f"""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
                reply_markup=user_search_back_kb(),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sorted_users = sorted(
            found_users,
            key=lambda u: (
                search_query.lower() not in u.fullname.lower(),
                u.fullname,
            ),
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_found = len(sorted_users)
        total_pages = (total_found + USERS_PER_PAGE - 1) // USERS_PER_PAGE
        page_users = sorted_users[:USERS_PER_PAGE]

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∞–π–¥–µ–Ω–æ: {total_found} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤""",
            reply_markup=user_search_results_kb(
                page_users,
                1,
                total_pages,
                "search_results",
            ),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=user_search_back_kb(),
        )


@user_search_router.callback_query(UserSearchUserResult.filter())
async def show_user_search_details(
    callback: CallbackQuery,
    callback_data: UserSearchUserResult,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user.role not in [1, 3]:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    user_id = callback_data.user_id
    return_to = callback_data.return_to

    try:
        target_user = await stp_repo.employee.get_user(user_id=user_id)
        user_head = (
            await stp_repo.employee.get_user(fullname=target_user.head)
            if target_user.head
            else None
        )

        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        user_info = SearchService.format_user_info_role_based(
            target_user, user_head, None, user.role
        )

        await callback.message.edit_text(
            user_info,
            reply_markup=user_user_detail_kb(target_user, return_to),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
