import logging
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from sqlalchemy import Sequence
from tgbot.keyboards.head.group.game.rating import RatingMenu, rating_menu_kb
from tgbot.keyboards.head.group.main import GroupManagementMenu
from tgbot.keyboards.head.group.members import short_name

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.misc.helpers import format_fullname

head_group_rating_router = Router()
head_group_rating_router.message.filter(F.chat.type == "private", HeadFilter())
head_group_rating_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


def get_kpi_data_by_period(kpi_repo, period: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π KPI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞"""
    period_repos = {
        "day": kpi_repo.spec_day_kpi,
        "week": kpi_repo.spec_week_kpi,
        "month": kpi_repo.spec_month_kpi,
    }
    return period_repos.get(period, kpi_repo.spec_day_kpi)


def get_period_display_text(period: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –¥–∞—Ç"""
    now = datetime.now()

    if period == "day":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        yesterday = now - timedelta(days=1)
        return f"–∑–∞ {yesterday.strftime('%d.%m')}"

    elif period == "week":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ø–Ω-–≤—Å)
        days_since_monday = now.weekday()
        current_monday = now - timedelta(days=days_since_monday)
        current_sunday = current_monday + timedelta(days=6)
        return f"–∑–∞ {current_monday.strftime('%d.%m')} - {current_sunday.strftime('%d.%m')}"

    elif period == "month":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        if now.day < 4:
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –º–µ–Ω—å—à–µ 4 —á–∏—Å–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∞–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            target_date = now - timedelta(days=now.day + 32)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            if now.month == 1:
                target_date = datetime(now.year - 1, 12, 1)
            else:
                target_date = datetime(now.year, now.month - 1, 1)

        month_names = [
            "—è–Ω–≤–∞—Ä—å",
            "—Ñ–µ–≤—Ä–∞–ª—å",
            "–º–∞—Ä—Ç",
            "–∞–ø—Ä–µ–ª—å",
            "–º–∞–π",
            "–∏—é–Ω—å",
            "–∏—é–ª—å",
            "–∞–≤–≥—É—Å—Ç",
            "—Å–µ–Ω—Ç—è–±—Ä—å",
            "–æ–∫—Ç—è–±—Ä—å",
            "–Ω–æ—è–±—Ä—å",
            "–¥–µ–∫–∞–±—Ä—å",
        ]
        return f"–∑–∞ {month_names[target_date.month - 1]}"

    return ""


def get_latest_update_date(kpi_data: list) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ KPI –¥–∞–Ω–Ω—ã—Ö"""
    if not kpi_data:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è KPI
    latest_date = None
    for kpi in kpi_data:
        if hasattr(kpi, "kpi_extract_date") and kpi.kpi_extract_date:
            if latest_date is None or kpi.kpi_extract_date > latest_date:
                latest_date = kpi.kpi_extract_date

    if latest_date:
        return latest_date.strftime("%d.%m.%Y %H:%M")
    else:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def format_target_rating_message(
    group_members: list, premium_data: list, period_data: list, period: str = "day"
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ü–µ–ª—è–º (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ü–µ–ª–µ–π)"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ —Å –¥–∞—Ç–∞–º–∏
    period_display = get_period_display_text(period)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    premium_dict = {premium.fullname: premium for premium in premium_data}
    period_dict = {kpi.fullname: kpi for kpi in period_data}

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Ü–µ–ª–µ–π
    target_groups = {}
    for member in group_members:
        premium = premium_dict.get(member.fullname)
        period_kpi = period_dict.get(member.fullname)
        if premium and premium.target_type and period_kpi:
            target_type = premium.target_type

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if "AHT" in target_type:
                target_value = getattr(period_kpi, "aht", None)
            elif "–ü—Ä–æ–¥–∞–∂–∞" in target_type:
                target_value = getattr(period_kpi, "sales_count", None)
            else:
                target_value = None

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –æ–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ 0.0
            if target_value is not None and target_value != 0 and target_value != 0.0:
                if target_type not in target_groups:
                    target_groups[target_type] = []
                target_groups[target_type].append({
                    "member": member,
                    "premium": premium,
                    "period_kpi": period_kpi,
                    "target_value": target_value,
                })

    if not target_groups:
        return f"""üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã</b>

üéØ –¶–µ–ª—å {period_display}

<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª—è—Ö</i>

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"""

    message = f"""üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã</b>

üéØ –¶–µ–ª—å {period_display}

"""

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —Ü–µ–ª–µ–π
    for target_type, members_data in target_groups.items():
        message += f"<b>{target_type}:</b>\n\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        reverse_sort = "AHT" not in target_type  # –î–ª—è AHT –º–µ–Ω—å—à–µ = –ª—É—á—à–µ

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ü–µ–ª–∏
        members_data.sort(key=lambda x: x["target_value"], reverse=reverse_sort)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ —Ç–æ–ø-10
        top_members = members_data[:10]

        for i, data in enumerate(top_members, 1):
            member = data["member"]
            period_kpi = data["period_kpi"]

            # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
            if i == 1:
                position_emoji = "ü•á"
            elif i == 2:
                position_emoji = "ü•à"
            elif i == 3:
                position_emoji = "ü•â"
            else:
                position_emoji = f"{i}."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if "AHT" in target_type:
                # –î–ª—è AHT –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                value_str = f"{data['target_value']}"
            elif "–ü—Ä–æ–¥–∞–∂–∞" in target_type:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º sales_count (sales_potential)
                sales_count = data["target_value"]
                sales_potential = getattr(period_kpi, "sales_potential", 0) or 0
                value_str = f"{sales_count} ({sales_potential} –ø–æ—Ç–µ–Ω—Ü.)"
            else:
                value_str = str(int(data["target_value"]))

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ period_kpi
            contacts_count = getattr(period_kpi, "contacts_count", 0) or 0
            contact_type = "—á–∞—Ç–æ–≤" if member.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"

            message += f"{position_emoji} <b>{
                format_fullname(
                    member.fullname, True, True, member.username, member.user_id
                )
            }</b>\n"
            message += f"{value_str} | {contacts_count} {contact_type}\n"

        message += "\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ period_data
    update_date = get_latest_update_date(period_data)
    message += f"\n<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: {update_date}</i>"

    return message


def format_rating_message(
    group_members: Sequence[Employee], kpi_data: list, metric: str, period: str = "day"
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≥—Ä—É–ø–ø—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –∏ –ø–µ—Ä–∏–æ–¥—É"""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å KPI –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    kpi_dict = {kpi.fullname: kpi for kpi in kpi_data}

    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    metric_names = {
        "csi": "üìä –û—Ü–µ–Ω–∫–∞",
        "pok": "üìû –û—Ç–∫–ª–∏–∫",
        "flr": "üìà FLR",
        "sales_count": "üéØ –¶–µ–ª—å",
    }

    metric_title = metric_names.get(metric, "üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ —Å –¥–∞—Ç–∞–º–∏
    period_display = get_period_display_text(period)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏)
    ratings_data = []

    for member in group_members:
        kpi = kpi_dict.get(member.fullname)
        if kpi:
            value = getattr(kpi, metric, None)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ 0.0
            if value is not None and value != 0 and value != 0.0:
                ratings_data.append({"member": member, "value": value, "kpi": kpi})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫)
    ratings_data.sort(key=lambda x: x["value"], reverse=True)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ —Ç–æ–ø-10
    ratings_data = ratings_data[:10]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã</b>

{metric_title} {period_display}

"""

    for i, data in enumerate(ratings_data, 1):
        member = data["member"]
        value = data["value"]
        kpi = data["kpi"]

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        if i == 1:
            position_emoji = "ü•á"
        elif i == 2:
            position_emoji = "ü•à"
        elif i == 3:
            position_emoji = "ü•â"
        else:
            position_emoji = f"{i}."

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        if metric in ["csi", "pok", "flr"]:
            value_str = f"{value:.2f}"
        else:
            value_str = str(int(value))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        contacts_count = getattr(kpi, "contacts_count", 0) or 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
        contact_type = "—á–∞—Ç–æ–≤" if member.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"

        message += f"{position_emoji} <b><a href='t.me/{member.username}'>{short_name(member.fullname)}</a></b>\n"
        message += f"{value_str} | {contacts_count} {contact_type}\n"

    if not ratings_data:
        message += "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</i>\n\n"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_date = get_latest_update_date([
        item["kpi"] for item in ratings_data if item["kpi"]
    ])
    message += f"\n<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç: {update_date}</i>"

    return message


@head_group_rating_router.callback_query(GroupManagementMenu.filter(F.menu == "rating"))
async def group_rating_cb(
    callback: CallbackQuery,
    user: Employee,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫–∏"""
    if not user:
        await callback.message.edit_text(
            """‚ùå <b>–û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(user.fullname)

    if not group_members:
        await callback.message.edit_text(
            """üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ

<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>""",
            reply_markup=rating_menu_kb("day", "csi"),
        )
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—Ü–µ–Ω–∫–µ (CSI) –∑–∞ –¥–µ–Ω—å
    fullnames = [member.fullname for member in group_members]
    kpi_repo_day = get_kpi_data_by_period(kpi_repo, "day")
    kpi_data = await kpi_repo_day.get_kpi_by_names(fullnames)
    message_text = format_rating_message(group_members, kpi_data, "csi", "day")

    await callback.message.edit_text(
        message_text,
        reply_markup=rating_menu_kb("day", "csi"),
    )


@head_group_rating_router.callback_query(RatingMenu.filter())
async def rating_metric_cb(
    callback: CallbackQuery,
    callback_data: RatingMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    metric = callback_data.metric
    period = callback_data.period

    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    group_members = await stp_repo.employee.get_users_by_head(user.fullname)

    if not group_members:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    try:
        fullnames = [member.fullname for member in group_members]

        if metric == "sales_count":
            # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ü–µ–ª–µ–π - –ø–æ–ª—É—á–∞–µ–º target_type –∏–∑ premium, –∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ period-specific —Ç–∞–±–ª–∏—Ü—ã
            premium_data = await kpi_repo.spec_premium.get_kpi_by_names(fullnames)
            kpi_repo_period = get_kpi_data_by_period(kpi_repo, period)
            period_data = await kpi_repo_period.get_kpi_by_names(fullnames)
            message_text = format_target_rating_message(
                group_members, premium_data, period_data, period
            )
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            kpi_repo_period = get_kpi_data_by_period(kpi_repo, period)
            kpi_data = await kpi_repo_period.get_kpi_by_names(fullnames)
            message_text = format_rating_message(
                group_members, kpi_data, metric, period
            )

        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=rating_menu_kb(period, metric),
            )
        except TelegramBadRequest:
            await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ {metric} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}: {e}"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True
        )
