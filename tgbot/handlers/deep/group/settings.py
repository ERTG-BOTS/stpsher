import logging

from aiogram import Router
from aiogram.filters import CommandObject, CommandStart
from aiogram.types import CallbackQuery, Message
from aiogram.utils.payload import decode_payload

from infrastructure.database.models.STP.group import Group
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.deep import DeepLinkRegexFilter
from tgbot.keyboards.group.main import (
    GroupAccessApplyMenu,
    GroupAccessMenu,
    GroupMemberActionMenu,
    GroupMemberDetailMenu,
    GroupMembersMenu,
    GroupServiceMessagesApplyMenu,
    GroupServiceMessagesMenu,
    GroupSettingsMenu,
    group_access_kb,
    group_member_detail_kb,
    group_members_kb,
    group_service_messages_kb,
    group_settings_kb,
)
from tgbot.misc.dicts import roles

deeplink_group = Router()
logger = logging.getLogger(__name__)

# Store pending role changes per group
pending_role_changes = {}
# Store pending service messages changes per group
pending_service_messages_changes = {}


@deeplink_group.message(
    CommandStart(deep_link=True), DeepLinkRegexFilter(r"^group_-?\d+$")
)
async def handle_settings(
    message: Message, command: CommandObject, stp_repo: MainRequestsRepo
):
    """Redirect to groups management menu with specific group selected."""
    from tgbot.handlers.group.management import (
        check_user_admin_status,
        get_user_groups,
    )
    from tgbot.keyboards.group.main import group_management_kb, group_settings_kb

    payload = decode_payload(command.args)
    group_id = int(payload.split("_", 1)[1])
    user_id = message.from_user.id

    try:
        # Check if user is in the group
        user_groups, admin_status = await get_user_groups(
            user_id, stp_repo, message.bot
        )
        group_found = any(gid == group_id for gid, _ in user_groups)

        if not group_found:
            await message.answer(
                """‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>

–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –°–æ—Å—Ç–æ—è—Ç—å –≤ –≥—Ä—É–ø–ø–µ
2. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
            )
            return

        # Get group info
        group = await stp_repo.group.get_group(group_id)
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # Check admin status
        is_admin = await check_user_admin_status(user_id, group_id, message.bot)

        chat_info = await message.bot.get_chat(chat_id=group_id)
        group_name = chat_info.title or f"{group_id}"

        if is_admin:
            # Show full settings for admin
            await message.answer(
                f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üî¥ –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>

üí° <b>–°–æ–≤–µ—Ç:</b> –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ì—Ä—É–ø–ø—ã"!""",
                reply_markup=group_settings_kb(group, 1),
            )
        else:
            # Show info for regular user
            await message.answer(
                f"""üìÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</b>: {group_name}

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:
{"üü¢" if group.remove_unemployed else "üî¥"} –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
{"üü¢" if group.new_user_notify else "üî¥"} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
{"üü¢" if group.is_casino_allowed else "üî¥"} –ö–∞–∑–∏–Ω–æ

üõ°Ô∏è <b>–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ</b>: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω" if group.allowed_roles else "–û—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö"}

üóëÔ∏è <b>–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>: {"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if hasattr(group, "service_messages") and group.service_messages else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"}

<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
                reply_markup=group_management_kb(user_groups, 1),
            )

    except Exception as e:
        logger.error(f"Error handling deep link for group {group_id}: {e}")
        await message.answer(
            """‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã.

üí° <b>–ü–æ–ø—Ä–æ–±—É–π:</b> –û—Ç–∫—Ä–æ–π –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ ‚Üí "–ì—Ä—É–ø–ø—ã" ‚Üí "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏" """
        )


async def _update_toggle_setting(
    callback: CallbackQuery,
    stp_repo: MainRequestsRepo,
    group: Group,
    field_name: str,
    current_value: bool,
    success_message: str,
) -> None:
    """Helper function to update toggle settings efficiently."""
    new_value = not current_value
    update_data = {field_name: new_value}

    logger.info(
        f"Updating group {group.group_id}: {field_name} from {current_value} to {new_value}"
    )

    updated_group = await stp_repo.group.update_group(
        group_id=group.group_id, **update_data
    )

    if updated_group:
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await callback.answer(f"{success_message} {status}")

        await callback.message.edit_reply_markup(
            reply_markup=group_settings_kb(updated_group, 1)
        )
        logger.info(f"Successfully updated group {group.group_id} setting {field_name}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        logger.error(f"Failed to update group {group.group_id} setting {field_name}")


@deeplink_group.callback_query(GroupSettingsMenu.filter())
async def handle_settings_callback(
    callback: CallbackQuery,
    callback_data: GroupSettingsMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    match callback_data.menu:
        case "remove_unemployed":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "remove_unemployed",
                group.remove_unemployed,
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            )

        case "is_casino_allowed":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "is_casino_allowed",
                group.is_casino_allowed,
                "–ö–∞–∑–∏–Ω–æ",
            )

        case "new_user_notify":
            await _update_toggle_setting(
                callback,
                stp_repo,
                group,
                "new_user_notify",
                group.new_user_notify,
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            )

        case "access":
            # Initialize pending changes with current dialogs
            pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

            await callback.message.edit_text(
                """üõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ</b>

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
- üî¥ –ù–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞

<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"</i>
<i>–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ - —É –ª—é–±–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø</i>

<blockquote expandable>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—Ü–∏–∏ "–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"

–ï—Å–ª–∏ –æ–ø—Ü–∏—è "–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏ —É–∫–∞–∑–∞–Ω—ã —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞, —Ç–æ:
- –í –≥—Ä—É–ø–ø–µ —Å–º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
- –í –≥—Ä—É–ø–ø—É —Å–º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏</blockquote>""",
                reply_markup=group_access_kb(
                    group, pending_role_changes[group.group_id], 1
                ),
            )

        case "members":
            # Get all group members from the database
            group_members = await stp_repo.group_member.get_group_members(
                group.group_id
            )

            # Get employee data for members who are employees
            employees = []
            non_employee_users = []

            for group_member in group_members:
                # Try to get employee data
                employee = await stp_repo.employee.get_user(
                    user_id=group_member.member_id
                )
                if employee:
                    employees.append(employee)
                else:
                    # Get user info from Telegram
                    try:
                        chat_member = await callback.bot.get_chat_member(
                            chat_id=group.group_id, user_id=group_member.member_id
                        )
                        non_employee_users.append(chat_member.user)
                    except Exception:
                        # User might have left the group or blocked the bot
                        continue

            total_members = len(employees) + len(non_employee_users)

            # Create role legend from dialogs dict
            role_legend = []
            for role_id, role_info in roles.items():
                if role_id not in [0, 10]:  # Skip unauthorized and root
                    role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

            await callback.message.edit_text(
                f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
                reply_markup=group_members_kb(
                    group_id=group.group_id,
                    employees=employees,
                    users=non_employee_users,
                    current_page=1,
                ),
            )

        case "service_messages":
            # Initialize pending changes with current service messages categories
            pending_service_messages_changes[group.group_id] = (
                getattr(group, "service_messages", []) or []
            ).copy()

            await callback.message.edit_text(
                """üóëÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –£–¥–∞–ª—è—é—Ç—Å—è
- üî¥ –ù–µ —É–¥–∞–ª—è—é—Ç—Å—è

<blockquote expandable><b>–¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ <b>–í—Å–µ</b> - –≤—Å–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ <b>–í—Ö–æ–¥</b> - "X –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É"
‚Ä¢ <b>–í—ã—Ö–æ–¥</b> - "X –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
‚Ä¢ <b>–ü—Ä–æ—á–µ–µ</b> - –±—É—Å—Ç—ã, –ø–ª–∞—Ç–µ–∂–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ <b>–§–æ—Ç–æ</b> - —Å–º–µ–Ω–∞ —Ñ–æ—Ç–æ —á–∞—Ç–∞
‚Ä¢ <b>–ó–∞–∫—Ä–µ–ø</b> - "X –∑–∞–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> - —Å–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
‚Ä¢ <b>–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏</b> - –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º–∏</blockquote>

<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"</i>""",
                reply_markup=group_service_messages_kb(
                    group, pending_service_messages_changes[group.group_id], 1
                ),
            )

        case "back":
            group_info = await callback.bot.get_chat(chat_id=group.group_id)

            await callback.message.edit_text(
                f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã</b>: {group_info.full_name}

<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
- üü¢ –û–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
- üî¥ –û–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</i>""",
                reply_markup=group_settings_kb(group, 1),
            )


@deeplink_group.callback_query(GroupAccessMenu.filter())
async def handle_access_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    # Get current pending dialogs for this group
    if group.group_id not in pending_role_changes:
        pending_role_changes[group.group_id] = (group.allowed_roles or []).copy()

    current_pending = pending_role_changes[group.group_id]
    role_id = callback_data.role_id

    if role_id in current_pending:
        # Remove role from pending list
        pending_role_changes[group.group_id] = [
            r for r in current_pending if r != role_id
        ]
        action = "—É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"
    else:
        # Add role to pending list
        pending_role_changes[group.group_id] = current_pending + [role_id]
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º"

    from tgbot.misc.dicts import roles

    role_name = roles[role_id]["name"]
    await callback.answer(f"–†–æ–ª—å '{role_name}' {action}")

    # Update keyboard with pending changes
    await callback.message.edit_reply_markup(
        reply_markup=group_access_kb(group, pending_role_changes[group.group_id], 1)
    )


@deeplink_group.callback_query(GroupAccessApplyMenu.filter())
async def handle_access_apply_callback(
    callback: CallbackQuery,
    callback_data: GroupAccessApplyMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    if callback_data.action == "apply":
        # Apply the pending changes
        if group.group_id in pending_role_changes:
            new_roles = pending_role_changes[group.group_id]

            updated_group = await stp_repo.group.update_group(
                group_id=group.group_id, allowed_roles=new_roles
            )

            if updated_group:
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

                # Clean up pending changes
                del pending_role_changes[group.group_id]

                # Update keyboard without pending changes
                await callback.message.edit_reply_markup(
                    reply_markup=group_access_kb(updated_group, page=1)
                )
                logger.info(
                    f"Successfully applied access roles for group {group.group_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                logger.error(f"Failed to apply access roles for group {group.group_id}")
        else:
            await callback.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

    elif callback_data.action == "cancel":
        # Cancel pending changes
        if group.group_id in pending_role_changes:
            del pending_role_changes[group.group_id]

        await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")

        # Update keyboard with original dialogs
        await callback.message.edit_reply_markup(
            reply_markup=group_access_kb(group, page=1)
        )


@deeplink_group.callback_query(GroupMembersMenu.filter())
async def handle_members_pagination(
    callback: CallbackQuery,
    callback_data: GroupMembersMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle members list pagination"""
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    # Get all group members from the database
    group_members = await stp_repo.group_member.get_group_members(group.group_id)

    # Get employee data for members who are employees
    employees = []
    non_employee_users = []

    for group_member in group_members:
        # Try to get employee data
        employee = await stp_repo.employee.get_user(user_id=group_member.member_id)
        if employee:
            employees.append(employee)
        else:
            # Get user info from Telegram
            try:
                chat_member = await callback.bot.get_chat_member(
                    chat_id=group.group_id, user_id=group_member.member_id
                )
                non_employee_users.append(chat_member.user)
            except Exception:
                # User might have left the group or blocked the bot
                continue

    total_members = len(employees) + len(non_employee_users)

    # Create role legend from dialogs dict
    role_legend = []
    for role_id, role_info in roles.items():
        if role_id not in [0, 10]:  # Skip unauthorized and root
            role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

    await callback.message.edit_text(
        f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
        reply_markup=group_members_kb(
            group_id=group.group_id,
            employees=employees,
            users=non_employee_users,
            current_page=callback_data.page,
        ),
    )


@deeplink_group.callback_query(GroupMemberDetailMenu.filter())
async def handle_member_detail(
    callback: CallbackQuery,
    callback_data: GroupMemberDetailMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle member detail view"""
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    if callback_data.member_type == "employee":
        # Get employee data
        employee = await stp_repo.employee.get_user(user_id=callback_data.member_id)
        if employee:
            from tgbot.keyboards.group.main import short_name

            member_name = short_name(employee.fullname)
            role_info = roles.get(
                employee.role, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", "emoji": ""}
            )
            member_info = f"""üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>: {employee.fullname}
üè∑Ô∏è <b>–†–æ–ª—å</b>: {role_info["emoji"]} {role_info["name"]}
üÜî <b>ID</b>: <code>{employee.user_id}</code>"""
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return
    else:
        # Get user info from Telegram
        try:
            chat_member = await callback.bot.get_chat_member(
                chat_id=group.group_id, user_id=callback_data.member_id
            )
            user = chat_member.user
            username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            full_name = f"{user.first_name}"
            if user.last_name:
                full_name += f" {user.last_name}"

            member_name = username
            member_info = f"""üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>: {full_name}
üë§ <b>Username</b>: {username}
üÜî <b>ID</b>: <code>{user.id}</code>"""
        except Exception:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

    await callback.message.edit_text(
        f"""üîç <b>–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

{member_info}

<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º</i>""",
        reply_markup=group_member_detail_kb(
            group_id=callback_data.group_id,
            member_id=callback_data.member_id,
            member_type=callback_data.member_type,
            member_name=member_name,
            page=callback_data.page,
        ),
    )


@deeplink_group.callback_query(GroupMemberActionMenu.filter())
async def handle_member_action(
    callback: CallbackQuery,
    callback_data: GroupMemberActionMenu,
    stp_repo: MainRequestsRepo,
):
    """Handle member actions (ban)"""
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    if callback_data.action == "ban":
        try:
            # Ban user from the group
            await callback.bot.ban_chat_member(
                chat_id=group.group_id, user_id=callback_data.member_id
            )

            # Remove from group_members table
            removal_success = await stp_repo.group_member.remove_member(
                group_id=group.group_id, member_id=callback_data.member_id
            )

            if removal_success:
                await callback.answer("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                logger.info(
                    f"User {callback_data.member_id} banned from group {group.group_id} "
                    f"and removed from database"
                )
            else:
                await callback.answer("‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                logger.warning(
                    f"User {callback_data.member_id} banned from group {group.group_id} "
                    f"but failed to remove from database"
                )

            # Return to members list
            # Get updated members list
            group_members = await stp_repo.group_member.get_group_members(
                group.group_id
            )

            employees = []
            non_employee_users = []

            for group_member in group_members:
                employee = await stp_repo.employee.get_user(
                    user_id=group_member.member_id
                )
                if employee:
                    employees.append(employee)
                else:
                    try:
                        chat_member = await callback.bot.get_chat_member(
                            chat_id=group.group_id, user_id=group_member.member_id
                        )
                        non_employee_users.append(chat_member.user)
                    except Exception:
                        continue

            total_members = len(employees) + len(non_employee_users)

            # Create role legend
            role_legend = []
            for role_id, role_info in roles.items():
                if role_id not in [0, 10]:
                    role_legend.append(f"{role_info['emoji']} - {role_info['name']}")

            await callback.message.edit_text(
                f"""üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
{chr(10).join(role_legend)}
@username (user_id) - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>""",
                reply_markup=group_members_kb(
                    group_id=group.group_id,
                    employees=employees,
                    users=non_employee_users,
                    current_page=callback_data.page,
                ),
            )

        except Exception as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            logger.error(f"Failed to ban user {callback_data.member_id}: {e}")


@deeplink_group.callback_query(GroupServiceMessagesMenu.filter())
async def handle_service_messages_callback(
    callback: CallbackQuery,
    callback_data: GroupServiceMessagesMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    # Get current pending categories for this group
    if group.group_id not in pending_service_messages_changes:
        pending_service_messages_changes[group.group_id] = (
            getattr(group, "service_messages", []) or []
        ).copy()

    current_pending = pending_service_messages_changes[group.group_id]
    category = callback_data.category

    if category in current_pending:
        # Remove category from pending list
        pending_service_messages_changes[group.group_id] = [
            c for c in current_pending if c != category
        ]
        action = "—É–±—Ä–∞–Ω–∞ –∏–∑ —É–¥–∞–ª—è–µ–º—ã—Ö"
    else:
        # Add category to pending list
        pending_service_messages_changes[group.group_id] = current_pending + [category]
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —É–¥–∞–ª—è–µ–º—ã–º"

    # Category names for user feedback
    category_names = {
        "all": "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "join": "–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "leave": "–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "other": "–ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "photo": "–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ",
        "pin": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "title": "–°–º–µ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è",
        "videochat": "–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏",
    }

    category_name = category_names.get(category, category)
    await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' {action}")

    # Update keyboard with pending changes
    await callback.message.edit_reply_markup(
        reply_markup=group_service_messages_kb(
            group, pending_service_messages_changes[group.group_id], 1
        )
    )


@deeplink_group.callback_query(GroupServiceMessagesApplyMenu.filter())
async def handle_service_messages_apply_callback(
    callback: CallbackQuery,
    callback_data: GroupServiceMessagesApplyMenu,
    stp_repo: MainRequestsRepo,
):
    group = await stp_repo.group.get_group(callback_data.group_id)
    if not group:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –≤ –±–∞–∑–µ :(")
        return

    if callback_data.action == "apply":
        # Apply the pending changes
        if group.group_id in pending_service_messages_changes:
            new_categories = pending_service_messages_changes[group.group_id]

            updated_group = await stp_repo.group.update_group(
                group_id=group.group_id, service_messages=new_categories
            )

            if updated_group:
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

                # Clean up pending changes
                del pending_service_messages_changes[group.group_id]

                # Update keyboard without pending changes
                await callback.message.edit_reply_markup(
                    reply_markup=group_service_messages_kb(updated_group, page=1)
                )
                logger.info(
                    f"Successfully applied service messages settings for group {group.group_id}"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                logger.error(
                    f"Failed to apply service messages settings for group {group.group_id}"
                )
        else:
            await callback.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

    elif callback_data.action == "cancel":
        # Cancel pending changes
        if group.group_id in pending_service_messages_changes:
            del pending_service_messages_changes[group.group_id]

        await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")

        # Update keyboard with original categories
        await callback.message.edit_reply_markup(
            reply_markup=group_service_messages_kb(group, page=1)
        )
