from typing import List, Optional

from sqlalchemy import BIGINT, JSON, TIMESTAMP, Enum, Integer, String, Text, func
from sqlalchemy.orm import Mapped, mapped_column

from infrastructure.database.models.base import Base, TableNameMixin


class Broadcast(Base, TableNameMixin):
    """–ú–æ–¥–µ–ª—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î.

    Attributes:
        id (Mapped[int]): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏.
        user_id (Mapped[int]): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.
        type (Mapped[str]): –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: division –∏–ª–∏ group.
        target (Mapped[str]): –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ù–¶–ö, –ù–¢–ü1, –ù–¢–ü2) –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞.
        text (Mapped[str]): –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
        recipients (Mapped[Optional[List[int]]]): –°–ø–∏—Å–æ–∫ user_id, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Ä–∞—Å—Å—ã–ª–∫—É.
        created_at (Mapped[TIMESTAMP]): –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """

    __tablename__ = "broadcasts"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(
        BIGINT, nullable=False, comment="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    type: Mapped[str] = mapped_column(
        Enum("division", "group"),
        nullable=False,
        comment="–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: division –∏–ª–∏ group",
    )
    target: Mapped[str] = mapped_column(
        String(255),
        nullable=False,
        comment="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–ù–¶–ö, –ù–¢–ü1, –ù–¢–ü2) –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞",
    )
    text: Mapped[str] = mapped_column(Text, nullable=False, comment="–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    recipients: Mapped[Optional[List[int]]] = mapped_column(
        JSON, nullable=True, comment="–°–ø–∏—Å–æ–∫ user_id, –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Ä–∞—Å—Å—ã–ª–∫—É"
    )
    created_at: Mapped[TIMESTAMP] = mapped_column(
        TIMESTAMP, nullable=False, server_default=func.current_timestamp()
    )

    def __repr__(self):
        return f"<Broadcast {self.id} user_id={self.user_id} type={self.type} target={self.target} recipients={len(self.recipients or [])} created_at={self.created_at}>"

    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Broadcast –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ aiogram-dialog –≤–∏–¥–∂–µ—Ç–∞—Ö."""
        recipients_count = len(self.recipients or [])
        created_at_str = (
            self.created_at.strftime("%d.%m.%Y %H:%M") if self.created_at else ""
        )
        return {
            "id": self.id,
            "user_id": self.user_id,
            "type": self.type,
            "target": self.target,
            "text": self.text,
            "recipients": self.recipients,
            "recipients_count": recipients_count,
            "created_at": self.created_at,
            "display": f"üì§ {self.target} ({recipients_count} —á–µ–ª.) ‚Äî {created_at_str}",
        }
