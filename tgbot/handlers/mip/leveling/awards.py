import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.role import MipFilter
from tgbot.handlers.mip.leveling.main import filter_items_by_division
from tgbot.keyboards.mip.leveling.awards import (
    award_activation_kb,
    award_detail_kb,
    awards_paginated_kb,
)
from tgbot.keyboards.mip.leveling.main import (
    AwardActionMenu,
    AwardActivationMenu,
    AwardsMenu,
    LevelingMenu,
    parse_filters,
)

mip_leveling_awards_router = Router()
mip_leveling_awards_router.message.filter(F.chat.type == "private", MipFilter())
mip_leveling_awards_router.callback_query.filter(
    F.message.chat.type == "private", MipFilter()
)

logger = logging.getLogger(__name__)


@mip_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "awards_all"))
async def awards_all(
    callback: CallbackQuery, callback_data: AwardsMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ú–ò–ü
    –ú–ò–ü –≤–∏–¥–∏—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback data
    page = getattr(callback_data, "page", 1)
    filters = getattr(callback_data, "filters", "–ù–¶–ö,–ù–¢–ü")

    # –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    active_filters = parse_filters(filters)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–∞–≥—Ä–∞–¥—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_awards = await stp_repo.award.get_awards()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filtered_awards = filter_items_by_division(all_awards, active_filters)

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(filtered_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = filtered_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        award_text = f"""
<b>{counter}. {award.name}</b>
üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost} –±–∞–ª–ª–æ–≤
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {award.division}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}"""
        awards_list.append(award_text)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_ntp = sum(1 for award in all_awards if award.division == "–ù–¢–ü")
    stats_nck = sum(1 for award in all_awards if award.division == "–ù–¶–ö")
    filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_awards}"

    message_text = f"""
<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote expandable>
–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥:  
‚Ä¢ –ù–¢–ü: {stats_ntp}  
‚Ä¢ –ù–¶–ö: {stats_nck}  
{filtered_stats}
</blockquote>

    {chr(10).join(awards_list)}
    """

    await callback.message.edit_text(
        message_text, reply_markup=awards_paginated_kb(page, total_pages, filters)
    )
    logger.info(
        f"[–ú–ò–ü] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, —Ñ–∏–ª—å—Ç—Ä—ã: {filters}"
    )


@mip_leveling_awards_router.callback_query(
    LevelingMenu.filter(F.menu == "awards_activation")
)
async def awards_activation(
    callback: CallbackQuery, callback_data: LevelingMenu, stp_repo: RequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "review" –∏ manager_role == 6
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å manager_role == 6
    review_awards = await stp_repo.user_award.get_review_awards_for_activation(
        manager_role=6
    )

    if not review_awards:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>

–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üòä""",
            reply_markup=award_activation_kb(page, 0, []),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(review_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = review_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award_detail in enumerate(page_awards, start=start_idx + 1):
        user_award = award_detail.user_award
        award_info = award_detail.award_info

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await stp_repo.user.get_user(user_id=user_award.user_id)
        user_name = user.fullname if user else f"ID: {user_award.user_id}"

        if user.username:
            awards_list.append(f"""{counter}. <b>{award_info.name}</b> - {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='t.me/{user.username}'>{user_name}</a> –∏–∑ {award_info.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}</blockquote>""")
        else:
            awards_list.append(f"""{counter}. <b>{award_info.name}</b> - {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='tg://user?id={user.user_id}'>{user_name}</a> –∏–∑ {award_info.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}</blockquote>""")
        awards_list.append("")

    message_text = f"""<b>‚úçÔ∏è –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{chr(10).join(awards_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=award_activation_kb(page, total_pages, page_awards)
    )


@mip_leveling_awards_router.callback_query(AwardActivationMenu.filter())
async def award_activation_detail(
    callback: CallbackQuery, callback_data: AwardActivationMenu, stp_repo: RequestsRepo
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    user_award_id = callback_data.user_award_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not user_award_detail:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã ‚òπ""",
            reply_markup=award_detail_kb(user_award_id, current_page),
        )
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user: User = await stp_repo.user.get_user(user_id=user_award.user_id)
    user_head: User = await stp_repo.user.get_user(fullname=user.head)

    user_info = (
        f"<a href='t.me/{user.username}'>{user.fullname}</a>"
        if user and user.username
        else "-"
    )
    head_info = (
        f"<a href='t.me/{user_head.username}'>{user.head}</a>"
        if user_head and user_head.username
        else "-"
    )

    message_text = f"""
<b>üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

<b>üèÜ –û –Ω–∞–≥—Ä–∞–¥–µ</b>  
<blockquote><b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>
{award_info.name}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{award_info.description}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>
{award_info.cost} –±–∞–ª–ª–æ–≤

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{user_award.usage_count} ‚û°Ô∏è {user_award.usage_count + 1} ({award_info.count} –≤—Å–µ–≥–æ)</blockquote>"""

    message_text += f"""

<b>üë§ –û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ</b>
<blockquote><b>–§–ò–û</b>
{user_info}

<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å</b>
{user.position} {user.division}

<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</b>
{head_info}</blockquote>

<b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>  
{user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
"""
    await callback.message.edit_text(
        message_text,
        reply_markup=award_detail_kb(user_award_id, current_page),
    )


@mip_leveling_awards_router.callback_query(AwardActionMenu.filter())
async def award_action(
    callback: CallbackQuery,
    callback_data: AwardActionMenu,
    stp_repo: RequestsRepo,
    user: User,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
    user_award_id = callback_data.user_award_id
    action = callback_data.action
    current_page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
        user_award_detail = await stp_repo.user_award.get_user_award_detail(
            user_award_id
        )

        if not user_award_detail:
            await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        user_award = user_award_detail.user_award
        award_info = user_award_detail.award_info
        employee_user: User = await stp_repo.user.get_user(user_id=user_award.user_id)

        if action == "approve":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.approve_award_usage(
                user_award_id=user_award_id,
                updated_by_user_id=callback.from_user.id,
            )

            await callback.answer(
                f"""‚úÖ –ù–∞–≥—Ä–∞–¥–∞ '{award_info.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
                
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            if user_award.usage_count >= award_info.count:
                employee_notify_message = f"""<b>üëå –ù–∞–≥—Ä–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {award_info.name}

–ú–µ–Ω–µ–¥–∂–µ—Ä <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã

–£ –Ω–∞–≥—Ä–∞–¥—ã {award_info.name} –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 

<i>–ö—É–ø–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é <b>üëè –ù–∞–≥—Ä–∞–¥—ã > ‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ</b></i>"""
            else:
                employee_notify_message = f"""<b>üëå –ù–∞–≥—Ä–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {award_info.name}

–ú–µ–Ω–µ–¥–∂–µ—Ä <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã

üìç –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {award_info.count - user_award.usage_count} –∏–∑ {award_info.count}"""

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=employee_notify_message,
            )

            logger.info(
                f"[–ú–ò–ü] - [–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user_award.user_id})"
            )

        elif action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await stp_repo.user_award.reject_award_usage(
                user_award_id=user_award_id, updated_by_user_id=callback.from_user.id
            )

            await callback.answer(
                f"""‚ùå –ù–∞–≥—Ä–∞–¥–∞ '{award_info.name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=f"""<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:</b> {award_info.name}

–ú–µ–Ω–µ–¥–∂–µ—Ä <a href='t.me/{user.username}'>{user.fullname}</a> –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã""",
            )

            logger.info(
                f"[–ú–ò–ü] - [–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–∞–≥—Ä–∞–¥—É {award_info.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee_user.username} ({user_award.user_id})"
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await awards_activation(
            callback=callback,
            callback_data=LevelingMenu(menu="awards_activation", page=current_page),
            stp_repo=stp_repo,
        )

    except Exception as e:
        logger.error(f"Error updating award status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)
