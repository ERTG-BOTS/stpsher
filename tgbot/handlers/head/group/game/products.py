import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.handlers.gok.game.main import filter_items_by_division
from tgbot.keyboards.head.group.game.main import HeadGameMenu
from tgbot.keyboards.head.group.game.products import head_products_paginated_kb
from tgbot.keyboards.mip.game.main import (
    FilterToggleMenu,
    ProductsMenu,
    PurchaseActionMenu,
    PurchaseActivationMenu,
    parse_filters,
    toggle_filter,
)
from tgbot.keyboards.mip.game.purchases import (
    purchase_activation_kb,
    purchase_detail_kb,
)
from tgbot.keyboards.user.main import MainMenu

head_game_products_router = Router()
head_game_products_router.message.filter(F.chat.type == "private", HeadFilter())
head_game_products_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_products_router.callback_query(HeadGameMenu.filter(F.menu == "products"))
async def head_products_menu(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ products_all —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º callback_data —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    from tgbot.keyboards.mip.game.main import ProductsMenu

    new_callback_data = ProductsMenu(menu="products_all", page=1, filters="–ù–¶–ö,–ù–¢–ü")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await head_products_all(callback, new_callback_data, stp_repo)


@head_game_products_router.callback_query(ProductsMenu.filter(F.menu == "products_all"))
async def head_products_all(
    callback: CallbackQuery, callback_data: ProductsMenu, stp_repo: MainRequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback data
    page = getattr(callback_data, "page", 1)
    filters = getattr(callback_data, "filters", "–ù–¶–ö,–ù–¢–ü")

    # –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    active_filters = parse_filters(filters)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_products = await stp_repo.product.get_products()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filtered_products = filter_items_by_division(all_products, active_filters)

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    products_per_page = 5
    total_products = len(filtered_products)
    total_pages = (total_products + products_per_page - 1) // products_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * products_per_page
    end_idx = start_idx + products_per_page
    page_products = filtered_products[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    products_list = []
    for counter, product in enumerate(page_products, start=start_idx + 1):
        product_text = f"""
<b>{counter}. {product.name}</b>
<blockquote>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {product.count}
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.cost} –±–∞–ª–ª–æ–≤
üî∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {product.division}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}</blockquote>"""
        products_list.append(product_text)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_ntp = sum(1 for product in all_products if product.division == "–ù–¢–ü")
    stats_nck = sum(1 for product in all_products if product.division == "–ù–¶–ö")
    filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_products}"

    message_text = f"""
<b>üëè –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

<blockquote expandable><b>–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>  
‚Ä¢ –ù–¢–ü: {stats_ntp}  
‚Ä¢ –ù–¶–ö: {stats_nck}  
{filtered_stats}
</blockquote>{chr(10).join(products_list)}
    """

    await callback.message.edit_text(
        message_text,
        reply_markup=head_products_paginated_kb(page, total_pages, filters),
    )
    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü—Ä–µ–¥–º–µ—Ç—ã] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, —Ñ–∏–ª—å—Ç—Ä—ã: {filters}"
    )


@head_game_products_router.callback_query(
    FilterToggleMenu.filter(F.menu == "products_all")
)
async def head_products_toggle_filter(
    callback: CallbackQuery, callback_data: FilterToggleMenu, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    menu = callback_data.menu
    filter_name = callback_data.filter_name
    current_filters = callback_data.current_filters

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    new_filters = toggle_filter(current_filters, filter_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if menu == "products_all":
        await head_products_all(
            callback,
            ProductsMenu(menu="products_all", page=1, filters=new_filters),
            stp_repo,
        )


@head_game_products_router.callback_query(
    MainMenu.filter(F.menu == "products_activation")
)
async def head_purchase_activation(
    callback: CallbackQuery,
    callback_data: MainMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "review" –∏ manager_role == 7 (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏)
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    user_division = "–ù–¶–ö" if "–ù–¶–ö" in user.division else "–ù–¢–ü"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å manager_role == 3
    review_purchases = await stp_repo.purchase.get_review_purchases_for_activation(
        manager_role=3
    )

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–≤–æ–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    division_filtered_purchases = []
    for purchase_details in review_purchases:
        product = purchase_details.product_info
        if product.division == user_division:
            division_filtered_purchases.append(purchase_details)

    review_purchases = division_filtered_purchases

    if not review_purchases:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>

–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üòä""",
            reply_markup=purchase_activation_kb(page, 0, []),
        )
        return

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    purchases_per_page = 5
    total_purchases = len(review_purchases)
    total_pages = (total_purchases + purchases_per_page - 1) // purchases_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * purchases_per_page
    end_idx = start_idx + purchases_per_page
    page_purchases = review_purchases[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    purchases_list = []
    for counter, purchase_details in enumerate(page_purchases, start=start_idx + 1):
        purchase = purchase_details.user_purchase
        product = purchase_details.product_info

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        employee = await stp_repo.employee.get_user(user_id=purchase.user_id)
        user_name = employee.fullname if employee else f"ID: {purchase.user_id}"

        if employee.username:
            purchases_list.append(f"""{counter}. <b>{product.name}</b> - {purchase.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='t.me/{employee.username}'>{user_name}</a> –∏–∑ {product.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{product.description}</blockquote>""")
        else:
            purchases_list.append(f"""{counter}. <b>{product.name}</b> - {purchase.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
<blockquote><b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>
<a href='tg://user?id={employee.user_id}'>{user_name}</a> –∏–∑ {product.division}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{product.description}</blockquote>""")
        purchases_list.append("")

    message_text = f"""<b>‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{chr(10).join(purchases_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=purchase_activation_kb(page, total_pages, page_purchases),
    )

    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ê–∫—Ç–∏–≤–∞—Ü–∏—è] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_division}"
    )


@head_game_products_router.callback_query(PurchaseActivationMenu.filter())
async def head_purchase_activation_detail(
    callback: CallbackQuery,
    callback_data: PurchaseActivationMenu,
    stp_repo: MainRequestsRepo,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    purchase_id = callback_data.purchase_id
    current_page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
    purchase_details = await stp_repo.purchase.get_purchase_details(purchase_id)

    if not purchase_details:
        await callback.message.edit_text(
            """<b>‚úçÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ‚òπ""",
            reply_markup=purchase_detail_kb(purchase_id, current_page),
        )
        return

    purchase = purchase_details.user_purchase
    product = purchase_details.product_info

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    employee: Employee = await stp_repo.employee.get_user(user_id=purchase.user_id)
    user_head: Employee = await stp_repo.employee.get_user(fullname=employee.head)

    user_info = (
        f"<a href='t.me/{employee.username}'>{employee.fullname}</a>"
        if employee and employee.username
        else "-"
    )
    head_info = (
        f"<a href='t.me/{user_head.username}'>{employee.head}</a>"
        if user_head and user_head.username
        else "-"
    )

    message_text = f"""
<b>üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞</b>

<b>üèÜ –û –ø—Ä–µ–¥–º–µ—Ç–µ</b>
<blockquote><b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>
{product.name}

<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ</b>
{product.description}

<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>
{product.cost} –±–∞–ª–ª–æ–≤

<b>üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π</b>
{purchase.usage_count} ‚û°Ô∏è {purchase.usage_count + 1} ({product.count} –≤—Å–µ–≥–æ)</blockquote>"""

    message_text += f"""

<b>üë§ –û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ</b>
<blockquote><b>–§–ò–û</b>
{user_info}

<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å</b>
{employee.position} {employee.division}

<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</b>
{head_info}</blockquote>

<b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>
{purchase.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}
"""
    await callback.message.edit_text(
        message_text,
        reply_markup=purchase_detail_kb(purchase_id, current_page, context="head"),
    )


@head_game_products_router.callback_query(PurchaseActionMenu.filter())
async def head_purchase_action(
    callback: CallbackQuery,
    callback_data: PurchaseActionMenu,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    purchase_id = callback_data.purchase_id
    action = callback_data.action
    current_page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        purchase_details = await stp_repo.purchase.get_purchase_details(purchase_id)

        if not purchase_details:
            await callback.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        purchase = purchase_details.user_purchase
        product = purchase_details.product_info
        employee_user: Employee = await stp_repo.employee.get_user(
            user_id=purchase.user_id
        )

        if action == "approve":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
            await stp_repo.purchase.approve_purchase_usage(
                purchase_id=purchase_id,
                updated_by_user_id=callback.from_user.id,
            )

            await callback.answer(
                f"""‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{product.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            if purchase.usage_count >= product.count:
                employee_notify_message = f"""<b>üëå –ü—Ä–µ–¥–º–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> {product.name}

–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞

–£ <b>{product.name}</b> –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π

<i>–ö—É–ø–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ –≤ <b>üíé –ú–∞–≥–∞–∑–∏–Ω–µ</b></i>"""
            else:
                employee_notify_message = f"""<b>üëå –ü—Ä–µ–¥–º–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> {product.name}

–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å <a href='t.me/{user.username}'>{user.fullname}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞

üìç –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {product.count - purchase.usage_count} –∏–∑ {product.count}"""

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=employee_notify_message,
            )

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª {product.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee_user.username} ({purchase.user_id})"
            )

        elif action == "reject":
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await stp_repo.purchase.reject_purchase_usage(
                purchase_id=purchase_id, updated_by_user_id=callback.from_user.id
            )

            await callback.answer(
                f"""‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{product.name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {employee_user.fullname} –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞""",
                show_alert=True,
            )

            await callback.bot.send_message(
                chat_id=employee_user.user_id,
                text=f"""<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:</b> {product.name}

–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å <a href='t.me/{user.username}'>{user.fullname}</a> –æ—Ç–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é <b>{product.name}</b>

<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ</i>""",
            )

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ] {callback.from_user.username} ({callback.from_user.id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é {product.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee_user.username} ({purchase.user_id})"
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await head_purchase_activation(
            callback=callback,
            callback_data=MainMenu(menu="products_activation", page=current_page),
            user=user,
            stp_repo=stp_repo,
        )

    except Exception as e:
        logger.error(f"Error updating purchase status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏", show_alert=True)
