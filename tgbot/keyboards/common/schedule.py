from datetime import datetime, timedelta

import pytz
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from tgbot.keyboards.user.main import MainMenu

# –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
MONTHS_RU = [
    "—è–Ω–≤–∞—Ä—å",
    "—Ñ–µ–≤—Ä–∞–ª—å",
    "–º–∞—Ä—Ç",
    "–∞–ø—Ä–µ–ª—å",
    "–º–∞–π",
    "–∏—é–Ω—å",
    "–∏—é–ª—å",
    "–∞–≤–≥—É—Å—Ç",
    "—Å–µ–Ω—Ç—è–±—Ä—å",
    "–æ–∫—Ç—è–±—Ä—å",
    "–Ω–æ—è–±—Ä—å",
    "–¥–µ–∫–∞–±—Ä—å",
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTH_EMOJIS = {
    "—è–Ω–≤–∞—Ä—å": "‚ùÑÔ∏è",
    "—Ñ–µ–≤—Ä–∞–ª—å": "üíô",
    "–º–∞—Ä—Ç": "üå∏",
    "–∞–ø—Ä–µ–ª—å": "üå∑",
    "–º–∞–π": "üåª",
    "–∏—é–Ω—å": "‚òÄÔ∏è",
    "–∏—é–ª—å": "üèñÔ∏è",
    "–∞–≤–≥—É—Å—Ç": "üåæ",
    "—Å–µ–Ω—Ç—è–±—Ä—å": "üçÇ",
    "–æ–∫—Ç—è–±—Ä—å": "üéÉ",
    "–Ω–æ—è–±—Ä—å": "üçÅ",
    "–¥–µ–∫–∞–±—Ä—å": "üéÑ",
}


class ScheduleMenu(CallbackData, prefix="schedule_menu"):
    menu: str


class HeadNavigation(CallbackData, prefix="head_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø"""

    action: str  # "prev", "next", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD


class DutyNavigation(CallbackData, prefix="duty_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –¥–µ–∂—É—Ä—Å—Ç–≤"""

    action: str  # "prev", "next", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD


class GroupNavigation(CallbackData, prefix="group_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""

    action: str  # "prev", "next", "prev_page", "next_page", "-", "today"
    date: str  # –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    page: int = 1  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    user_type: str = "user"  # "head" –∏–ª–∏ "user"
    from_group_mgmt: bool = False  # –≤—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π


class MonthNavigation(CallbackData, prefix="month_nav"):
    action: str  # "prev", "next", "current"
    month: str


def get_yekaterinburg_date() -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É"""
    yekaterinburg_tz = pytz.timezone("Asia/Yekaterinburg")
    return datetime.now(yekaterinburg_tz)


def get_next_month(current_month: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥—É—é—â–∏–π, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö)

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    Returns:
        –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    """
    try:
        current_index = MONTHS_RU.index(current_month.lower())
        if current_index < len(MONTHS_RU) - 1:
            return MONTHS_RU[current_index + 1]
        else:
            return MONTHS_RU[0]  # –Ø–Ω–≤–∞—Ä—å –ø–æ—Å–ª–µ –¥–µ–∫–∞–±—Ä—è
    except (ValueError, IndexError):
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        current_month_index = get_yekaterinburg_date().month - 1
        next_month_index = (current_month_index + 1) % 12
        return MONTHS_RU[next_month_index]


def get_prev_month(current_month: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü (–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö)

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    Returns:
        –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    """
    try:
        current_index = MONTHS_RU.index(current_month.lower())
        if current_index > 0:
            return MONTHS_RU[current_index - 1]
        else:
            return MONTHS_RU[-1]  # –î–µ–∫–∞–±—Ä—å –ø–µ—Ä–µ–¥ —è–Ω–≤–∞—Ä–µ–º
    except (ValueError, IndexError):
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        current_month_index = get_yekaterinburg_date().month - 1
        prev_month_index = (current_month_index - 1) % 12
        return MONTHS_RU[prev_month_index]


def duties_kb(current_date: datetime = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    today = get_yekaterinburg_date().date()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = current_date.strftime("%d.%m")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_row = [
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=DutyNavigation(
                action="prev", date=prev_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"üìÖ {date_str}",
            callback_data=DutyNavigation(
                action="-", date=current_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=DutyNavigation(
                action="next", date=next_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
    ]

    buttons = [nav_row]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    if current_date.date() != today:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üìç –°–µ–≥–æ–¥–Ω—è",
                    callback_data=DutyNavigation(
                        action="today", date=today.strftime("%Y-%m-%d")
                    ).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append(
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=ScheduleMenu(menu="main").pack(),
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def heads_kb(current_date: datetime = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    today = get_yekaterinburg_date().date()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = current_date.strftime("%d.%m")

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_row = [
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=HeadNavigation(
                action="prev", date=prev_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"üìÖ {date_str}",
            callback_data=HeadNavigation(
                action="-", date=current_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=HeadNavigation(
                action="next", date=next_date.strftime("%Y-%m-%d")
            ).pack(),
        ),
    ]

    buttons = [nav_row]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    if current_date.date() != today:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üìç –°–µ–≥–æ–¥–Ω—è",
                    callback_data=HeadNavigation(
                        action="today", date=today.strftime("%Y-%m-%d")
                    ).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append(
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=ScheduleMenu(menu="main").pack(),
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def group_schedule_kb(
    current_date: datetime = None,
    total_pages: int = 1,
    current_page: int = 1,
    user_type: str = "user",
    from_group_mgmt: bool = False,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("head" –∏–ª–∏ "user")
        from_group_mgmt: –í—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    if current_date is None:
        current_date = get_yekaterinburg_date()

    buttons = []

    # –†—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    if not from_group_mgmt:
        prev_date = current_date - timedelta(days=1)
        next_date = current_date + timedelta(days=1)
        today = get_yekaterinburg_date().date()
        date_str = current_date.strftime("%d.%m")

        nav_row = [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=GroupNavigation(
                    action="prev",
                    date=prev_date.strftime("%Y-%m-%d"),
                    page=current_page,
                    user_type=user_type,
                    from_group_mgmt=from_group_mgmt,
                ).pack(),
            ),
            InlineKeyboardButton(
                text=f"üìÖ {date_str}",
                callback_data=GroupNavigation(
                    action="-",
                    date=current_date.strftime("%Y-%m-%d"),
                    page=current_page,
                    user_type=user_type,
                    from_group_mgmt=from_group_mgmt,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=GroupNavigation(
                    action="next",
                    date=next_date.strftime("%Y-%m-%d"),
                    page=current_page,
                    user_type=user_type,
                    from_group_mgmt=from_group_mgmt,
                ).pack(),
            ),
        ]
        buttons.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è" –µ—Å–ª–∏ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
        if current_date.date() != today:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üìç –°–µ–≥–æ–¥–Ω—è",
                        callback_data=GroupNavigation(
                            action="today",
                            date=today.strftime("%Y-%m-%d"),
                            page=1,
                            user_type=user_type,
                            from_group_mgmt=from_group_mgmt,
                        ).pack(),
                    )
                ]
            )

    # –†—è–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥",
                    callback_data=GroupNavigation(
                        action="prev_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=current_page - 1,
                        user_type=user_type,
                        from_group_mgmt=from_group_mgmt,
                    ).pack(),
                )
            )

        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data=GroupNavigation(
                    action="-",
                    date=current_date.strftime("%Y-%m-%d"),
                    page=current_page,
                    user_type=user_type,
                    from_group_mgmt=from_group_mgmt,
                ).pack(),
            )
        )

        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥ ‚û°Ô∏è",
                    callback_data=GroupNavigation(
                        action="next_page",
                        date=current_date.strftime("%Y-%m-%d"),
                        page=current_page + 1,
                        user_type=user_type,
                        from_group_mgmt=from_group_mgmt,
                    ).pack(),
                )
            )

        buttons.append(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if from_group_mgmt:
        from tgbot.keyboards.head.group.main import GroupManagementMenu

        buttons.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=GroupManagementMenu(menu="main").pack(),
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=ScheduleMenu(menu="main").pack(),
                )
            ]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def schedule_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üìÖ –ú–æ–π –≥—Ä–∞—Ñ–∏–∫",
                callback_data=ScheduleMenu(menu="my").pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="üëÆ –î–µ–∂—É—Ä–Ω—ã–µ",
                callback_data=ScheduleMenu(menu="duties").pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="üë• –ì—Ä—É–ø–ø–∞",
                callback_data=ScheduleMenu(menu="group").pack(),
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data=MainMenu(menu="main").pack(),
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def schedule_with_month_kb(current_month: str = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º
    """
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    month_row = []

    if current_month:
        try:
            current_idx = MONTHS_RU.index(current_month.lower())
            prev_idx = (current_idx - 1) % 12
            next_idx = (current_idx + 1) % 12

            prev_month = MONTHS_RU[prev_idx]
            next_month = MONTHS_RU[next_idx]

            month_row = [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=MonthNavigation(
                        action="prev", month=prev_month
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text=f"{MONTH_EMOJIS.get(current_month.lower(), 'üìÖ')} {current_month.capitalize()}",
                    callback_data=MonthNavigation(
                        action="current", month=current_month
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=MonthNavigation(
                        action="next", month=next_month
                    ).pack(),
                ),
            ]
        except ValueError:
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
            current_month_idx = get_yekaterinburg_date().month - 1
            current_month = MONTHS_RU[current_month_idx]
            month_row = [
                InlineKeyboardButton(
                    text=f"{MONTH_EMOJIS.get(current_month, 'üìÖ')} {current_month.capitalize()}",
                    callback_data=MonthNavigation(
                        action="current", month=current_month
                    ).pack(),
                ),
            ]
    else:
        current_month_idx = get_yekaterinburg_date().month - 1
        current_month = MONTHS_RU[current_month_idx]
        month_row = [
            InlineKeyboardButton(
                text=f"{MONTH_EMOJIS.get(current_month, 'üìÖ')} {current_month.capitalize()}",
                callback_data=MonthNavigation(
                    action="current", month=current_month
                ).pack(),
            ),
        ]

    buttons.append(month_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.extend(
        [
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–¥—Ä–æ–±–Ω–æ",
                    callback_data=ScheduleMenu(menu="detailed").pack(),
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=ScheduleMenu(menu="main").pack(),
                )
            ],
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_detailed_schedule_keyboard(
    current_month: str = None,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

    Args:
        current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    """
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º (–∫–∞–∫ –≤ schedule_with_month_kb)
    month_row = []

    if current_month:
        try:
            current_idx = MONTHS_RU.index(current_month.lower())
            prev_idx = (current_idx - 1) % 12
            next_idx = (current_idx + 1) % 12

            prev_month = MONTHS_RU[prev_idx]
            next_month = MONTHS_RU[next_idx]

            month_row = [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=MonthNavigation(
                        action="prev", month=prev_month
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text=f"{MONTH_EMOJIS.get(current_month.lower(), 'üìÖ')} {current_month.capitalize()}",
                    callback_data=MonthNavigation(
                        action="current", month=current_month
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=MonthNavigation(
                        action="next", month=next_month
                    ).pack(),
                ),
            ]
        except ValueError:
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
            current_month_idx = get_yekaterinburg_date().month - 1
            current_month = MONTHS_RU[current_month_idx]
            month_row = [
                InlineKeyboardButton(
                    text=f"{MONTH_EMOJIS.get(current_month, 'üìÖ')} {current_month.capitalize()}",
                    callback_data=MonthNavigation(
                        action="current", month=current_month
                    ).pack(),
                ),
            ]

    buttons.append(month_row)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.extend(
        [
            [
                InlineKeyboardButton(
                    text="üìù –ö—Ä–∞—Ç–∫–æ",
                    callback_data=ScheduleMenu(menu="my").pack(),
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=ScheduleMenu(menu="main").pack(),
                )
            ],
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def changed_schedule_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üëî –ú–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data=ScheduleMenu(menu="my").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard
