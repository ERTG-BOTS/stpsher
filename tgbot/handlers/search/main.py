import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.handlers.user.schedule.main import schedule_service
from tgbot.keyboards.mip.search import (
    EditUserMenu,
    HeadGroupMenu,
    SelectUserRole,
    edit_user_back_kb,
    role_selection_kb,
)
from tgbot.keyboards.search.main import SearchMenu, search_main_kb
from tgbot.keyboards.search.search import (
    HeadUserCasinoToggle,
    HeadUserStatusChange,
    HeadUserStatusSelect,
    ScheduleNavigation,
    SearchFilterToggleMenu,
    SearchHeadGroupMemberDetail,
    SearchHeadGroupMembers,
    SearchUserResult,
    ViewUserKPI,
    ViewUserKPICalculator,
    ViewUserKPISalary,
    ViewUserSchedule,
    get_month_name_by_index,
    head_user_status_select_kb,
    search_back_kb,
    search_head_group_kb,
    search_results_kb,
    search_user_kpi_kb,
    toggle_filter,
    user_detail_kb,
    user_schedule_with_month_kb,
)
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.dicts import roles
from tgbot.misc.helpers import get_role
from tgbot.misc.states.search import EditEmployee, SearchEmployee
from tgbot.services.salary import SalaryFormatter
from tgbot.services.search import SearchService

search_router = Router()

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ú–ò–ü –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
search_router.message.filter(F.chat.type == "private")
search_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10


@search_router.callback_query(MainMenu.filter(F.menu == "search"))
async def search_main_menu(callback: CallbackQuery, state: FSMContext, user: Employee):
    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == 10:  # root
        context = "root"
    elif user.role == 6:  # –ú–ò–ü
        context = "mip"
    elif user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        context = "head"
    else:  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        context = "user"

    await state.update_data(user_context=context)

    await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<i>–í—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–∫–æ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–±—â–∏–º –ø–æ–∏—Å–∫–æ–º</i>""",
        reply_markup=search_main_kb(),
    )


@search_router.callback_query(SearchMenu.filter())
async def search_menu_handler(
    callback: CallbackQuery,
    callback_data: SearchMenu,
    stp_repo: MainRequestsRepo,
    state: FSMContext,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    menu = callback_data.menu

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == 10:  # root
        context = "root"
    elif user.role == 6:  # –ú–ò–ü
        context = "mip"
    elif user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        context = "head"
    else:  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        context = "user"

    if menu == "specialists":
        await show_specialists(callback, callback_data, stp_repo, context)
    elif menu == "heads":
        await show_heads(callback, callback_data, stp_repo, context)
    elif menu == "start_search":
        await start_search(callback, context, state)


@search_router.callback_query(SearchFilterToggleMenu.filter())
async def handle_search_filter_toggle(
    callback: CallbackQuery,
    callback_data: SearchFilterToggleMenu,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    menu = callback_data.menu
    filter_name = callback_data.filter_name
    current_filters = callback_data.current_filters

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    new_filters = toggle_filter(current_filters, filter_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == 10:  # root
        context = "root"
    elif user.role == 6:  # –ú–ò–ü
        context = "mip"
    elif user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        context = "head"
    else:  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        context = "user"

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π SearchMenu —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ 1
    new_callback_data = SearchMenu(menu=menu, page=1, filters=new_filters)

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ–Ω—é
    if menu == "specialists":
        await show_specialists(callback, new_callback_data, stp_repo, context)
    elif menu == "heads":
        await show_heads(callback, new_callback_data, stp_repo, context)


async def show_specialists(
    callback: CallbackQuery,
    callback_data: SearchMenu,
    stp_repo: MainRequestsRepo,
    context: str,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page
    filters = callback_data.filters

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    specialists = SearchService.filter_users_by_type(all_users, "specialists")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º
    if filters:
        active_filters = set(f.strip() for f in filters.split(",") if f.strip())
        if active_filters and active_filters != {"–ù–¶–ö", "–ù–¢–ü1", "–ù–¢–ü2"}:
            specialists = [u for u in specialists if u.division in active_filters]

    if not specialists:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    specialists.sort(key=lambda u: u.fullname)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(specialists)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = specialists[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</b>

–ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}""",
        reply_markup=search_results_kb(
            page_users,
            page,
            total_pages,
            "specialists",
            context=context,
            back_callback="search" if context == "mip" else "main",
            filters=filters,
        ),
    )


async def show_heads(
    callback: CallbackQuery,
    callback_data: SearchMenu,
    stp_repo: MainRequestsRepo,
    context: str,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page
    filters = callback_data.filters

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    heads = SearchService.filter_users_by_type(all_users, "heads")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º
    if filters:
        active_filters = set(f.strip() for f in filters.split(",") if f.strip())
        if active_filters and active_filters != {"–ù–¶–ö", "–ù–¢–ü1", "–ù–¢–ü2"}:
            heads = [u for u in heads if u.division in active_filters]

    if not heads:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    heads.sort(key=lambda u: u.fullname)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(heads)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = heads[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏</b>

–ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_users}""",
        reply_markup=search_results_kb(
            page_users,
            page,
            total_pages,
            "heads",
            context=context,
            back_callback="search" if context == "mip" else "main",
            filters=filters,
        ),
    )


async def start_search(callback: CallbackQuery, context: str, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"""
    bot_message = await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–í–≤–µ–¥–∏:
‚Ä¢ –ß–∞—Å—Ç—å –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)
‚Ä¢ Username Telegram (@username –∏–ª–∏ username)

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, 123456789, @username, username</i>""",
        reply_markup=search_back_kb(context=context),
    )

    await state.update_data(bot_message_id=bot_message.message_id, context=context)
    await state.set_state(SearchEmployee.waiting_search_query)


@search_router.message(SearchEmployee.waiting_search_query)
async def process_search_query(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")
    context = state_data.get("context", "mip")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if not search_query or len(search_query) < 2:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)

–í–≤–µ–¥–∏:
‚Ä¢ –ß–∞—Å—Ç—å –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)
‚Ä¢ Username Telegram (@username –∏–ª–∏ username)

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, 123456789, @username, username</i>""",
            reply_markup=search_back_kb(context=context),
        )
        return

    try:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–§–ò–û, user_id, username)
        found_users = await stp_repo.employee.search_users(search_query, limit=50)

        if not found_users:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=f"""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, 123456789, @username, username</i>""",
                reply_markup=search_back_kb(context=context),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        sorted_users = sorted(
            found_users,
            key=lambda u: (
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                search_query.lower() not in u.fullname.lower(),
                # –ü–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                u.fullname,
            ),
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_found = len(sorted_users)
        total_pages = (total_found + USERS_PER_PAGE - 1) // USERS_PER_PAGE
        page_users = sorted_users[:USERS_PER_PAGE]

        back_callback = "search" if context == "mip" else "main"

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∞–π–¥–µ–Ω–æ: {total_found} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤""",
            reply_markup=search_results_kb(
                page_users,
                1,
                total_pages,
                "search_results",
                context=context,
                back_callback=back_callback,
                filters="–ù–¶–ö,–ù–¢–ü1,–ù–¢–ü2",
            ),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, 123456789, @username, username</i>""",
            reply_markup=search_back_kb(context=context),
        )


@search_router.callback_query(SearchUserResult.filter())
async def show_user_details(
    callback: CallbackQuery,
    callback_data: SearchUserResult,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context
    viewer_role = user.role  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

    try:
        target_user = await stp_repo.employee.get_user(user_id=user_id)
        user_head = (
            await stp_repo.employee.get_user(fullname=target_user.head)
            if target_user.head
            else None
        )

        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ —Å–º–æ—Ç—Ä—è—â–µ–≥–æ
        user_info = SearchService.format_user_info_role_based(
            target_user, user_head, viewer_role
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ 2 –∏ –≤—ã—à–µ)
        if target_user.role == 2 and viewer_role >= 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
            group_stats = await SearchService.get_group_statistics(
                target_user.fullname, stp_repo
            )
            user_info += SearchService.format_head_group_info(group_stats)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ä–æ–ª–∏
        if context == "mip" and viewer_role >= 6:  # –ú–ò–ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö
            can_edit = target_user.role in [1, 3]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2)
        elif (
            context == "head" and viewer_role == 2
        ):  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö
            can_edit = target_user.role in [1, 3]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2)
        else:
            can_edit = False

        is_head = target_user.role == 2
        head_user_id = target_user.user_id if is_head else 0

        await callback.message.edit_text(
            user_info,
            reply_markup=user_detail_kb(
                target_user,
                return_to,
                head_id,
                context=context,
                show_edit_buttons=can_edit,
                is_head=is_head,
                head_user_id=head_user_id,
                viewer_role=viewer_role,
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@search_router.callback_query(ViewUserSchedule.filter())
async def view_user_schedule(
    callback: CallbackQuery,
    callback_data: ViewUserSchedule,
    stp_repo: MainRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    requested_month_idx = callback_data.month_idx
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=True, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                    context=context,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                    context=context,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@search_router.callback_query(ScheduleNavigation.filter())
async def navigate_user_schedule(
    callback: CallbackQuery,
    callback_data: ScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=month_to_display, compact=compact, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                    context=context,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                    context=context,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@search_router.callback_query(ViewUserKPICalculator.filter())
async def view_user_kpi_calculator(
    callback: CallbackQuery,
    callback_data: ViewUserKPICalculator,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–æ—Ä–º–∞—Ç–∏–≤—ã)"""
    from tgbot.services.salary import KPICalculator

    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2) –∏—Å–ø–æ–ª—å–∑—É–µ–º head_premium, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - spec_premium
        if user.role == 2:
            user_premium = await kpi_repo.head_premium.get_premium(
                fullname=user.fullname
            )
        else:
            user_premium = await kpi_repo.spec_premium.get_premium(
                fullname=user.fullname
            )

        if user_premium is None:
            message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI: {user.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""
        else:
            if user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                flr_calculation = KPICalculator.calculate_flr_needed(
                    user.division,
                    user_premium.flr,
                    user_premium.flr_normative,
                    is_head=True,
                )
                gok_calculation = KPICalculator.calculate_gok_needed(
                    user.division,
                    user_premium.gok,
                    user_premium.gok_normative,
                    is_head=True,
                )
                target_calculation = KPICalculator.calculate_target_needed(
                    user_premium.target,
                    user_premium.target_goal_first,
                    user_premium.target_goal_second,
                    user_premium.target_type,
                    is_head=True,
                )

                message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI: {user.fullname}</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(user_premium.flr)} ({SalaryFormatter.format_percentage(user_premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(user_premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(user_premium.gok))} ({SalaryFormatter.format_percentage(user_premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(user_premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(user_premium.target)} ({SalaryFormatter.format_percentage(user_premium.target_result_first)} / {SalaryFormatter.format_percentage(user_premium.target_result_second)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(user_premium.target_goal_first))} / {SalaryFormatter.format_value(round(user_premium.target_goal_second))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {user_premium.updated_at.strftime("%d.%m.%y %H:%M") if user_premium.updated_at else "‚Äî"}</i>"""
            else:  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
                csi_calculation = KPICalculator.calculate_csi_needed(
                    user.division, user_premium.csi, user_premium.csi_normative
                )
                flr_calculation = KPICalculator.calculate_flr_needed(
                    user.division, user_premium.flr, user_premium.flr_normative
                )
                gok_calculation = KPICalculator.calculate_gok_needed(
                    user.division, user_premium.gok, user_premium.gok_normative
                )
                target_calculation = KPICalculator.calculate_target_needed(
                    user_premium.target,
                    user_premium.target_goal_first,
                    user_premium.target_goal_second,
                    user_premium.target_type,
                )

                message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI: {user.fullname}</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(user_premium.csi)} ({SalaryFormatter.format_percentage(user_premium.csi_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(user_premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(user_premium.flr)} ({SalaryFormatter.format_percentage(user_premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(user_premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(user_premium.gok))} ({SalaryFormatter.format_percentage(user_premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(user_premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(user_premium.target)} ({SalaryFormatter.format_percentage(round((user_premium.target_goal_first / user_premium.target * 100) if user_premium.target_type and "AHT" in user_premium.target_type and user_premium.target and user_premium.target > 0 and user_premium.target_goal_first else (user_premium.target / user_premium.target_goal_first * 100) if user_premium.target_goal_first and user_premium.target_goal_first > 0 else 0))} / {SalaryFormatter.format_percentage(round((user_premium.target_goal_second / user_premium.target * 100) if user_premium.target_type and "AHT" in user_premium.target_type and user_premium.target and user_premium.target > 0 and user_premium.target_goal_second else (user_premium.target / user_premium.target_goal_second * 100) if user_premium.target_goal_second and user_premium.target_goal_second > 0 else 0))})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(user_premium.target_goal_first))} / {SalaryFormatter.format_value(round(user_premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {user_premium.updated_at.strftime("%d.%m.%y %H:%M") if user_premium.updated_at else "‚Äî"}</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_user_kpi_kb(
                user_id, return_to, head_id, "calculator", context=context
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@search_router.callback_query(ViewUserKPISalary.filter())
async def view_user_kpi_salary(
    callback: CallbackQuery,
    callback_data: ViewUserKPISalary,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ó–∞—Ä–ø–ª–∞—Ç–∞)"""
    from tgbot.services.salary import SalaryCalculator

    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2) –∏—Å–ø–æ–ª—å–∑—É–µ–º head_premium, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - spec_premium
        if user.role == 2:
            user_premium = await kpi_repo.head_premium.get_premium(
                fullname=user.fullname
            )
        else:
            user_premium = await kpi_repo.spec_premium.get_premium(
                fullname=user.fullname
            )

        if user_premium is None:
            message_text = f"""üí∞ <b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã: {user.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""
        else:
            try:
                salary_result = await SalaryCalculator.calculate_salary(
                    user=user, premium_data=user_premium
                )

                # Format the result using centralized formatter
                message_text = f"""üí∞ <b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã: {user.fullname}</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{SalaryFormatter.format_salary_message(salary_result, user_premium)}"""
            except Exception as calc_error:
                message_text = f"""üí∞ <b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã: {user.fullname}</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: {calc_error}

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_user_kpi_kb(
                user_id, return_to, head_id, "salary", context=context
            ),
            disable_web_page_preview=True,
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@search_router.callback_query(ViewUserKPI.filter())
async def view_user_kpi(
    callback: CallbackQuery,
    callback_data: ViewUserKPI,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2) –∏—Å–ø–æ–ª—å–∑—É–µ–º head_premium, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - spec_premium
            if user.role == 2:
                premium = await kpi_repo.head_premium.get_premium(
                    fullname=user.fullname
                )
            else:
                premium = await kpi_repo.spec_premium.get_premium(
                    fullname=user.fullname
                )

            if premium is None:
                message_text = f"""üìä <b>KPI: {user.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

                await callback.message.edit_text(
                    message_text,
                    reply_markup=search_user_kpi_kb(
                        user_id, return_to, head_id, "main", context=context
                    ),
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
            if user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
                message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""
            else:  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
                message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}</blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative)) if premium.csi_response_normative else "‚Äî"}</blockquote>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first)) if premium.target_goal_first else "‚Äî"} / {SalaryFormatter.format_value(round(premium.target_goal_second)) if premium.target_goal_second else "‚Äî"}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + SalaryFormatter.format_value(premium.delay, " —Å–µ–∫") if user.division != "–ù–¶–ö" else ""}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –¥–ª—è {user.fullname}: {e}")

            message_text = f"""üìä <b>KPI: {user.fullname}</b>

‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

<i>–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_user_kpi_kb(
                user_id, return_to, head_id, "main", context=context
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
@search_router.callback_query(HeadUserStatusSelect.filter())
async def show_head_user_status_select(
    callback: CallbackQuery,
    callback_data: HeadUserStatusSelect,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.role not in [1, 3]:
            await callback.answer(
                "‚ùå –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö",
                show_alert=True,
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        message_text = f"""‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or ""}

<i>–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_user_status_select_kb(
                user_id=user_id,
                return_to=return_to,
                head_id=head_id,
                context=context,
                current_role=user.role,
                is_trainee=user.is_trainee,
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é", show_alert=True)


@search_router.callback_query(HeadUserStatusChange.filter())
async def change_head_user_status(
    callback: CallbackQuery,
    callback_data: HeadUserStatusChange,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–∂–µ—Ä/–¥–µ–∂—É—Ä–Ω—ã–π)"""
    from aiogram.exceptions import TelegramBadRequest

    user_id = callback_data.user_id
    status_type = callback_data.status_type
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.role not in [1, 3]:
            await callback.answer(
                "‚ùå –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö",
                show_alert=True,
            )
            return

        notification_text = ""
        changes_made = False

        if status_type == "trainee":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞
            new_trainee_status = not user.is_trainee
            await stp_repo.employee.update_user(
                user_id=user.user_id, is_trainee=new_trainee_status
            )

            status_text = "—Å—Ç–∞–∂–µ—Ä" if new_trainee_status else "–Ω–µ —Å—Ç–∞–∂–µ—Ä"
            notification_text = f"–°—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω: {status_text}"
            changes_made = True

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü–æ–∏—Å–∫] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_trainee_status}"
            )

        elif status_type == "duty":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
            old_role_name = "–î–µ–∂—É—Ä–Ω—ã–π" if user.role == 3 else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
            new_role = 1 if user.role == 3 else 3
            new_role_name = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" if new_role == 1 else "–î–µ–∂—É—Ä–Ω—ã–π"

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–æ–ª—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ
            await stp_repo.employee.update_user(user_id=user.user_id, role=new_role)

            notification_text = f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role_name} ‚Üí {new_role_name}"
            changes_made = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if user.user_id:
                try:
                    await callback.bot.send_message(
                        chat_id=user.user_id,
                        text=f"""<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω: {old_role_name} ‚Üí {new_role_name}

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞</i>""",
                    )
                except TelegramBadRequest as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}"
                    )

            logger.info(
                f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü–æ–∏—Å–∫] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {old_role_name} ‚Üí {new_role_name}"
            )

        if changes_made:
            await callback.answer(notification_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await show_head_user_status_select(
                callback,
                HeadUserStatusSelect(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ),
                stp_repo,
            )
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@search_router.callback_query(HeadUserCasinoToggle.filter())
async def toggle_head_user_casino(
    callback: CallbackQuery,
    callback_data: HeadUserCasinoToggle,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–∑–∏–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    context = callback_data.context
    viewer = user  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≥–æ–ª–æ–≤–µ)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await stp_repo.employee.get_user(user_id=user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ
        if target_user.role not in [1, 3]:
            await callback.answer(
                "‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö",
                show_alert=True,
            )
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ
        new_casino_status = not target_user.is_casino_allowed
        await stp_repo.employee.update_user(
            user_id=target_user.user_id, is_casino_allowed=new_casino_status
        )

        status_text = "—Ä–∞–∑—Ä–µ—à–µ–Ω" if new_casino_status else "–∑–∞–ø—Ä–µ—â–µ–Ω"
        await callback.answer(f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ {status_text}")

        logger.info(
            f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–ü–æ–∏—Å–∫] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∑–∏–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_casino_status}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await show_user_details(
            callback,
            SearchUserResult(
                user_id=user_id,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ),
            stp_repo,
            viewer,
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–∑–∏–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ú–ò–ü (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@search_router.callback_query(EditUserMenu.filter())
async def start_edit_user(
    callback: CallbackQuery,
    callback_data: EditUserMenu,
    state: FSMContext,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ú–ò–ü)"""
    user_id = callback_data.user_id
    action = callback_data.action

    if action == "edit_fullname":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        bot_message = await callback.message.edit_text(
            f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {user.fullname}

–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –§–ò–û:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.update_data(
            bot_message_id=bot_message.message_id,
            user_id=user_id,
            current_fullname=user.fullname,
        )
        await state.set_state(EditEmployee.waiting_new_fullname)

    elif action == "edit_role":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.message.edit_text(
            f"""üõ°Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞</b>

<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {get_role(user.role)["name"]}

–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏</i>""",
            reply_markup=role_selection_kb(user_id, user.role),
        )


# Import statements moved from bottom for these keyboard functions


@search_router.message(EditEmployee.waiting_new_fullname)
async def process_edit_fullname(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ú–ò–ü)"""

    new_fullname = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")
    user_id = state_data.get("user_id")
    current_fullname = state_data.get("current_fullname")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    fullname_pattern = r"^[–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+$"
    if not re.match(fullname_pattern, new_fullname):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}

‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.employee.update_user(user_id=user_id, fullname=new_fullname)

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úÖ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ</b>

<b>–ë—ã–ª–æ:</b> <code>{current_fullname}</code>
<b>–°—Ç–∞–ª–æ:</b> <code>{new_fullname}</code>

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.clear()
        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û] {message.from_user.username} ({message.from_user.id}) –∏–∑–º–µ–Ω–∏–ª –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_fullname} ‚Üí {new_fullname}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}""",
            reply_markup=edit_user_back_kb(user_id),
        )


@search_router.callback_query(SelectUserRole.filter())
async def process_role_change(
    callback: CallbackQuery,
    callback_data: SelectUserRole,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ú–ò–ü)"""
    user_id = callback_data.user_id
    new_role = callback_data.role
    viewer = user  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ú–ò–ü)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await stp_repo.employee.get_user(user_id=user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if target_user.role == new_role:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç—É —Ä–æ–ª—å", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
        old_role_name = (
            roles[target_user.role]["name"]
            if target_user.role in roles
            else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({target_user.role})"
        )
        new_role_name = (
            roles[new_role]["name"]
            if new_role in roles
            else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({new_role})"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.employee.update_user(user_id=user_id, role=new_role)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"""<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω: {old_role_name} ‚Üí {new_role_name}

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞</i>""",
            )
        except Exception as notify_error:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {notify_error}"
            )

        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {old_role_name} ‚Üí {new_role_name}"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_callback_data = SearchUserResult(user_id=user_id, context="mip")
        await show_user_details(callback, user_callback_data, stp_repo, viewer)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", show_alert=True)


@search_router.callback_query(HeadGroupMenu.filter())
async def show_head_group(
    callback: CallbackQuery,
    callback_data: HeadGroupMenu,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    head_id = callback_data.head_id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == 10:  # root
        context = "root"
    elif user.role == 6:  # –ú–ò–ü
        context = "mip"
    elif user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        context = "head"
    else:  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        context = "user"

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
        head_user = await stp_repo.employee.get_user(user_id=head_id)
        if not head_user:
            await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        group_members = await stp_repo.employee.get_users_by_head(head_user.fullname)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        total_members = len(group_members) if group_members else 0

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
        specialists = (
            len([m for m in group_members if m.role == 1]) if group_members else 0
        )
        duty_members = (
            len([m for m in group_members if m.role == 3]) if group_members else 0
        )
        trainees = (
            len([m for m in group_members if m.is_trainee]) if group_members else 0
        )
        authorized = (
            len([m for m in group_members if m.user_id]) if group_members else 0
        )

        message_text = f"""üë• <b>–ì—Ä—É–ø–ø–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</b>

<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> <a href='t.me/{head_user.username}'>{head_user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {head_user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {head_user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üë∂üèª - —Å—Ç–∞–∂–µ—Ä
üî® - root

<b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã:</b>
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {specialists}
‚Ä¢ –î–µ–∂—É—Ä–Ω—ã–µ: {duty_members}
‚Ä¢ –°—Ç–∞–∂–µ—Ä—ã: {trainees}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: {authorized}</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_head_group_kb(
                head_id=head_id, members=group_members or [], page=1, context=context
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {head_id}: {e}"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ", show_alert=True
        )


@search_router.callback_query(SearchHeadGroupMembers.filter())
async def search_head_group_pagination(
    callback: CallbackQuery,
    callback_data: SearchHeadGroupMembers,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    head_id = callback_data.head_id
    page = callback_data.page
    context = callback_data.context

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
        head_user = await stp_repo.employee.get_user(user_id=head_id)
        if not head_user:
            await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        group_members = await stp_repo.employee.get_users_by_head(head_user.fullname)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã
        total_members = len(group_members) if group_members else 0

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
        specialists = (
            len([m for m in group_members if m.role == 1]) if group_members else 0
        )
        duty_members = (
            len([m for m in group_members if m.role == 3]) if group_members else 0
        )
        trainees = (
            len([m for m in group_members if m.is_trainee]) if group_members else 0
        )
        authorized = (
            len([m for m in group_members if m.user_id]) if group_members else 0
        )

        message_text = f"""üë• <b>–ì—Ä—É–ø–ø–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</b>

<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> <a href='t.me/{head_user.username}'>{head_user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {head_user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {head_user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üë∂üèª - —Å—Ç–∞–∂–µ—Ä
üî® - root

<b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã:</b>
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {specialists}
‚Ä¢ –î–µ–∂—É—Ä–Ω—ã–µ: {duty_members}
‚Ä¢ –°—Ç–∞–∂–µ—Ä—ã: {trainees}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: {authorized}</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_head_group_kb(
                head_id=head_id, members=group_members or [], page=page, context=context
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {head_id}: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ", show_alert=True
        )


@search_router.callback_query(SearchHeadGroupMemberDetail.filter())
async def search_head_group_member_detail(
    callback: CallbackQuery,
    callback_data: SearchHeadGroupMemberDetail,
    stp_repo: MainRequestsRepo,
    user: Employee,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    head_id = callback_data.head_id
    member_id = callback_data.member_id
    page = callback_data.page
    context = callback_data.context
    viewer_role = user.role  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        member = await stp_repo.employee.get_user(user_id=member_id)
        if not member:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ main_id
            member = await stp_repo.employee.get_user(main_id=member_id)
            if not member:
                await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_head = (
            await stp_repo.employee.get_user(fullname=member.head)
            if member.head
            else None
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ —Å–º–æ—Ç—Ä—è—â–µ–≥–æ
        user_info = SearchService.format_user_info_role_based(
            member, user_head, viewer_role
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ 2 –∏ –≤—ã—à–µ)
        if member.role == 2 and viewer_role >= 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
            group_stats = await SearchService.get_group_statistics(
                member.fullname, stp_repo
            )
            user_info += SearchService.format_head_group_info(group_stats)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ä–æ–ª–∏
        if context == "mip" and viewer_role >= 6:  # –ú–ò–ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö
            can_edit = member.role in [1, 3]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2)
        elif (
            context == "head" and viewer_role == 2
        ):  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥–µ–∂—É—Ä–Ω—ã—Ö
            can_edit = member.role in [1, 3]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π (—Ä–æ–ª—å 2)
        else:
            can_edit = False

        is_head = member.role == 2
        head_user_id = member.user_id if is_head else 0

        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞
        buttons = []

        # –î–ª—è —Ä–æ–ª–µ–π 1 –∏ 3 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if viewer_role in [1, 3]:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data=SearchHeadGroupMembers(
                            head_id=head_id, page=page, context=context
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üè† –î–æ–º–æ–π",
                        callback_data=MainMenu(menu="main").pack(),
                    ),
                ]
            )
        elif viewer_role == 2:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ KPI) –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            action_buttons = [
                InlineKeyboardButton(
                    text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=ViewUserSchedule(
                        user_id=member.user_id or member.id,
                        return_to="search",
                        head_id=head_id,
                        context=context,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="üåü KPI",
                    callback_data=ViewUserKPI(
                        user_id=member.user_id or member.id,
                        return_to="search",
                        head_id=head_id,
                        context=context,
                    ).pack(),
                ),
            ]
            buttons.append(action_buttons)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∑–∏–Ω–æ –∏ —Å—Ç–∞—Ç—É—Å) –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            if can_edit:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text="üü¢ –ö–∞–∑–∏–Ω–æ"
                            if member.is_casino_allowed
                            else "üî¥ –ö–∞–∑–∏–Ω–æ",
                            callback_data=HeadUserCasinoToggle(
                                user_id=member.user_id or member.id,
                                return_to="search",
                                head_id=head_id,
                                context=context,
                            ).pack(),
                        ),
                    ]
                )
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                            callback_data=HeadUserStatusSelect(
                                user_id=member.user_id or member.id,
                                return_to="search",
                                head_id=head_id,
                                context=context,
                            ).pack(),
                        )
                    ]
                )

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data=SearchHeadGroupMembers(
                            head_id=head_id, page=page, context=context
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üè† –î–æ–º–æ–π",
                        callback_data=MainMenu(menu="main").pack(),
                    ),
                ]
            )
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π (–ú–ò–ü –∏ –≤—ã—à–µ) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            action_buttons = [
                InlineKeyboardButton(
                    text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=ViewUserSchedule(
                        user_id=member.user_id or member.id,
                        return_to="search",
                        head_id=head_id,
                        context=context,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="üåü KPI",
                    callback_data=ViewUserKPI(
                        user_id=member.user_id or member.id,
                        return_to="search",
                        head_id=head_id,
                        context=context,
                    ).pack(),
                ),
            ]
            buttons.append(action_buttons)

            # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ú–ò–ü
            if can_edit and context == "mip":
                from tgbot.keyboards.mip.search import EditUserMenu

                edit_buttons = [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –§–ò–û",
                        callback_data=EditUserMenu(
                            user_id=member.user_id, action="edit_fullname"
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üõ°Ô∏è –†–æ–ª—å",
                        callback_data=EditUserMenu(
                            user_id=member.user_id, action="edit_role"
                        ).pack(),
                    ),
                ]
                buttons.append(edit_buttons)

            # –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            if is_head and head_user_id:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text="üë• –ì—Ä—É–ø–ø–∞",
                            callback_data=HeadGroupMenu(head_id=head_user_id).pack(),
                        )
                    ]
                )

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data=SearchHeadGroupMembers(
                            head_id=head_id, page=page, context=context
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üè† –î–æ–º–æ–π",
                        callback_data=MainMenu(
                            menu="search" if context == "mip" else "main"
                        ).pack(),
                    ),
                ]
            )

        await callback.message.edit_text(
            user_info,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã {member_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
