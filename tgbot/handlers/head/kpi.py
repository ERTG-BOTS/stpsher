from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee
from infrastructure.database.models.KPI.head_kpi import HeadMonthKPI
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from tgbot.filters.role import HeadFilter
from tgbot.keyboards.head.kpi import KPIMenu, kpi_kb
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.dicts import russian_months

head_kpi_router = Router()
head_kpi_router.message.filter(F.chat.type == "private", HeadFilter())
head_kpi_router.callback_query.filter(F.message.chat.type == "private", HeadFilter())


@head_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi"))
async def head_start_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    head_kpi: HeadMonthKPI = await kpi_repo.head_month_kpi.get_kpi(
        fullname=user.fullname
    )

    contact_type = "—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"

    # –¢–µ–∫—Å—Ç –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    message_text = f"""<b>üåü –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø—ã ‚Ä¢ {russian_months.get(head_kpi.updated_at.month).capitalize()}</b>

<b>üìä –í—Å–µ–≥–æ {contact_type}:</b> {head_kpi.contacts_count}

‚ö°Ô∏è <b>AHT:</b> {head_kpi.aht if head_kpi.aht else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üõ†Ô∏è <b>FLR:</b> {head_kpi.flr if head_kpi.flr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}  
‚öñÔ∏è <b>–ì–û–ö:</b> {head_kpi.gok if head_kpi.gok else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
ü•á <b>–û—Ü–µ–Ω–∫–∞:</b> {head_kpi.csi if head_kpi.csi else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
ü•± <b>–û—Ç–∫–ª–∏–∫:</b> {head_kpi.pok if head_kpi.pok else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}"""

    # –¢–µ–∫—Å—Ç –¥–ª—è –ù–¢–ü
    if user.division != "–ù–¶–ö":
        message_text += f"\n‚è≥ <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {head_kpi.delay if head_kpi.delay else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        message_text += (
            f"\n<b>–ü—Ä–æ–¥–∞–∂–∏:</b> {head_kpi.sales_count if head_kpi.sales_count else '0'}"
        )

    message_text += f"""

<i>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {head_kpi.updated_at.strftime("%H:%M:%S %d.%m.%y")}</i>
<i>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ~10:00 –ü–†–ú</i>"""

    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=kpi_kb(),
        )
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@head_kpi_router.callback_query(KPIMenu.filter(F.menu == "refresh"))
async def kpi_refresh_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    await head_start_cb(callback, user, kpi_repo)


@head_kpi_router.callback_query(KPIMenu.filter(F.menu == "details"))
async def kpi_details_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
    head_kpi: HeadMonthKPI = await kpi_repo.head_month_kpi.get_kpi(
        fullname=user.fullname
    )

    contact_type = "—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"

    message_text = f"""<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Ä¢ {russian_months.get(head_kpi.updated_at.month).capitalize()}</b>

<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º:</b>

üìû <b>–í—Å–µ–≥–æ {contact_type}:</b> {head_kpi.contacts_count}
‚ö°Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (AHT):</b> {head_kpi.aht if head_kpi.aht else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üõ†Ô∏è <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ (FLR):</b> {head_kpi.flr if head_kpi.flr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
‚öñÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–ì–û–ö):</b> {head_kpi.gok if head_kpi.gok else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
ü•á <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (CSI):</b> {head_kpi.csi if head_kpi.csi else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
ü•± <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–∏–∫–∞ (–ü–û–ö):</b> {head_kpi.pok if head_kpi.pok else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}"""

    if user.division != "–ù–¶–ö":
        message_text += f"""
‚è≥ <b>–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {head_kpi.delay if head_kpi.delay else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üí∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {head_kpi.sales_count if head_kpi.sales_count else "0"}"""

    message_text += f"""

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {head_kpi.updated_at.strftime("%H:%M:%S %d.%m.%y")}</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=kpi_kb(),
    )


@head_kpi_router.callback_query(KPIMenu.filter(F.menu == "members"))
async def kpi_members_cb(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    message_text = """<b>üåü –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø—ã</b>

<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã."""

    await callback.message.edit_text(
        message_text,
        reply_markup=kpi_kb(),
    )
