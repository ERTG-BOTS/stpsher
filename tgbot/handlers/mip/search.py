import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    Message,
)

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import MipFilter
from tgbot.handlers.user.schedule.main import schedule_service
from tgbot.keyboards.common.search import (
    ScheduleNavigation,
    SearchUserResult,
    ViewUserSchedule,
    search_back_kb,
    search_results_kb,
    user_detail_kb,
    user_schedule_with_month_kb,
)
from tgbot.keyboards.mip.search import (
    EditUserMenu,
    HeadGroupMembersMenuForSearch,
    HeadGroupMenu,
    HeadMemberActionMenuForSearch,
    HeadMemberDetailMenuForSearch,
    HeadMemberRoleChangeForSearch,
    SearchMemberScheduleMenu,
    SearchMemberScheduleNavigation,
    SearchMenu,
    SelectUserRole,
    edit_user_back_kb,
    get_month_name_by_index,
    head_group_members_kb_for_search,
    head_member_detail_kb_for_search,
    role_selection_kb,
    search_main_kb,
    search_member_schedule_kb,
)
from tgbot.keyboards.mip.search_kpi import (
    SearchMemberKPIMenu,
    SearchUserKPIMenu,
    search_member_kpi_kb,
    search_user_kpi_kb,
)
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.dicts import roles
from tgbot.misc.states.mip.search import EditEmployee, SearchEmployee
from tgbot.services.leveling import LevelingSystem
from tgbot.services.salary import KPICalculator, SalaryCalculator, SalaryFormatter
from tgbot.services.search import SearchService

mip_search_router = Router()
mip_search_router.message.filter(F.chat.type == "private", MipFilter())
mip_search_router.callback_query.filter(F.message.chat.type == "private", MipFilter())

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10


@mip_search_router.callback_query(MainMenu.filter(F.menu == "search"))
async def search_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    await state.clear()
    await callback.message.edit_text(
        """<b>üïµüèª –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<i>–í—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–∫–æ–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–±—â–∏–º –ø–æ–∏—Å–∫–æ–º</i>""",
        reply_markup=search_main_kb(),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "specialists"))
async def show_specialists(
    callback: CallbackQuery, callback_data: SearchMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    specialists = SearchService.filter_users_by_type(all_users, "specialists")

    if not specialists:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(specialists)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = specialists[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</b>

–ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}""",
        reply_markup=search_results_kb(
            page_users,
            page,
            total_pages,
            "specialists",
            context="mip",
            back_callback="search",
        ),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "heads"))
async def show_heads(
    callback: CallbackQuery, callback_data: SearchMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    all_users = await stp_repo.employee.get_users()
    if not all_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    heads = SearchService.filter_users_by_type(all_users, "heads")

    if not heads:
        await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_users = len(heads)
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE

    start_idx = (page - 1) * USERS_PER_PAGE
    end_idx = start_idx + USERS_PER_PAGE
    page_users = heads[start_idx:end_idx]

    await callback.message.edit_text(
        f"""<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏</b>

–ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_users}
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}

<i>üí° –ù–∞–∂–º–∏ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≥—Ä—É–ø–ø—É</i>""",
        reply_markup=search_results_kb(
            page_users,
            page,
            total_pages,
            "heads",
            context="mip",
            back_callback="search",
        ),
    )


@mip_search_router.callback_query(SearchMenu.filter(F.menu == "start_search"))
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏"""
    bot_message = await callback.message.edit_text(
        """<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
        reply_markup=search_back_kb(context="mip"),
    )

    await state.update_data(bot_message_id=bot_message.message_id)
    await state.set_state(SearchEmployee.waiting_search_query)


@mip_search_router.message(SearchEmployee.waiting_search_query)
async def process_search_query(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if not search_query or len(search_query) < 2:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)

–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=search_back_kb(context="mip"),
        )
        return

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û
        found_users = await stp_repo.employee.get_users_by_fio_parts(
            search_query, limit=50
        )

        if not found_users:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text=f"""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
                reply_markup=search_back_kb(context="mip"),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        sorted_users = sorted(
            found_users,
            key=lambda u: (
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                search_query.lower() not in u.fullname.lower(),
                # –ü–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                u.fullname,
            ),
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_found = len(sorted_users)
        total_pages = (total_found + USERS_PER_PAGE - 1) // USERS_PER_PAGE
        page_users = sorted_users[:USERS_PER_PAGE]

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<code>{search_query}</code>" –Ω–∞–π–¥–µ–Ω–æ: {total_found} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}""",
            reply_markup=search_results_kb(
                page_users,
                1,
                total_pages,
                "search_results",
                context="mip",
                back_callback="search",
            ),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text="""<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏ —Ç.–¥.</i>""",
            reply_markup=search_back_kb(context="mip"),
        )


@mip_search_router.callback_query(SearchUserResult.filter(F.context == "mip"))
async def show_user_details(
    callback: CallbackQuery, callback_data: SearchUserResult, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id

    try:
        user = await stp_repo.employee.get_user(user_id=user_id)
        user_head = await stp_repo.employee.get_user(fullname=user.head)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if not user_head:
            await callback.answer(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await SearchService.get_user_statistics(user_id, stp_repo)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = SearchService.format_user_info_base(user, user_head, stats)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        if user.role == 2:  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
            group_stats = await SearchService.get_group_statistics(
                user.fullname, stp_repo
            )
            user_info += SearchService.format_head_group_info(group_stats)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        can_edit = user.role in [1, 2, 3]  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –¥–µ–∂—É—Ä–Ω—ã–µ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
        is_head = user.role == 2  # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        head_user_id = user.user_id if is_head else 0

        await callback.message.edit_text(
            user_info,
            reply_markup=user_detail_kb(
                user_id,
                return_to,
                head_id,
                context="mip",
                show_edit_buttons=can_edit,
                is_head=is_head,
                head_user_id=head_user_id,
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@mip_search_router.callback_query(HeadGroupMenu.filter())
async def show_head_group(
    callback: CallbackQuery, callback_data: HeadGroupMenu, stp_repo: MainRequestsRepo
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Å–ø–∏—Å–æ–∫ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ head group members"""
    head_id = callback_data.head_id
    page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ user_id
        head_user = await stp_repo.employee.get_user(user_id=head_id)
        if not head_user:
            await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        group_members = await stp_repo.employee.get_users_by_head(head_user.fullname)

        if not group_members:
            await callback.message.edit_text(
                f"""üë• <b>–ì—Ä—É–ø–ø–∞: {head_user.fullname}</b>

–£ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ
            
<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>""",
                reply_markup=head_group_members_kb_for_search(
                    [], current_page=1, head_id=head_id
                ),
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≥–æ –∂–µ —Å—Ç–∏–ª—è, —á—Ç–æ –∏ –≤ head group members
        total_members = len(group_members)

        message_text = f"""üë• <b>–ì—Ä—É–ø–ø–∞: {head_user.fullname}</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üî® - root</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_group_members_kb_for_search(
                group_members, current_page=page, head_id=head_id
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {head_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã", show_alert=True)


@mip_search_router.callback_query(EditUserMenu.filter())
async def start_edit_user(
    callback: CallbackQuery,
    callback_data: EditUserMenu,
    state: FSMContext,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    action = callback_data.action

    if action == "edit_fullname":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        bot_message = await callback.message.edit_text(
            f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {user.fullname}

–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –§–ò–û:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.update_data(
            bot_message_id=bot_message.message_id,
            user_id=user_id,
            current_fullname=user.fullname,
        )
        await state.set_state(EditEmployee.waiting_new_fullname)

    elif action == "edit_role":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        current_role_name = (
            roles[user.role]
            if user.role < len(roles)
            else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å ({user.role})"
        )

        await callback.message.edit_text(
            f"""üõ°Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞</b>

<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {current_role_name}

–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏</i>""",
            reply_markup=role_selection_kb(user_id, user.role),
        )


@mip_search_router.message(EditEmployee.waiting_new_fullname)
async def process_edit_fullname(
    message: Message, state: FSMContext, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    new_fullname = message.text.strip()
    state_data = await state.get_data()
    bot_message_id = state_data.get("bot_message_id")
    user_id = state_data.get("user_id")
    current_fullname = state_data.get("current_fullname")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    fullname_pattern = r"^[–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+ [–ê-–Ø–∞-—è–Å—ë]+$"
    if not re.match(fullname_pattern, new_fullname):
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}

‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>""",
            reply_markup=edit_user_back_kb(user_id),
        )
        return

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.employee.update_user(user_id=user_id, fullname=new_fullname)

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úÖ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ</b>

<b>–ë—ã–ª–æ:</b> <code>{current_fullname}</code>
<b>–°—Ç–∞–ª–æ:</b> <code>{new_fullname}</code>

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.""",
            reply_markup=edit_user_back_kb(user_id),
        )

        await state.clear()
        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û] {message.from_user.username} ({message.from_user.id}) –∏–∑–º–µ–Ω–∏–ª –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_fullname} ‚Üí {new_fullname}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            text=f"""<b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ

<b>–¢–µ–∫—É—â–µ–µ –§–ò–û:</b> {current_fullname}""",
            reply_markup=edit_user_back_kb(user_id),
        )


@mip_search_router.callback_query(SearchUserKPIMenu.filter())
async def search_user_kpi_menu(
    callback: CallbackQuery,
    callback_data: SearchUserKPIMenu,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ KPI –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    user_id = callback_data.user_id
    action = callback_data.action
    return_to = callback_data.return_to
    head_id = callback_data.head_id

    message_text = ""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)

            if premium is None:
                message_text = f"""üìä <b>KPI: {user.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

                await callback.message.edit_text(
                    message_text,
                    reply_markup=search_user_kpi_kb(
                        user_id, return_to, head_id, action, context="mip"
                    ),
                )
                return

            if action == "main":
                message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}</blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative)) if premium.csi_response_normative else "‚Äî"}</blockquote>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first)) if premium.target_goal_first else "‚Äî"} / {SalaryFormatter.format_value(round(premium.target_goal_second)) if premium.target_goal_second else "‚Äî"}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + SalaryFormatter.format_value(premium.delay, " —Å–µ–∫") if user.division != "–ù–¶–ö" else ""}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "calculator":
                csi_calculation = KPICalculator.calculate_csi_needed(
                    user.division, premium.csi, premium.csi_normative
                )
                flr_calculation = KPICalculator.calculate_flr_needed(
                    user.division, premium.flr, premium.flr_normative
                )
                gok_calculation = KPICalculator.calculate_gok_needed(
                    user.division, premium.gok, premium.gok_normative
                )
                target_calculation = KPICalculator.calculate_target_needed(
                    premium.target,
                    premium.target_goal_first,
                    premium.target_goal_second,
                    premium.target_type,
                )

                message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

<b>–§–ò–û:</b> <a href="https://t.me/{user.username}">{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.csi)} ({SalaryFormatter.format_percentage(premium.csi_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.flr)} ({SalaryFormatter.format_percentage(premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(premium.gok))} ({SalaryFormatter.format_percentage(premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)} ({SalaryFormatter.format_percentage(round((premium.target_goal_first / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_first else (premium.target / premium.target_goal_first * 100) if premium.target_goal_first and premium.target_goal_first > 0 else 0))} / {SalaryFormatter.format_percentage(round((premium.target_goal_second / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_second else (premium.target / premium.target_goal_second * 100) if premium.target_goal_second and premium.target_goal_second > 0 else 0))})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "salary":
                user_premium = await kpi_repo.spec_premium.get_premium(
                    fullname=user.fullname
                )

                salary_result = await SalaryCalculator.calculate_salary(
                    user=user, premium_data=user_premium
                )

                message_text = SalaryFormatter.format_salary_message(
                    salary_result, user_premium
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –¥–ª—è {user.fullname}: {e}")

            message_text = f"""üìä <b>KPI: {user.fullname}</b>

‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

<i>–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_user_kpi_kb(
                user_id, return_to, head_id, action, context="mip"
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI", show_alert=True)


@mip_search_router.callback_query(SearchMemberKPIMenu.filter())
async def search_member_kpi_menu(
    callback: CallbackQuery,
    callback_data: SearchMemberKPIMenu,
    user: Employee,
    stp_repo: MainRequestsRepo,
    kpi_repo: KPIRequestsRepo,
):
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ KPI –º–µ–Ω—é –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    action = callback_data.action
    page = callback_data.page

    message_text = ""

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º KPI –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            premium = await kpi_repo.spec_premium.get_premium(fullname=member.fullname)

            if premium is None:
                message_text = f"""üìä <b>KPI: {member.fullname}</b>

‚ùå <b>–î–∞–Ω–Ω—ã–µ KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.

<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

                await callback.message.edit_text(
                    message_text,
                    reply_markup=search_member_kpi_kb(member_id, head_id, page, action),
                )
                return

            if action == "main":
                message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}</blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative)) if premium.csi_response_normative else "‚Äî"}</blockquote>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first)) if premium.target_goal_first else "‚Äî"} / {SalaryFormatter.format_value(round(premium.target_goal_second)) if premium.target_goal_second else "‚Äî"}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if member.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + SalaryFormatter.format_value(premium.delay, " —Å–µ–∫") if member.division != "–ù–¶–ö" else ""}

<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "calculator":
                csi_calculation = KPICalculator.calculate_csi_needed(
                    member.division, premium.csi, premium.csi_normative
                )
                flr_calculation = KPICalculator.calculate_flr_needed(
                    member.division, premium.flr, premium.flr_normative
                )
                gok_calculation = KPICalculator.calculate_gok_needed(
                    member.division, premium.gok, premium.gok_normative
                )
                target_calculation = KPICalculator.calculate_target_needed(
                    premium.target,
                    premium.target_goal_first,
                    premium.target_goal_second,
                    premium.target_type,
                )

                message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.csi)} ({SalaryFormatter.format_percentage(premium.csi_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.flr)} ({SalaryFormatter.format_percentage(premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(premium.gok))} ({SalaryFormatter.format_percentage(premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)} ({SalaryFormatter.format_percentage(round((premium.target_goal_first / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_first else (premium.target / premium.target_goal_first * 100) if premium.target_goal_first and premium.target_goal_first > 0 else 0))} / {SalaryFormatter.format_percentage(round((premium.target_goal_second / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_second else (premium.target / premium.target_goal_second * 100) if premium.target_goal_second and premium.target_goal_second > 0 else 0))})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if member.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {premium.updated_at.strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

            elif action == "salary":
                user_premium = await kpi_repo.spec_premium.get_premium(
                    fullname=user.fullname
                )

                salary_result = await SalaryCalculator.calculate_salary(
                    user=user, premium_data=user_premium
                )

                message_text = SalaryFormatter.format_salary_message(
                    salary_result, user_premium
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI –¥–ª—è {member.fullname}: {e}")

            message_text = f"""üìä <b>KPI: {member.fullname}</b>

‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

<i>–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=search_member_kpi_kb(member_id, head_id, page, action),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KPI", show_alert=True)


@mip_search_router.callback_query(ViewUserSchedule.filter(F.context == "mip"))
async def view_user_schedule(
    callback: CallbackQuery,
    callback_data: ViewUserSchedule,
    stp_repo: MainRequestsRepo,
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    return_to = callback_data.return_to
    head_id = callback_data.head_id
    requested_month_idx = callback_data.month_idx

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=current_month, compact=True, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                    context="mip",
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=current_month,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=False,
                    context="mip",
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@mip_search_router.callback_query(ScheduleNavigation.filter(F.context == "mip"))
async def navigate_user_schedule(
    callback: CallbackQuery,
    callback_data: ScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    return_to = callback_data.return_to
    head_id = callback_data.head_id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=user, month=month_to_display, compact=compact, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                    context="mip",
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href='t.me/{user.username}'>{user.fullname}</a>
<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {user.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {user.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=user_schedule_with_month_kb(
                    user_id=user_id,
                    current_month=month_to_display,
                    return_to=return_to,
                    head_id=head_id,
                    is_detailed=not compact,
                    context="mip",
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@mip_search_router.callback_query(SelectUserRole.filter())
async def process_role_change(
    callback: CallbackQuery, callback_data: SelectUserRole, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_data.user_id
    new_role = callback_data.role

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await stp_repo.employee.get_user(user_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if user.role == new_role:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —ç—Ç—É —Ä–æ–ª—å", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
        old_role_name = (
            roles[user.role]
            if user.role < len(roles)
            else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({user.role})"
        )
        new_role_name = (
            roles[new_role]
            if new_role < len(roles)
            else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ({new_role})"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.employee.update_user(user_id=user_id, role=new_role)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"""<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω: {old_role_name} ‚Üí {new_role_name}

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞</i>""",
            )
        except Exception as notify_error:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {notify_error}"
            )

        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {old_role_name} ‚Üí {new_role_name}"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_callback_data = SearchUserResult(user_id=user_id)
        await show_user_details(callback, user_callback_data, stp_repo)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è search-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö callback data (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å head group members)


@mip_search_router.callback_query(HeadGroupMembersMenuForSearch.filter())
async def group_members_pagination_cb_search(
    callback: CallbackQuery,
    callback_data: HeadGroupMembersMenuForSearch,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    head_id = callback_data.head_id
    page = callback_data.page

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
        head_user = await stp_repo.employee.get_user(user_id=head_id)
        if not head_user:
            await callback.answer("‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        group_members = await stp_repo.employee.get_users_by_head(head_user.fullname)

        if not group_members:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        total_members = len(group_members)

        message_text = f"""üë• <b>–ì—Ä—É–ø–ø–∞: {head_user.fullname}</b>

–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{total_members}</b>

<blockquote><b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>
üîí - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
üëÆ - –¥–µ–∂—É—Ä–Ω—ã–π
üî® - root</blockquote>

<i>–ù–∞–∂–º–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"""

        await callback.message.edit_text(
            message_text,
            reply_markup=head_group_members_kb_for_search(
                group_members, current_page=page, head_id=head_id
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è {head_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@mip_search_router.callback_query(HeadMemberDetailMenuForSearch.filter())
async def member_detail_cb_search(
    callback: CallbackQuery,
    callback_data: HeadMemberDetailMenuForSearch,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    page = callback_data.page

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        message_text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}
<b>Email:</b> {member.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> <code>{roles.get(member.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}</code>"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not member.user_id:
            message_text += "\n<b>–°—Ç–∞—Ç—É—Å:</b> üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ"

        message_text += "\n\n<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"

        await callback.message.edit_text(
            message_text,
            reply_markup=head_member_detail_kb_for_search(
                member_id, head_id, page, member.role
            ),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞", show_alert=True
        )


@mip_search_router.callback_query(HeadMemberActionMenuForSearch.filter())
async def member_action_cb_search(
    callback: CallbackQuery,
    callback_data: HeadMemberActionMenuForSearch,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/KPI/–∏–≥—Ä–∞) –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    action = callback_data.action
    page = callback_data.page

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if action == "schedule":
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule_callback_data = SearchMemberScheduleMenu(
                member_id=member.id, head_id=head_id, month_idx=0, page=page
            )
            await view_search_member_schedule(
                callback, schedule_callback_data, stp_repo
            )
            return

        elif action == "game_profile":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å user_id (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)
            if not member.user_id:
                await callback.message.edit_text(
                    f"""üèÆ <b>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>

‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ</b>

<i>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>""",
                    reply_markup=head_member_detail_kb_for_search(
                        member_id, head_id, page, member.role
                    ),
                )
                return

            user_balance = await stp_repo.transaction.get_user_balance(
                user_id=member.user_id
            )
            achievements_sum = await stp_repo.transaction.get_user_achievements_sum(
                user_id=member.user_id
            )
            purchases_sum = await stp_repo.purchase.get_user_purchases_sum(
                user_id=member.user_id
            )
            level_info_text = LevelingSystem.get_level_info_text(
                achievements_sum, user_balance
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
            message_text = f"""üèÆ <b>–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or ""}

{level_info_text}

<blockquote expandable><b>‚ú® –ë–∞–ª–∞–Ω—Å</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {achievements_sum} –±–∞–ª–ª–æ–≤
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {purchases_sum} –±–∞–ª–ª–æ–≤</blockquote>"""

            await callback.message.edit_text(
                message_text,
                reply_markup=head_member_detail_kb_for_search(
                    member_id, head_id, page, member.role
                ),
            )
            return

        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è {action} –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)


@mip_search_router.callback_query(HeadMemberRoleChangeForSearch.filter())
async def change_member_role_search(
    callback: CallbackQuery,
    callback_data: HeadMemberRoleChangeForSearch,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    page = callback_data.page

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞
        if member.role not in [1, 3]:
            await callback.answer(
                "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å", show_alert=True
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        new_role = 3 if member.role == 1 else 1
        old_role_name = "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" if member.role == 1 else "–î–µ–∂—É—Ä–Ω—ã–π"
        new_role_name = "–î–µ–∂—É—Ä–Ω—ã–π" if new_role == 3 else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await stp_repo.employee.update_user(user_id=member.user_id, role=new_role)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if member.user_id:
            try:
                await callback.bot.send_message(
                    chat_id=member.user_id,
                    text=f"""<b>üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–£—Ä–æ–≤–µ–Ω—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω: {old_role_name} ‚Üí {new_role_name}

<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞</i>""",
                )
                await callback.answer(
                    "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏"
                )
            except Exception as e:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É :(")
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.user_id}: {e}"
                )

        logger.info(
            f"[–ú–ò–ü] - [–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏] {callback.from_user.username} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {old_role_name} ‚Üí {new_role_name}"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        member_detail_callback_data = HeadMemberDetailMenuForSearch(
            member_id=member_id, head_id=head_id, page=page
        )
        await member_detail_cb_search(callback, member_detail_callback_data, stp_repo)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏", show_alert=True)


@mip_search_router.callback_query(SearchMemberScheduleMenu.filter())
async def view_search_member_schedule(
    callback: CallbackQuery,
    callback_data: SearchMemberScheduleMenu,
    stp_repo: MainRequestsRepo,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    requested_month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if requested_month_idx > 0:
            current_month = get_month_name_by_index(requested_month_idx)
        else:
            current_month = schedule_service.get_current_month()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=current_month, compact=True, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=search_member_schedule_kb(
                    member_id=member_id,
                    head_id=head_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=search_member_schedule_kb(
                    member_id=member_id,
                    head_id=head_id,
                    current_month=current_month,
                    page=page,
                    is_detailed=False,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)


@mip_search_router.callback_query(SearchMemberScheduleNavigation.filter())
async def navigate_search_member_schedule(
    callback: CallbackQuery,
    callback_data: SearchMemberScheduleNavigation,
    stp_repo: MainRequestsRepo,
):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø–æ–∏—Å–∫–∞"""
    member_id = callback_data.member_id
    head_id = callback_data.head_id
    action = callback_data.action
    month_idx = callback_data.month_idx
    page = callback_data.page

    try:
        member = await stp_repo.employee.get_user(main_id=member_id)

        if not member:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞
        compact = action not in ["detailed"]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
        month_to_display = get_month_name_by_index(month_idx)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏
            schedule_response = await schedule_service.get_user_schedule_response(
                user=member, month=month_to_display, compact=compact, stp_repo=stp_repo
            )

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

<blockquote>{schedule_response}</blockquote>""",
                reply_markup=search_member_schedule_kb(
                    member_id=member_id,
                    head_id=head_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

        except Exception as schedule_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_message = "‚ùå –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(schedule_error).lower():
                error_message = f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {member.fullname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
            elif "—Ñ–∞–π–ª" in str(schedule_error).lower():
                error_message = "‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await callback.message.edit_text(
                f"""üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>

<b>–§–ò–û:</b> <a href="https://t.me/{member.username}">{member.fullname}</a>
<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {member.position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} {member.division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

{error_message}

<i>–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>""",
                reply_markup=search_member_schedule_kb(
                    member_id=member_id,
                    head_id=head_id,
                    current_month=month_to_display,
                    page=page,
                    is_detailed=not compact,
                ),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
