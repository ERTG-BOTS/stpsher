import datetime

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery

from infrastructure.database.models import Employee
from infrastructure.database.repo.KPI.requests import KPIRequestsRepo
from tgbot.keyboards.user.kpi import kpi_calculator_kb, kpi_kb, kpi_salary_kb
from tgbot.keyboards.user.main import MainMenu
from tgbot.services.salary import KPICalculator, SalaryCalculator, SalaryFormatter

user_kpi_router = Router()
user_kpi_router.message.filter(F.chat.type == "private")
user_kpi_router.callback_query.filter(F.message.chat.type == "private")


@user_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi"))
async def user_kpi_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)

    if (
        premium is None
        or premium.csi_premium is None
        or premium.flr_premium is None
        or premium.gok_premium is None
        or premium.tests_premium is None
        or premium.total_premium is None
    ):
        await callback.message.edit_text(
            """üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(

<i>–í–µ—Ä–Ω–∏—Å—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è</i>""",
            reply_markup=kpi_kb(),
        )
        return

    message_text = f"""üåü <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ - {SalaryFormatter.format_percentage(premium.csi_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}  </blockquote>

üéØ <b>–û—Ç–∫–ª–∏–∫</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.csi_response)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.csi_response_normative))}</blockquote>

üîß <b>FLR - {SalaryFormatter.format_percentage(premium.flr_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.flr)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}</blockquote>

‚öñÔ∏è <b>–ì–û–ö - {SalaryFormatter.format_percentage(premium.gok_premium)}</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.gok)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.gok_normative)}</blockquote>

üéØ <b>–¶–µ–ª—å - {SalaryFormatter.format_percentage(premium.target_premium)}</b>
<blockquote>–¢–∏–ø: {premium.target_type or "‚Äî"}
–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)}
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}</blockquote>

üíº <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>
<blockquote>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {SalaryFormatter.format_percentage(premium.discipline_premium)}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {SalaryFormatter.format_percentage(premium.tests_premium)}
–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {SalaryFormatter.format_percentage(premium.thanks_premium)}
–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ: {SalaryFormatter.format_percentage(premium.tutors_premium)}
–†—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: {SalaryFormatter.format_percentage(premium.head_adjust_premium)}</blockquote>

üí∞ <b>–ò—Ç–æ–≥–æ:</b>
<b>–û–±—â–∞—è –ø—Ä–µ–º–∏—è: {SalaryFormatter.format_percentage(premium.total_premium)}</b>

{"üìà –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count) if user.division == "–ù–¶–ö" else "üìà –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + SalaryFormatter.format_value(premium.contacts_count)}
{"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: " + SalaryFormatter.format_value(premium.delay, " —Å–µ–∫") if user.division != "–ù–¶–ö" else ""}
<i>–í—ã–≥—Ä—É–∂–µ–Ω–æ: {premium.updated_at.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>
<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M")}</i>"""

    try:
        await callback.message.edit_text(message_text, reply_markup=kpi_kb())
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@user_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi_calculator"))
async def user_kpi_calculator_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)

    if (
        premium is None
        or premium.csi_premium is None
        or premium.flr_premium is None
        or premium.gok_premium is None
        or premium.tests_premium is None
        or premium.total_premium is None
    ):
        await callback.message.edit_text(
            """üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(

<i>–í–µ—Ä–Ω–∏—Å—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è</i>""",
            reply_markup=kpi_calculator_kb(),
        )
        return

    csi_calculation = KPICalculator.calculate_csi_needed(
        user.division, premium.csi, premium.csi_normative
    )
    flr_calculation = KPICalculator.calculate_flr_needed(
        user.division, premium.flr, premium.flr_normative
    )
    gok_calculation = KPICalculator.calculate_gok_needed(
        user.division, premium.gok, premium.gok_normative
    )
    target_calculation = KPICalculator.calculate_target_needed(
        premium.target,
        premium.target_goal_first,
        premium.target_goal_second,
        premium.target_type,
    )

    message_text = f"""üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä KPI</b>

üìä <b>–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.csi)} ({SalaryFormatter.format_percentage(premium.csi_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.csi_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{csi_calculation}</blockquote>

üîß <b>FLR</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(premium.flr)} ({SalaryFormatter.format_percentage(premium.flr_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(premium.flr_normative)}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{flr_calculation}</blockquote>

‚öñÔ∏è <b>–ì–û–ö</b>
<blockquote>–¢–µ–∫—É—â–∏–π: {SalaryFormatter.format_value(round(premium.gok))} ({SalaryFormatter.format_percentage(premium.gok_normative_rate)})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.gok_normative))}

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{gok_calculation}</blockquote>

üéØ <b>–¶–µ–ª—å</b>
<blockquote>–§–∞–∫—Ç: {SalaryFormatter.format_value(premium.target)} ({SalaryFormatter.format_percentage(round((premium.target_goal_first / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_first else (premium.target / premium.target_goal_first * 100) if premium.target_goal_first and premium.target_goal_first > 0 else 0))} / {SalaryFormatter.format_percentage(round((premium.target_goal_second / premium.target * 100) if premium.target_type and "AHT" in premium.target_type and premium.target and premium.target > 0 and premium.target_goal_second else (premium.target / premium.target_goal_second * 100) if premium.target_goal_second and premium.target_goal_second > 0 else 0))})
–ü–ª–∞–Ω: {SalaryFormatter.format_value(round(premium.target_goal_first))} / {SalaryFormatter.format_value(round(premium.target_goal_second))}

–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 {"—á–∞—Ç–æ–≤" if user.division == "–ù–¶–ö" else "–∑–≤–æ–Ω–∫–æ–≤"} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏ –∑–∞ —Ü–µ–ª—å

<b>–î–ª—è –ø—Ä–µ–º–∏–∏:</b>
{target_calculation}</blockquote>

<i>–î–∞–Ω–Ω—ã–µ –æ—Ç: {premium.updated_at.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone(datetime.timedelta(hours=5))).strftime("%d.%m.%y %H:%M") if premium.updated_at else "‚Äî"}</i>"""

    try:
        await callback.message.edit_text(message_text, reply_markup=kpi_calculator_kb())
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@user_kpi_router.callback_query(MainMenu.filter(F.menu == "kpi_salary"))
async def user_kpi_salary_cb(
    callback: CallbackQuery, user: Employee, kpi_repo: KPIRequestsRepo
):
    premium = await kpi_repo.spec_premium.get_premium(fullname=user.fullname)

    if (
        premium is None
        or premium.csi_premium is None
        or premium.flr_premium is None
        or premium.gok_premium is None
        or premium.tests_premium is None
        or premium.total_premium is None
    ):
        await callback.message.edit_text(
            """üí∞ <b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–º–∏—É–º–µ :(

<i>–í–µ—Ä–Ω–∏—Å—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è</i>""",
            reply_markup=kpi_salary_kb(),
        )
        return

    try:
        salary_result = await SalaryCalculator.calculate_salary(
            user=user, premium_data=premium
        )

        # Format the result using centralized formatter
        message_text = SalaryFormatter.format_salary_message(salary_result, premium)
    except Exception as e:
        await callback.message.edit_text(
            f"""üí∞ <b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}""",
            reply_markup=kpi_salary_kb(),
        )
        return

    try:
        await callback.message.edit_text(
            message_text, reply_markup=kpi_salary_kb(), disable_web_page_preview=True
        )
    except TelegramBadRequest:
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
