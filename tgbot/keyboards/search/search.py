from typing import List

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.database.models import Employee
from tgbot.keyboards.user.main import MainMenu
from tgbot.keyboards.user.schedule.main import MONTH_EMOJIS
from tgbot.misc.helpers import get_role


class SearchFilterToggleMenu(CallbackData, prefix="sf_toggle"):
    menu: str  # "specialists" –∏–ª–∏ "heads"
    filter_name: str  # "–ù–¶–ö", "–ù–¢–ü1" –∏–ª–∏ "–ù–¢–ü2"
    page: int = 1
    current_filters: str = "–ù–¶–ö,–ù–¢–ü1,–ù–¢–ü2"  # —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã


class SearchUserResult(CallbackData, prefix="search_user"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_search, etc.)
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class ViewUserSchedule(CallbackData, prefix="view_schedule"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    month_idx: int = 0  # –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (0 = —Ç–µ–∫—É—â–∏–π)
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class ViewUserKPI(CallbackData, prefix="view_kpi"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class HeadUserStatusSelect(CallbackData, prefix="head_user_status_select"):
    user_id: int
    return_to: str = "search"
    head_id: int = 0
    context: str = "head"


class HeadUserStatusChange(CallbackData, prefix="head_user_status_change"):
    user_id: int
    status_type: str  # "trainee" or "duty"
    return_to: str = "search"
    head_id: int = 0
    context: str = "head"


class HeadUserCasinoToggle(CallbackData, prefix="head_user_casino"):
    user_id: int
    return_to: str = "search"
    head_id: int = 0
    context: str = "head"


class ViewUserKPICalculator(CallbackData, prefix="view_kpi_calc"):
    user_id: int
    return_to: str = "search"
    head_id: int = 0
    context: str = "mip"


class ViewUserKPISalary(CallbackData, prefix="view_kpi_salary"):
    user_id: int
    return_to: str = "search"
    head_id: int = 0
    context: str = "mip"


class SearchHeadGroupMembers(CallbackData, prefix="search_head_group"):
    head_id: int
    page: int = 1
    context: str = "mip"


class SearchHeadGroupMemberDetail(CallbackData, prefix="search_head_member"):
    head_id: int
    member_id: int
    page: int = 1
    context: str = "mip"


class ScheduleNavigation(CallbackData, prefix="sched_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    action: str  # "prev", "next", "-", "detailed", "compact"
    user_id: int
    month_idx: int  # –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ (1-12)
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


def get_gender_emoji(fullname: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏"""
    if not fullname:
        return ""

    name_parts = fullname.strip().split()
    if len(name_parts) < 2:
        return ""

    # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ (–∏–º—è) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    first_name = name_parts[1].lower()

    # –ú—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    male_endings = [
        "–∏—á",
        "–æ–≤–∏—á",
        "–µ–≤–∏—á",
        "–∏—á",
        "–µ–π",
        "–∞–π",
        "–∏–π",
        "–æ–Ω",
        "–∞–Ω",
        "–µ–Ω",
        "–∏–Ω",
        "–∏–º",
        "–µ–º",
        "–∞–º",
        "—É–º",
        "—é—Ä",
        "—É—Ä",
        "–æ—Ä",
        "–µ—Ä",
        "–∏—Ä",
        "–∞—Ä",
    ]
    # –ñ–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    female_endings = [
        "–Ω–∞",
        "–ª–∞",
        "—Ä–∞",
        "—Å–∞",
        "—Ç–∞",
        "–∫–∞",
        "–≥–∞",
        "–≤–∞",
        "–¥–∞",
        "–∑–∞",
        "–º–∞",
        "–ø–∞",
        "—Ö–∞",
        "—Ü–∞",
        "—á–∞",
        "—à–∞",
        "—â–∞",
        "—å—è",
        "–∏—è",
        "–µ—è",
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    for ending in male_endings:
        if first_name.endswith(ending):
            return "üë® "

    for ending in female_endings:
        if first_name.endswith(ending):
            return "üë© "

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    return ""


def parse_filters(filters_str: str) -> set[str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã
    :param filters_str: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :return:
    """
    if not filters_str:
        return {"–ù–¶–ö", "–ù–¢–ü1", "–ù–¢–ü2"}
    return set(
        filter_name.strip()
        for filter_name in filters_str.split(",")
        if filter_name.strip()
    )


def filters_to_string(filters_set: set[str]) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏
    :param filters_set: –°–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :return:
    """
    return ",".join(sorted(filters_set))


def toggle_filter(current_filters: str, filter_to_toggle: str) -> str:
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    :param current_filters: –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :param filter_to_toggle: –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :return:
    """
    filters_set = parse_filters(current_filters)

    if filter_to_toggle in filters_set:
        filters_set.discard(filter_to_toggle)
    else:
        filters_set.add(filter_to_toggle)

    # Ensure at least one filter is active
    if not filters_set:
        filters_set = {"–ù–¶–ö", "–ù–¢–ü1", "–ù–¢–ü2"}

    return filters_to_string(filters_set)


def create_filters_row(
    menu: str, current_filters: str, page: int = 1
) -> List[InlineKeyboardButton]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    :param menu: –ú–µ–Ω—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä
    :param current_filters: –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    :param page: –¢–µ–∫—É—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :return:
    """
    active_filters = parse_filters(current_filters)
    buttons = []

    # –î–ª—è heads –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ù–¶–ö –∏ –ù–¢–ü2
    if menu == "heads":
        filter_options = [("–ù–¶–ö", "–ù–¶–ö"), ("–ù–¢–ü2", "–ù–¢–ü2")]
    else:
        filter_options = [("–ù–¶–ö", "–ù–¶–ö"), ("–ù–¢–ü1", "–ù–¢–ü1"), ("–ù–¢–ü2", "–ù–¢–ü2")]

    for display_name, filter_name in filter_options:
        is_active = filter_name in active_filters
        emoji = "‚úÖ" if is_active else "‚òëÔ∏è"

        buttons.append(
            InlineKeyboardButton(
                text=f"{emoji} {display_name}",
                callback_data=SearchFilterToggleMenu(
                    menu=menu,
                    filter_name=filter_name,
                    page=page,
                    current_filters=current_filters,
                ).pack(),
            )
        )

    return buttons


def search_results_kb(
    users: list[Employee],
    page: int,
    total_pages: int,
    search_type: str,
    context: str = "mip",
    back_callback: str = "search",
    filters: str = "–ù–¶–ö,–ù–¢–ü1,–ù–¢–ü2",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    :param users: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :param back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    from tgbot.keyboards.group.main import short_name

    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –¥–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ)
    user_buttons = []
    for user in users:
        # –§–æ—Ä–º–∞—Ç: "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ | –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è"
        division = user.division or "‚Äî"
        display_name = f"{division} | {short_name(user.fullname)}"
        role_emoji = get_role(user.role)["emoji"]
        user_buttons.append(
            InlineKeyboardButton(
                text=f"{role_emoji}{display_name}",
                callback_data=SearchUserResult(
                    user_id=user.user_id or user.id, context=context
                ).pack(),
            )
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(user_buttons), 2):
        row = user_buttons[i : i + 2]
        buttons.append(row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Å—Ç–∏–ª—å shop_kb - 5 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ)
    if total_pages > 1:
        from tgbot.keyboards.search.main import SearchMenu

        pagination_row = []

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=SearchMenu(
                        menu=search_type, page=1, filters=filters
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=SearchMenu(
                        menu=search_type, page=page - 1, filters=filters
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=SearchMenu(
                        menu=search_type, page=page + 1, filters=filters
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=SearchMenu(
                        menu=search_type, page=total_pages, filters=filters
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    filter_buttons = create_filters_row(search_type, filters, page)
    if filter_buttons:
        buttons.append(filter_buttons)

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–æ–º–æ–π"
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="search").pack()
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_detail_kb(
    user: Employee,
    return_to: str = "search",
    head_id: int = 0,
    context: str = "mip",
    show_edit_buttons: bool = True,
    is_head: bool = False,
    head_user_id: int = 0,
    viewer_role: int = 1,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param return_to: –ö—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :param show_edit_buttons: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :param is_head: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
    :param head_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    :param viewer_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = []

    # –î–ª—è —Ä–æ–ª–µ–π 1 –∏ 3 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if viewer_role in [1, 3]:
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if return_to == "search":
            back_callback = "search" if context == "mip" else "main"
        else:
            back_callback = return_to

        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
                ),
                InlineKeyboardButton(
                    text="üè† –î–æ–º–æ–π", callback_data=MainMenu(menu="main").pack()
                ),
            ]
        )
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # –î–ª—è —Ä–æ–ª–∏ 2 (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    elif viewer_role == 2:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ KPI)
        action_buttons = [
            InlineKeyboardButton(
                text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=ViewUserSchedule(
                    user_id=user.user_id or user.id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üåü KPI",
                callback_data=ViewUserKPI(
                    user_id=user.user_id or user.id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
        ]
        buttons.append(action_buttons)

        # Show edit buttons only if head can edit this user (not other heads)
        if show_edit_buttons:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üü¢ –ö–∞–∑–∏–Ω–æ" if user.is_casino_allowed else "üî¥ –ö–∞–∑–∏–Ω–æ",
                        callback_data=HeadUserCasinoToggle(
                            user_id=user.user_id or user.id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ]
            )
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=HeadUserStatusSelect(
                            user_id=user.user_id or user.id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    )
                ]
            )

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π (–ú–ò–ü –∏ –≤—ã—à–µ) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    else:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ KPI) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
        action_buttons = [
            InlineKeyboardButton(
                text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=ViewUserSchedule(
                    user_id=user.user_id or user.id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üåü KPI",
                callback_data=ViewUserKPI(
                    user_id=user.user_id or user.id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
        ]
        buttons.append(action_buttons)

        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è MIP –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if show_edit_buttons and context == "mip":
            from tgbot.keyboards.mip.search import EditUserMenu

            edit_buttons = [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –§–ò–û",
                    callback_data=EditUserMenu(
                        user_id=user.user_id, action="edit_fullname"
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="üõ°Ô∏è –†–æ–ª—å",
                    callback_data=EditUserMenu(
                        user_id=user.user_id, action="edit_role"
                    ).pack(),
                ),
            ]
            buttons.append(edit_buttons)
        elif show_edit_buttons and context == "head":
            # Only show edit buttons for heads if they can actually edit this user
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üü¢ –ö–∞–∑–∏–Ω–æ" if user.is_casino_allowed else "üî¥ –ö–∞–∑–∏–Ω–æ",
                        callback_data=HeadUserCasinoToggle(
                            user_id=user.user_id or user.id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ]
            )
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=HeadUserStatusSelect(
                            user_id=user.user_id or user.id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    )
                ]
            )

    # –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    if is_head:
        from tgbot.keyboards.mip.search import HeadGroupMenu

        buttons.append(
            [
                InlineKeyboardButton(
                    text="üë• –ì—Ä—É–ø–ø–∞",
                    callback_data=HeadGroupMenu(head_id=head_user_id).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if return_to == "search":
        back_callback = "search" if context == "mip" else "main"
    else:
        back_callback = return_to

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_back_kb(context: str = "mip") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–∏—Å–∫–∞

    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    back_callback = "search" if context == "mip" else "main"

    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def head_user_status_select_kb(
    user_id: int,
    return_to: str = "search",
    head_id: int = 0,
    context: str = "head",
    current_role: int = None,
    is_trainee: bool = False,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°—Ç–∞–∂–µ—Ä/–î–µ–∂—É—Ä–Ω—ã–π) –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–°—Ç–∞–∂–µ—Ä"
    trainee_text = "‚úÖ –°—Ç–∞–∂–µ—Ä" if is_trainee else "–°—Ç–∞–∂–µ—Ä"
    buttons.append(
        [
            InlineKeyboardButton(
                text=trainee_text,
                callback_data=HeadUserStatusChange(
                    user_id=user_id,
                    status_type="trainee",
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–î–µ–∂—É—Ä–Ω—ã–π" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–ª—å 1 –∏–ª–∏ 3)
    if current_role in [1, 3]:
        duty_text = "‚úÖ –î–µ–∂—É—Ä–Ω—ã–π" if current_role == 3 else "–î–µ–∂—É—Ä–Ω—ã–π"
        buttons.append(
            [
                InlineKeyboardButton(
                    text=duty_text,
                    callback_data=HeadUserStatusChange(
                        user_id=user_id,
                        status_type="duty",
                        return_to=return_to,
                        head_id=head_id,
                        context=context,
                    ).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚ÜôÔ∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_schedule_with_month_kb(
    user_id: int,
    current_month: str,
    return_to: str = "search",
    head_id: int = 0,
    is_detailed: bool = False,
    context: str = "mip",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    :param return_to: –ö—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    :param is_detailed: –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏ –≤–∏–¥
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ]

    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ title case –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ month_names
        current_month_title = current_month.lower().capitalize()
        current_month_idx = month_names.index(current_month_title) + 1

    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ title case, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ lowercase –≤ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–∞—Ö
        from tgbot.misc.dicts import russian_months

        try:
            for idx, month_name in russian_months.items():
                if month_name.lower() == current_month.lower():
                    current_month_idx = idx
                    break
            else:
                current_month_idx = 1  # –î–µ—Ñ–æ–ª—Ç –∫ —è–Ω–≤–∞—Ä—é
        except Exception:
            current_month_idx = 1

    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_buttons = []
    prev_month_idx = current_month_idx - 1 if current_month_idx > 1 else 12
    next_month_idx = current_month_idx + 1 if current_month_idx < 12 else 1

    nav_buttons.append(
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=ScheduleNavigation(
                action="prev",
                user_id=user_id,
                month_idx=prev_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–∞
    month_emoji = MONTH_EMOJIS.get(current_month.lower(), "üìÖ")

    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{month_emoji} {current_month.capitalize()}",
            callback_data=ScheduleNavigation(
                action="-",
                user_id=user_id,
                month_idx=current_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    nav_buttons.append(
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=ScheduleNavigation(
                action="next",
                user_id=user_id,
                month_idx=next_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    buttons.append(nav_buttons)

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ/–∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
    detail_action = "compact" if is_detailed else "detailed"
    detail_text = "üìã –ö—Ä–∞—Ç–∫–æ" if is_detailed else "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ"

    buttons.append(
        [
            InlineKeyboardButton(
                text=detail_text,
                callback_data=ScheduleNavigation(
                    action=detail_action,
                    user_id=user_id,
                    month_idx=current_month_idx,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_month_name_by_index(month_idx: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    from tgbot.misc.dicts import russian_months

    if 1 <= month_idx <= 12:
        return russian_months[month_idx]
    return "—Å–µ–Ω—Ç—è–±—Ä—å"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def search_user_kpi_kb(
    user_id: int,
    return_to: str = "search",
    head_id: int = 0,
    current_action: str = "main",
    context: str = "mip",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è KPI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞
    """
    buttons = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ KPI –º–µ–Ω—é
    if current_action == "main":
        buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="üßÆ –ù–æ—Ä–º–∞—Ç–∏–≤—ã",
                        callback_data=ViewUserKPICalculator(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞",
                        callback_data=ViewUserKPISalary(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=ViewUserKPI(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
            ]
        )
    elif current_action == "calculator":
        buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="üåü –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                        callback_data=ViewUserKPI(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞",
                        callback_data=ViewUserKPISalary(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=ViewUserKPICalculator(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
            ]
        )
    elif current_action == "salary":
        buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="üåü –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
                        callback_data=ViewUserKPI(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text="üßÆ –ù–æ—Ä–º–∞—Ç–∏–≤—ã",
                        callback_data=ViewUserKPICalculator(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=ViewUserKPISalary(
                            user_id=user_id,
                            return_to=return_to,
                            head_id=head_id,
                            context=context,
                        ).pack(),
                    ),
                ],
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_head_group_kb(
    head_id: int,
    members: list[Employee],
    page: int = 1,
    context: str = "mip",
    members_per_page: int = 8,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫–µ
    """
    from tgbot.keyboards.group.main import short_name

    buttons = []

    if not members:
        # –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data=SearchUserResult(
                        user_id=head_id, context=context
                    ).pack(),
                )
            ]
        )
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_members = len(members)
    total_pages = (total_members + members_per_page - 1) // members_per_page

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * members_per_page
    end_idx = start_idx + members_per_page
    page_members = members[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (2 –≤ —Ä—è–¥)
    for i in range(0, len(page_members), 2):
        row = []

        # –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä—è–¥—É
        member = page_members[i]
        member_short_name = short_name(member.fullname)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_emoji = "üîí " if not member.user_id else ""
        role_emoji = {3: "üëÆ ", 10: "üî® "}.get(member.role, "")
        trainee_emoji = "üë∂üèª " if member.is_trainee else ""
        button_text = f"{status_emoji}{role_emoji}{trainee_emoji}{member_short_name}"

        row.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=SearchHeadGroupMemberDetail(
                    head_id=head_id,
                    member_id=member.user_id or member.id,
                    page=page,
                    context=context,
                ).pack(),
            )
        )

        # –í—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_members):
            member = page_members[i + 1]
            member_short_name = short_name(member.fullname)
            status_emoji = "üîí " if not member.user_id else ""
            role_emoji = {3: "üëÆ ", 10: "üî® "}.get(member.role, "")
            trainee_emoji = "üë∂üèª " if member.is_trainee else ""
            button_text = (
                f"{status_emoji}{role_emoji}{trainee_emoji}{member_short_name}"
            )

            row.append(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=SearchHeadGroupMemberDetail(
                        head_id=head_id,
                        member_id=member.user_id or member.id,
                        page=page,
                        context=context,
                    ).pack(),
                )
            )

        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_row = []

        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ (‚è™ –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 2:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è™",
                    callback_data=SearchHeadGroupMembers(
                        head_id=head_id, page=1, context=context
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (‚¨ÖÔ∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=SearchHeadGroupMembers(
                        head_id=head_id, page=page - 1, context=context
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="noop",
            )
        )

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚û°Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=SearchHeadGroupMembers(
                        head_id=head_id, page=page + 1, context=context
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        # –ü—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (‚è≠Ô∏è –∏–ª–∏ –ø—É—Å—Ç–æ)
        if page < total_pages - 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚è≠Ô∏è",
                    callback_data=SearchHeadGroupMembers(
                        head_id=head_id, page=total_pages, context=context
                    ).pack(),
                )
            )
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        buttons.append(pagination_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    back_callback = "search" if context == "mip" else "main"
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(user_id=head_id, context=context).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu=back_callback).pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)
