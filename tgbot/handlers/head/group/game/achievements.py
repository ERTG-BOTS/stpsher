import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from stp_database.repo.STP.requests import MainRequestsRepo

from tgbot.filters.role import HeadFilter
from tgbot.handlers.gok.game.main import filter_items_by_division
from tgbot.keyboards.head.group.game.achievements import head_achievements_paginated_kb
from tgbot.keyboards.head.group.game.main import HeadGameMenu
from tgbot.keyboards.mip.game.main import (
    FilterToggleMenu,
    GameMenu,
    parse_filters,
    toggle_filter,
)

head_game_achievements_router = Router()
head_game_achievements_router.message.filter(F.chat.type == "private", HeadFilter())
head_game_achievements_router.callback_query.filter(
    F.message.chat.type == "private", HeadFilter()
)

logger = logging.getLogger(__name__)


@head_game_achievements_router.callback_query(
    HeadGameMenu.filter(F.menu == "achievements")
)
async def head_achievements_menu(callback: CallbackQuery, stp_repo: MainRequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ achievements_all —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º callback_data —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    from tgbot.keyboards.mip.game.main import GameMenu

    new_callback_data = GameMenu(menu="achievements_all", page=1, filters="–ù–¶–ö,–ù–¢–ü")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await head_achievements_all(callback, new_callback_data, stp_repo)


@head_game_achievements_router.callback_query(
    GameMenu.filter(F.menu == "achievements_all")
)
async def head_achievements_all(
    callback: CallbackQuery, callback_data: GameMenu, stp_repo: MainRequestsRepo
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """

    # –î–æ—Å—Ç–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback data
    page = getattr(callback_data, "page", 1)
    filters = getattr(callback_data, "filters", "–ù–¶–ö,–ù–¢–ü")

    # –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    active_filters = parse_filters(filters)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    all_achievements = await stp_repo.achievement.get_achievements()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filtered_achievements = filter_items_by_division(all_achievements, active_filters)

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    achievements_per_page = 5
    total_achievements = len(filtered_achievements)
    total_pages = (
        total_achievements + achievements_per_page - 1
    ) // achievements_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * achievements_per_page
    end_idx = start_idx + achievements_per_page
    page_achievements = filtered_achievements[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    achievements_list = []
    for counter, achievement in enumerate(page_achievements, start=start_idx + 1):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª—è—Ö
        description = (
            str(achievement.description).replace("<", "&lt;").replace(">", "&gt;")
        )
        name = str(achievement.name).replace("<", "&lt;").replace(">", "&gt;")
        division = str(achievement.division).replace("<", "&lt;").replace(">", "&gt;")
        position = str(achievement.position).replace("<", "&lt;").replace(">", "&gt;")

        achievements_list.append(f"""{counter}. <b>{name}</b>
<blockquote>üèÖ –ù–∞–≥—Ä–∞–¥–∞: {achievement.reward} –±–∞–ª–ª–æ–≤
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üî∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position} {division}</blockquote>""")
        achievements_list.append("")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º (–Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º)
    stats_ntp = sum(
        1 for achievement in all_achievements if achievement.division == "–ù–¢–ü"
    )
    stats_nck = sum(
        1 for achievement in all_achievements if achievement.division == "–ù–¶–ö"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º
    filtered_stats = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {total_achievements}"

    message_text = f"""<b>üéØ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

<blockquote>–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
–ù–¢–ü: {stats_ntp} | –ù–¶–ö: {stats_nck}
{filtered_stats}</blockquote>

{chr(10).join(achievements_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=head_achievements_paginated_kb(page, total_pages, filters),
    )
    logger.info(
        f"[–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å] - [–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è] {callback.from_user.username} ({callback.from_user.id}): –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, —Ñ–∏–ª—å—Ç—Ä—ã: {filters}"
    )


@head_game_achievements_router.callback_query(
    FilterToggleMenu.filter(F.menu == "achievements_all")
)
async def head_achievements_toggle_filter(
    callback: CallbackQuery, callback_data: FilterToggleMenu, stp_repo: MainRequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    menu = callback_data.menu
    filter_name = callback_data.filter_name
    current_filters = callback_data.current_filters

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    new_filters = toggle_filter(current_filters, filter_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if menu == "achievements_all":
        await head_achievements_all(
            callback,
            GameMenu(menu="achievements_all", page=1, filters=new_filters),
            stp_repo,
        )
