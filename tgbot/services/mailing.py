import logging
import smtplib
import ssl
from email.header import Header
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from infrastructure.database.models import Product, Employee
from infrastructure.database.models.STP.purchase import Purchase
from tgbot.config import load_config

config = load_config(".env")

logger = logging.getLogger(__name__)


async def send_email(
    to_addrs: list[str] | str, subject: str, body: str, html: bool = True
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email

    Args:
        to_addrs: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
        subject: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞
        body: –¢–µ–ª–æ –ø–∏—Å—å–º–∞
        html: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    context = ssl.create_default_context()

    msg = MIMEMultipart()
    msg["From"] = config.mail.user
    msg["To"] = ", ".join(to_addrs) if isinstance(to_addrs, list) else to_addrs
    msg["Subject"] = Header(subject, "utf-8")

    content_type = "html" if html else "plain"
    msg.attach(MIMEText(body, content_type, "utf-8"))

    try:
        with smtplib.SMTP_SSL(
            host=config.mail.host, port=config.mail.port, context=context
        ) as server:
            server.login(user=config.mail.user, password=config.mail.password)
            server.sendmail(
                from_addr=config.mail.user, to_addrs=to_addrs, msg=msg.as_string()
            )
    except smtplib.SMTPException as e:
        logger.error(f"[Email] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")


async def send_auth_email(code: str, email: str, bot_username: str):
    email_subject = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ"
    email_content = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å<br><br>
    
–ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <b>{code}</b><br>
–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –±–æ—Ç–∞ @{bot_username} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    await send_email(to_addrs=email, subject=email_subject, body=email_content)
    logger.info(
        f"[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è] –ü–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}"
    )


async def send_activation_product_email(
    user: Employee,
    user_head: Employee | None,
    current_duty: Employee | None,
    product: Product,
    purchase: Purchase,
):
    email_subject = "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"
    email_content = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å!<br><br>

<b>{user.fullname}</b>{f" (https://t.me/{user.username})" if user.username else ""} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é <b>{product.name}</b><br>
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}<br>
üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{purchase.usage_count + 1}</b> –∏–∑ <b>{product.count}</b><br><br>

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –°–¢–ü—à–µ—Ä–∞"""

    email = []
    if user.division == "–ù–¶–ö":
        email.append(config.mail.nck_email_addr)
    else:
        email.append(config.mail.ntp_email_addr)

    if user_head and user_head.email:
        email.append(user_head.email)

    if current_duty and current_duty.email:
        email.append(current_duty.email)

    await send_email(to_addrs=email, subject=email_subject, body=email_content)
    logger.info(
        f"[–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {product.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.fullname} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}"
    )


async def send_cancel_product_email(
    user: Employee,
    user_head: Employee | None,
    current_duty: Employee | None,
    product: Product,
    purchase: Purchase,
):
    email_subject = "–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"
    email_content = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å!<br><br>

<b>{user.fullname}</b>{f" (https://t.me/{user.username})" if user.username else ""} –æ—Ç–º–µ–Ω–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <b>{product.name}</b><br>
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}<br>
üìç –ê–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{purchase.usage_count}</b> –∏–∑ <b>{product.count}</b>"""

    email = []
    if user.division == "–ù–¶–ö":
        email.append(config.mail.nck_email_addr)
    else:
        email.append(config.mail.ntp_email_addr)

    if user_head and user_head.email:
        email.append(user_head.email)

    if current_duty and current_duty.email:
        email.append(current_duty.email)

    await send_email(to_addrs=email, subject=email_subject, body=email_content)
    logger.info(
        f"[–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {product.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.fullname} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}"
    )
