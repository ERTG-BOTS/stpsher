from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from infrastructure.database.models import Employee
from tgbot.keyboards.user.main import MainMenu


class SearchUserResult(CallbackData, prefix="search_user"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (search, head_search, etc.)
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class ViewUserSchedule(CallbackData, prefix="view_schedule"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    month_idx: int = 0  # –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (0 = —Ç–µ–∫—É—â–∏–π)
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class ViewUserKPI(CallbackData, prefix="view_kpi"):
    user_id: int
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


class HeadUserStatusSelect(CallbackData, prefix="head_user_status_select"):
    user_id: int
    return_to: str = "search"
    head_id: int = 0
    context: str = "head"


class HeadUserStatusChange(CallbackData, prefix="head_user_status_change"):
    user_id: int
    status_type: str  # "trainee" or "duty"
    return_to: str = "search"
    head_id: int = 0
    context: str = "head"


class ScheduleNavigation(CallbackData, prefix="sched_nav"):
    """Callback data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    action: str  # "prev", "next", "-", "detailed", "compact"
    user_id: int
    month_idx: int  # –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ (1-12)
    return_to: str = "search"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    head_id: int = 0  # ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    context: str = "mip"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)


def search_results_kb(
    users: list[Employee],
    page: int,
    total_pages: int,
    search_type: str,
    context: str = "mip",
    back_callback: str = "search",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    :param users: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :param search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :param back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        status_emoji = ""
        if not user.user_id:
            status_emoji = "üîí "
        elif user.role == 3:
            status_emoji = "üëÆ "
        elif user.role == 4:
            status_emoji = "üî® "

        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"{status_emoji}{user.fullname}",
                    callback_data=SearchUserResult(
                        user_id=user.user_id or user.id, context=context
                    ).pack(),
                )
            ]
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 1:
        from tgbot.keyboards.mip.search import SearchMenu

        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=SearchMenu(menu=search_type, page=page - 1).pack(),
            )
        )

    if page < total_pages:
        from tgbot.keyboards.mip.search import SearchMenu

        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=SearchMenu(menu=search_type, page=page + 1).pack(),
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_detail_kb(
    user_id: int,
    return_to: str = "search",
    head_id: int = 0,
    context: str = "mip",
    show_edit_buttons: bool = True,
    is_head: bool = False,
    head_user_id: int = 0,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param return_to: –ö—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :param show_edit_buttons: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :param is_head: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
    :param head_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    buttons = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ KPI) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
    action_buttons = [
        InlineKeyboardButton(
            text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=ViewUserSchedule(
                user_id=user_id, return_to=return_to, head_id=head_id, context=context
            ).pack(),
        ),
        InlineKeyboardButton(
            text="üåü KPI",
            callback_data=ViewUserKPI(
                user_id=user_id, return_to=return_to, head_id=head_id, context=context
            ).pack(),
        ),
    ]
    buttons.append(action_buttons)

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è MIP –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if show_edit_buttons and context == "mip":
        from tgbot.keyboards.mip.search import EditUserMenu

        edit_buttons = [
            InlineKeyboardButton(
                text="‚úèÔ∏è –§–ò–û",
                callback_data=EditUserMenu(
                    user_id=user_id, action="edit_fullname"
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üõ°Ô∏è –†–æ–ª—å",
                callback_data=EditUserMenu(user_id=user_id, action="edit_role").pack(),
            ),
        ]
        buttons.append(edit_buttons)
    elif show_edit_buttons and context == "head":
        edit_buttons = [
            InlineKeyboardButton(
                text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=HeadUserStatusSelect(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
        buttons.append(edit_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    if is_head:
        from tgbot.keyboards.mip.search import HeadGroupMenu

        buttons.append(
            [
                InlineKeyboardButton(
                    text="üë• –ì—Ä—É–ø–ø–∞",
                    callback_data=HeadGroupMenu(head_id=head_user_id).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if return_to == "search":
        back_callback = "search" if context == "mip" else "main"
    else:
        back_callback = return_to

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_back_kb(context: str = "mip") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–∏—Å–∫–∞

    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    back_callback = "search" if context == "mip" else "main"

    buttons = [
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=MainMenu(menu=back_callback).pack()
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def head_user_status_select_kb(
    user_id: int,
    return_to: str = "search",
    head_id: int = 0,
    context: str = "head",
    current_role: int = None,
    is_trainee: bool = False,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°—Ç–∞–∂–µ—Ä/–î–µ–∂—É—Ä–Ω—ã–π) –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–°—Ç–∞–∂–µ—Ä"
    trainee_text = "‚úÖ –°—Ç–∞–∂–µ—Ä" if is_trainee else "–°—Ç–∞–∂–µ—Ä"
    buttons.append(
        [
            InlineKeyboardButton(
                text=trainee_text,
                callback_data=HeadUserStatusChange(
                    user_id=user_id,
                    status_type="trainee",
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–î–µ–∂—É—Ä–Ω—ã–π" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–ª—å 1 –∏–ª–∏ 3)
    if current_role in [1, 3]:
        duty_text = "‚úÖ –î–µ–∂—É—Ä–Ω—ã–π" if current_role == 3 else "–î–µ–∂—É—Ä–Ω—ã–π"
        buttons.append(
            [
                InlineKeyboardButton(
                    text=duty_text,
                    callback_data=HeadUserStatusChange(
                        user_id=user_id,
                        status_type="duty",
                        return_to=return_to,
                        head_id=head_id,
                        context=context,
                    ).pack(),
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚ÜôÔ∏è –ù–∞–∑–∞–¥",
                callback_data=SearchUserResult(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            ),
            InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data=MainMenu(menu="main").pack(),
            ),
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_schedule_with_month_kb(
    user_id: int,
    current_month: str,
    return_to: str = "search",
    head_id: int = 0,
    is_detailed: bool = False,
    context: str = "mip",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param current_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    :param return_to: –ö—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    :param head_id: ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    :param is_detailed: –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏ –≤–∏–¥
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (mip, head)
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
    ]

    try:
        current_month_idx = month_names.index(current_month) + 1
    except ValueError:
        current_month_idx = 1

    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    nav_buttons = []
    prev_month_idx = current_month_idx - 1 if current_month_idx > 1 else 12
    next_month_idx = current_month_idx + 1 if current_month_idx < 12 else 1

    nav_buttons.append(
        InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=ScheduleNavigation(
                action="prev",
                user_id=user_id,
                month_idx=prev_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    nav_buttons.append(
        InlineKeyboardButton(
            text=current_month,
            callback_data=ScheduleNavigation(
                action="-",
                user_id=user_id,
                month_idx=current_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    nav_buttons.append(
        InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=ScheduleNavigation(
                action="next",
                user_id=user_id,
                month_idx=next_month_idx,
                return_to=return_to,
                head_id=head_id,
                context=context,
            ).pack(),
        )
    )

    buttons.append(nav_buttons)

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ/–∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
    detail_action = "compact" if is_detailed else "detailed"
    detail_text = "üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ" if is_detailed else "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ"

    buttons.append(
        [
            InlineKeyboardButton(
                text=detail_text,
                callback_data=ScheduleNavigation(
                    action=detail_action,
                    user_id=user_id,
                    month_idx=current_month_idx,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                callback_data=SearchUserResult(
                    user_id=user_id,
                    return_to=return_to,
                    head_id=head_id,
                    context=context,
                ).pack(),
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)
