from html import escape

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo


# –•–µ–ª–ø–µ—Ä—ã
def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "stored": "üì¶",
        "review": "‚è≥",
        "used_up": "üîí",
        "canceled": "üî•",
        "rejected": "‚õî",
    }
    return status_emojis.get(status, "‚ùì")


# –§–∏–ª—å—Ç—Ä—ã
async def product_filter_getter(**kwargs):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏–æ-—Ñ–∏–ª—å—Ç—Ä–∞
    """
    base_data = await products_getter(**kwargs)
    dialog_manager = kwargs.get("dialog_manager")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –Ω–∞ '–î–æ—Å—Ç—É–ø–Ω—ã–µ')
    filter_type = dialog_manager.dialog_data.get("product_filter", "available")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–Ω–æ–µ
    if "product_filter" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["product_filter"] = "available"

    products = base_data["products"]
    user_balance = base_data["user_balance"]

    if filter_type == "available":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        filtered_products = [
            p for p in products if p[4] <= user_balance
        ]  # p[4] —ç—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    else:  # "–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"
        filtered_products = products

    return {
        "products": filtered_products,
        "user_balance": user_balance,
        "product_filter": filter_type,
    }


async def inventory_filter_getter(**kwargs):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏–æ-—Ñ–∏–ª—å—Ç—Ä–∞
    """
    base_data = await inventory_getter(**kwargs)
    dialog_manager = kwargs.get("dialog_manager")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –Ω–∞ 'all')
    filter_type = dialog_manager.dialog_data.get("purchases_filter", "all")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–Ω–æ–µ
    if "purchases_filter" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["purchases_filter"] = "all"

    products = base_data["products"]
    total_bought = base_data["total_bought"]

    if filter_type != "all":
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        filtered_products = [
            p
            for p in products
            if p[5] == filter_type  # p[5] —ç—Ç–æ status
        ]
    else:
        filtered_products = products

    return {
        "products": filtered_products,
        "total_bought": total_bought,
        "inventory_filter": filter_type,
    }


def get_position_display_name(position: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
    match position:
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
            return "–°–ø–µ—Ü"
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏":
            return "–°–ø–µ—Ü"
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "–°–ø–µ—Ü"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
            return "–í–µ–¥—É—â–∏–π"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏":
            return "–í–µ–¥—É—â–∏–π"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "–í–µ–¥—É—â–∏–π"
        case "–≠–∫—Å–ø–µ—Ä—Ç":
            return "–≠–∫—Å–ø–µ—Ä—Ç"
        case "–≠–∫—Å–ø–µ—Ä—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "–≠–∫—Å–ø–µ—Ä—Ç"
        case _:
            return position


def get_position_callback_key(position: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –¥–ª—è callback –±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    match position:
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
            return "spec"
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏":
            return "spec_ntp1"
        case "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "spec_ntp2"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
            return "lead_spec"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏":
            return "lead_spec_ntp1"
        case "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "lead_spec_ntp2"
        case "–≠–∫—Å–ø–µ—Ä—Ç":
            return "expert"
        case "–≠–∫—Å–ø–µ—Ä—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏":
            return "expert_ntp2"
        case _:
            return position.lower().replace(" ", "_")


def get_position_from_callback(callback_key: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –∫–ª—é—á—É callback"""
    match callback_key:
        case "spec":
            return "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        case "spec_ntp1":
            return "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏"
        case "spec_ntp2":
            return "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏"
        case "lead_spec":
            return "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        case "lead_spec_ntp1":
            return "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏"
        case "lead_spec_ntp2":
            return "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏"
        case "expert":
            return "–≠–∫—Å–ø–µ—Ä—Ç"
        case "expert_ntp2":
            return "–≠–∫—Å–ø–µ—Ä—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏"
        case _:
            return callback_key


async def achievements_filter_getter(**kwargs):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞
    """
    base_data = await user_achievements_getter(**kwargs)
    dialog_manager = kwargs.get("dialog_manager")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    all_achievements = base_data["achievements"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    user = kwargs.get("user")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user:
        if "–ù–¢–ü1" in user.division:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏
            allowed_positions = [
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏",
                "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏",
            ]
            achievements = [
                ach
                for ach in all_achievements
                if ach[4] in allowed_positions  # ach[4] —ç—Ç–æ position
            ]
        elif "–ù–¢–ü2" in user.division:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏
            allowed_positions = [
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏",
                "–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏",
                "–≠–∫—Å–ø–µ—Ä—Ç –≤—Ç–æ—Ä–æ–π –ª–∏–Ω–∏–∏",
            ]
            achievements = [
                ach
                for ach in all_achievements
                if ach[4] in allowed_positions  # ach[4] —ç—Ç–æ position
            ]
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = all_achievements
    else:
        achievements = all_achievements

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    positions = set()
    for achievement in achievements:
        positions.add(achievement[4])  # achievement[4] —ç—Ç–æ position

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å callback-–±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    position_radio_data = []
    for pos in list(positions):
        callback_key = get_position_callback_key(pos)
        display_name = get_position_display_name(pos)
        position_radio_data.append((callback_key, display_name))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ" –≤ –Ω–∞—á–∞–ª–æ
    position_radio_data.insert(0, ("all", "–í—Å–µ"))

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤
    period_radio_data = [
        ("all", "–í—Å–µ"),
        ("d", "–î–µ–Ω—å"),
        ("w", "–ù–µ–¥–µ–ª—è"),
        ("m", "–ú–µ—Å—è—Ü"),
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –Ω–∞ 'all')
    selected_position = dialog_manager.dialog_data.get(
        "achievement_position_filter", "all"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –Ω–∞ 'all')
    selected_period = dialog_manager.dialog_data.get("achievement_period_filter", "all")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–Ω–æ–µ
    if "achievement_position_filter" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["achievement_position_filter"] = "all"
        selected_position = "all"

    if "achievement_period_filter" not in dialog_manager.dialog_data:
        dialog_manager.dialog_data["achievement_period_filter"] = "all"
        selected_period = "all"

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if selected_position == "all":
        filtered_achievements = achievements
    else:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º callback key –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        actual_position = get_position_from_callback(selected_position)
        filtered_achievements = [
            a
            for a in achievements
            if a[4] == actual_position  # a[4] —ç—Ç–æ position
        ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
    if selected_period != "all":
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        # achievement[5] —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
        stp_repo = kwargs.get("stp_repo")
        user = kwargs.get("user")

        if stp_repo and user:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º division –∫–∞–∫ –≤ user_achievements_getter
            normalized_division = "–ù–¶–ö" if "–ù–¶–ö" in user.division else "–ù–¢–ü"
            original_data = await stp_repo.achievement.get_achievements(
                division=normalized_division
            )
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ ID
            period_map = {ach.id: ach.period for ach in original_data}

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
            filtered_achievements = [
                a
                for a in filtered_achievements
                if period_map.get(a[0]) == selected_period  # a[0] —ç—Ç–æ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            ]

    return {
        "achievements": filtered_achievements,
        "position_radio_data": position_radio_data,
        "period_radio_data": period_radio_data,
        "achievement_position_filter": selected_position,
        "achievement_period_filter": selected_period,
        "checked": selected_position,  # Explicit checked state for Position Radio
        "checked_period": selected_period,  # Explicit checked state for Period Radio
    }


async def products_getter(**kwargs):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    """
    stp_repo: MainRequestsRepo = kwargs.get("stp_repo")
    user: Employee = kwargs.get("user")

    user_balance: int = await stp_repo.transaction.get_user_balance(
        user_id=user.user_id
    )
    products = await stp_repo.product.get_products(division=user.division)

    formatted_products = []
    for product in products:
        formatted_products.append(
            (product.id, product.name, product.description, product.count, product.cost)
        )

    return {
        "products": formatted_products,
        "user_balance": user_balance,
    }


async def confirmation_getter(**kwargs):
    """
    –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    """
    dialog_manager = kwargs.get("dialog_manager")
    product_info = dialog_manager.dialog_data.get("selected_product")
    user_balance = dialog_manager.dialog_data.get("user_balance", 0)

    if not product_info:
        return {}

    balance_after_purchase = user_balance - product_info["cost"]

    return {
        "product_name": product_info["name"],
        "product_description": product_info["description"],
        "product_count": product_info["count"],
        "product_cost": product_info["cost"],
        "user_balance": user_balance,
        "balance_after_purchase": balance_after_purchase,
    }


async def success_getter(**kwargs):
    """
    –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    """
    dialog_manager = kwargs.get("dialog_manager")
    product_info = dialog_manager.dialog_data.get("selected_product")
    user_balance = dialog_manager.dialog_data.get("user_balance", 0)
    new_balance = dialog_manager.dialog_data.get("new_balance", 0)

    if not product_info:
        return {}

    return {
        "product_name": product_info["name"],
        "product_description": product_info["description"],
        "product_count": product_info["count"],
        "product_cost": product_info["cost"],
        "user_balance": user_balance,
        "new_balance": new_balance,
    }


async def achievements_getter(**kwargs):
    stp_repo: MainRequestsRepo = kwargs.get("stp_repo")

    if "division" in kwargs:
        achievements_list = await stp_repo.achievement.get_achievements(
            division=kwargs["division"]
        )
    else:
        achievements_list = await stp_repo.achievement.get_achievements()

    formatted_achievements = []
    for achievement in achievements_list:
        period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # Default value
        match achievement.period:
            case "d":
                period = "–†–∞–∑ –≤ –¥–µ–Ω—å"
            case "w":
                period = "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            case "m":
                period = "–†–∞–∑ –≤ –º–µ—Å—è—Ü"
            case "A":
                period = "–í—Ä—É—á–Ω—É—é"
            case _:
                period = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        formatted_achievements.append(
            (
                achievement.id,
                escape(achievement.name),
                achievement.reward,
                escape(achievement.description),
                achievement.position,
                period,
            )
        )

    return {
        "achievements": formatted_achievements,
    }


async def user_achievements_getter(**kwargs):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user: Employee = kwargs.get("user")

    # –ü–µ—Ä–µ–¥–∞–µ–º division –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–æ–≤—ã–π getter
    return await achievements_getter(
        division="–ù–¶–ö" if "–ù–¶–ö" in user.division else "–ù–¢–ü", **kwargs
    )


async def inventory_getter(**kwargs):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    stp_repo: MainRequestsRepo = kwargs.get("stp_repo")
    user: Employee = kwargs.get("user")

    user_products = await stp_repo.purchase.get_user_purchases_with_details(
        user_id=user.user_id
    )

    total_bought: int = len(user_products)

    formatted_products = []
    for product in user_products:
        user_product = product.user_purchase
        product_info = product.product_info

        date_str = user_product.bought_at.strftime("%d.%m.%y")
        status_emoji = get_status_emoji(user_product.status)
        usage_info = f"({product.current_usages}/{product.max_usages})"
        button_text = f"{status_emoji} {usage_info} {product_info.name} ({date_str})"

        formatted_products.append(
            (
                user_product.id,  # ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞
                button_text,  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
                product_info.name,
                product_info.description,
                product_info.cost,
                user_product.status,
                product.current_usages,
                product.max_usages,
            )
        )

    return {
        "total_bought": total_bought,
        "products": formatted_products,
    }


async def inventory_detail_getter(**kwargs):
    """
    –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    """
    dialog_manager = kwargs.get("dialog_manager")
    product_info = dialog_manager.dialog_data.get("selected_inventory_product")

    if not product_info:
        return {}

    status_names = {
        "stored": "–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
        "used_up": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "canceled": "–û—Ç–º–µ–Ω–µ–Ω",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
    }
    status_name = status_names.get(product_info["status"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
    can_use = (
        product_info["status"] == "stored"
        and product_info["current_usages"] < product_info["max_usages"]
    )

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "stored" –ò usage_count —Ä–∞–≤–µ–Ω 0 (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è)
    can_sell = product_info["status"] == "stored" and product_info["usage_count"] == 0

    # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "review" (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)
    can_cancel = product_info["status"] == "review"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    comment_text = ""
    if product_info.get("comment"):
        comment_text = f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n‚îî {product_info['comment']}"

    updated_by_text = ""
    if product_info.get("updated_by_user_id") and product_info.get("updated_at"):
        updated_by_text = f"\n\n<blockquote expandable><b>üë§ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n<b>üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {product_info['updated_at']}</blockquote>"

    return {
        "product_name": product_info["product_name"],
        "product_description": product_info["product_description"],
        "product_cost": product_info["product_cost"],
        "product_count": product_info["product_count"],
        "status_name": status_name,
        "usage_count": product_info["usage_count"],
        "bought_at": product_info["bought_at"],
        "comment_text": comment_text,
        "updated_by_text": updated_by_text,
        "can_use": can_use,
        "can_sell": can_sell,
        "can_cancel": can_cancel,
    }
