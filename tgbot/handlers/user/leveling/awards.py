import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.keyboards.mip.leveling.main import LevelingMenu
from tgbot.keyboards.user.leveling.main import (
    AwardDetailMenu,
    AwardHistoryMenu,
    AwardsMenu,
    award_detail_back_kb,
    award_history_kb,
    awards_kb,
    awards_paginated_kb,
    get_status_emoji,
)

user_leveling_awards_router = Router()
user_leveling_awards_router.message.filter(
    F.chat.type == "private",
)
user_leveling_awards_router.callback_query.filter(F.message.chat.type == "private")

logger = logging.getLogger(__name__)


@user_leveling_awards_router.callback_query(LevelingMenu.filter(F.menu == "awards"))
async def user_awards_cb(callback: CallbackQuery, stp_repo: RequestsRepo):
    await callback.message.edit_text(
        """<b>üëè –ù–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è</i>""",
        reply_markup=awards_kb(),
    )


@user_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "all"))
async def awards_all(
    callback: CallbackQuery,
    user: User,
    callback_data: AwardsMenu,
    stp_repo: RequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    page = getattr(callback_data, "page", 1)

    all_awards = await stp_repo.award.get_awards(
        division="–ù–¢–ü" if "–ù–¢–ü" in user.division else "–ù–¶–ö"
    )

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(all_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é page
    end_idx = start_idx + awards_per_page
    page_awards = all_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.cost}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.description}""")
        if award.count > 0:
            awards_list.append(f"""üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.count}""")
        awards_list.append("")

    message_text = f"""<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text, reply_markup=awards_paginated_kb(page, total_pages)
    )
    logger.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}"
    )


@user_leveling_awards_router.callback_query(AwardsMenu.filter(F.menu == "executed"))
async def awards_history(callback: CallbackQuery, stp_repo: RequestsRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_awards_with_details = await stp_repo.user_award.get_user_awards_with_details(
        user_id=callback.from_user.id
    )

    if not user_awards_with_details:
        await callback.message.edit_text(
            """<b>‚ú¥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ üôÇ

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞</i>""",
            reply_markup=award_detail_back_kb(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    total_awards = len(user_awards_with_details)
    message_text = f"""<b>‚ú¥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {total_awards}</i>
<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=award_history_kb(user_awards_with_details, current_page=1),
    )


@user_leveling_awards_router.callback_query(AwardHistoryMenu.filter())
async def awards_history_pagination(
    callback: CallbackQuery, callback_data: AwardHistoryMenu, stp_repo: RequestsRepo
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥"""
    page = callback_data.page

    user_awards_with_details = await stp_repo.user_award.get_user_awards_with_details(
        user_id=callback.from_user.id
    )

    if not user_awards_with_details:
        await callback.message.edit_text(
            """<b>‚ú¥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ üôÇ

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞</i>""",
            reply_markup=award_detail_back_kb(),
        )
        return

    total_awards = len(user_awards_with_details)
    message_text = f"""<b>‚ú¥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –∞ —Ç–∞–∫ –∂–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ

<i>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {total_awards}</i>
<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã</i>"""

    await callback.message.edit_text(
        message_text,
        reply_markup=award_history_kb(user_awards_with_details, current_page=page),
    )


@user_leveling_awards_router.callback_query(AwardDetailMenu.filter())
async def award_detail_view(
    callback: CallbackQuery, callback_data: AwardDetailMenu, stp_repo: RequestsRepo
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ"""
    user_award_id = callback_data.user_award_id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    user_award_detail = await stp_repo.user_award.get_user_award_detail(user_award_id)

    if not user_award_detail:
        await callback.message.edit_text(
            """<b>üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã</b>

–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã ‚òπ""",
            reply_markup=award_detail_back_kb(),
        )
        return

    user_award = user_award_detail.user_award
    award_info = user_award_detail.award_info

    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = get_status_emoji(user_award.status)
    status_names = {
        "waiting": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "approved": "–û–¥–æ–±—Ä–µ–Ω–∞",
        "canceled": "–û—Ç–º–µ–Ω–µ–Ω–∞",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }
    status_name = status_names.get(user_award.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö
    usage_info = f"üßÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {user_award_detail.current_usages} –∏–∑ {user_award_detail.max_usages}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = f"""<b>üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã - {award_info.name}</b>

<b>üìä –°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}
<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {award_info.cost} –±–∞–ª–ª–æ–≤
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {award_info.description}
{usage_info}

<b>üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:</b> {user_award.bought_at.strftime("%d.%m.%Y –≤ %H:%M")}"""

    if user_award.comment:
        message_text += f"\n\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {user_award.comment}"

    if user_award.approved_by_user_id:
        message_text += f"\n<b>üë§ –û–¥–æ–±—Ä–∏–ª:</b> ID {user_award.approved_by_user_id}"
        message_text += f"\n<b>üìÖ –î–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {user_award.approved_at.strftime('%d.%m.%Y –≤ %H:%M')}"

    await callback.message.edit_text(message_text, reply_markup=award_detail_back_kb())
