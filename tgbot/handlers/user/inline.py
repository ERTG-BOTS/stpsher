import logging
from typing import List

from aiogram import Router
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)

from infrastructure.database.models import Employee
from infrastructure.database.repo.STP.requests import MainRequestsRepo
from tgbot.filters.role import (
    AdministratorFilter,
    MipFilter,
    MultiRoleFilter,
    RootFilter,
    SpecialistFilter, DutyFilter,
)
from tgbot.handlers.user.schedule.main import schedule_service

logger = logging.getLogger(__name__)

user_inline_router = Router()
user_inline_router.inline_query.filter(
    MultiRoleFilter(
        SpecialistFilter(), AdministratorFilter(), MipFilter(), RootFilter(), DutyFilter()
    )
)


class InlineSearchFilter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ inline –∑–∞–ø—Ä–æ—Å–∞—Ö"""

    @staticmethod
    def parse_search_query(query: str) -> dict:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤

        –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
        - "–ò–≤–∞–Ω–æ–≤" - –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        - "div:–ù–¢–ü –ò–≤–∞–Ω–æ–≤" - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        - "role:head –ü–µ—Ç—Ä–æ–≤" - –ø–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        - "pos:–∏–Ω–∂–µ–Ω–µ—Ä" - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        """
        filters = {"name": "", "division": None, "role": None, "position": None}

        parts = query.strip().split()
        name_parts = []

        for part in parts:
            if ":" in part:
                key, value = part.split(":", 1)
                if key == "div" and value:
                    filters["division"] = value
                elif key == "role" and value:
                    if value in ["head", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"]:
                        filters["role"] = 2
                    elif value in ["admin", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
                        filters["role"] = 3
                    elif value in ["user", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"]:
                        filters["role"] = 1
                elif key == "pos" and value:
                    filters["position"] = value
            else:
                name_parts.append(part)

        filters["name"] = " ".join(name_parts)
        return filters

    @staticmethod
    async def search_users_with_filters(
        stp_repo, filters: dict, limit: int = 20
    ) -> List[Employee]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            if filters["name"]:
                users = await stp_repo.employee.get_users_by_fio_parts(
                    filters["name"], limit=50
                )
            else:
                users = await stp_repo.employee.get_users()
                users = list(users) if users else []

            if not users:
                return []

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_users = []
            for user in users:
                # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                if filters["division"] and user.division:
                    if filters["division"].lower() not in user.division.lower():
                        continue

                # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
                if filters["role"] is not None:
                    if user.role != filters["role"]:
                        continue

                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                if filters["position"] and user.position:
                    if filters["position"].lower() not in user.position.lower():
                        continue

                filtered_users.append(user)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(filtered_users) >= limit:
                    break

            return filtered_users

        except Exception as e:
            logger.error(f"Error in filtered user search: {e}")
            return []


@user_inline_router.inline_query()
async def advanced_inline_handler(
    inline_query: InlineQuery, user: Employee, stp_repo: MainRequestsRepo
):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    query_text = inline_query.query.strip()

    if not user:
        results = [
            InlineQueryResultArticle(
                id="auth_help",
                title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                description="–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è @stpsher_bot"
                ),
            )
        ]
    else:
        results = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if query_text and len(query_text) >= 2:
            search_filters = InlineSearchFilter.parse_search_query(query_text)

            try:
                # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                found_users = await InlineSearchFilter.search_users_with_filters(
                    stp_repo, search_filters, limit=15
                )

                if found_users:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    sorted_users = sorted(
                        found_users,
                        key=lambda u: (
                            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∏
                            search_filters["name"].lower() not in u.fullname.lower()
                            if search_filters["name"]
                            else False,
                            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
                            u.role != 2,
                            # –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                            u.fullname,
                        ),
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                    for found_user in sorted_users[:12]:  # –ú–∞–∫—Å–∏–º—É–º 12 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        user_head = await stp_repo.employee.get_user(
                            fullname=found_user.head
                        )
                        result_item = create_user_result_item(
                            found_user, user_head, search_filters
                        )
                        results.append(result_item)

                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                if not found_users:
                    results.append(create_no_results_item(query_text, search_filters))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
                if len(results) < 5:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    results.extend(create_filter_hints(query_text))

            except Exception as e:
                logger.error(f"Error in advanced search: {e}")
                results.append(create_error_item(e))

        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        else:
            results.extend(await create_default_commands(user, stp_repo))

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache_time = get_cache_time(query_text, results)

    await inline_query.answer(results, cache_time=cache_time, is_personal=True)


def create_user_result_item(
    user: Employee, user_head: Employee, search_filters: dict
) -> InlineQueryResultArticle:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ —ç–º–æ–¥–∑–∏
    role_info = get_role_info(user.role)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description_parts = []
    if user.division:
        description_parts.append(user.division)
    if user.position:
        description_parts.append(user.position)

    description = (
        " ‚Ä¢ ".join(description_parts) if description_parts else role_info["text"]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_parts = [f"<b>{role_info['emoji']} {user.fullname}</b>", ""]

    if user.position and user.division:
        message_parts.append(f"<b>üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.position} {user.division}")
    if user.head:
        if user_head:
            message_parts.append(
                f"<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> <a href='t.me/{user_head.username}'>{user.head}</a>"
            )
        else:
            message_parts.append(f"<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.head}")

    message_parts.append("")

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user.username:
        message_parts.append(f"<b>üì± Telegram:</b> @{user.username}")
    if user.email:
        message_parts.append(f"<b>üìß Email:</b> {user.email}")

    message_parts.append(f"\nüõ°Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {role_info['text']}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ –∫–∞–∫–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    match_info = []
    if (
        search_filters["division"]
        and user.division
        and search_filters["division"].lower() in user.division.lower()
    ):
        match_info.append(f"–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user.division}")
    if (
        search_filters["position"]
        and user.position
        and search_filters["position"].lower() in user.position.lower()
    ):
        match_info.append(f"–¥–æ–ª–∂–Ω–æ—Å—Ç—å: {user.position}")
    if search_filters["role"] is not None and user.role == search_filters["role"]:
        match_info.append(f"—Ä–æ–ª—å: {role_info['text'].lower()}")

    if match_info:
        message_parts.append("")
        message_parts.append(f"<i>üéØ –ù–∞–π–¥–µ–Ω –ø–æ: {', '.join(match_info)}</i>")

    message_text = "\n".join(message_parts)

    return InlineQueryResultArticle(
        id=f"user_{user.id}",
        title=f"{role_info['emoji']} {user.fullname}",
        description=description,
        input_message_content=InputTextMessageContent(
            message_text=message_text, parse_mode="HTML"
        ),
    )


def create_no_results_item(
    query_text: str, search_filters: dict
) -> InlineQueryResultArticle:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    filter_info = []
    if search_filters["name"]:
        filter_info.append(f"–∏–º—è: '{search_filters['name']}'")
    if search_filters["division"]:
        filter_info.append(f"–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: '{search_filters['division']}'")
    if search_filters["position"]:
        filter_info.append(f"–¥–æ–ª–∂–Ω–æ—Å—Ç—å: '{search_filters['position']}'")
    if search_filters["role"] is not None:
        role_names = {1: "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", 2: "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", 3: "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
        filter_info.append(
            f"—Ä–æ–ª—å: '{role_names.get(search_filters['role'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}'"
        )

    filter_text = ", ".join(filter_info) if filter_info else query_text

    message_parts = [
        "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
        "",
        f"<b>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b> <code>{query_text}</code>",
        f"<b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:</b> {filter_text}",
        "",
        "<b>üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏",
        "‚Ä¢ –£–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏",
        "",
        "<b>üìù –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:</b>",
        "‚Ä¢ <code>–ò–≤–∞–Ω–æ–≤</code> - –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏",
        "‚Ä¢ <code>div:–ù–¢–ü –ü–µ—Ç—Ä–æ–≤</code> - –ø–æ–∏—Å–∫ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏",
        "‚Ä¢ <code>role:head</code> - –ø–æ–∏—Å–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
    ]

    return InlineQueryResultArticle(
        id="no_users_found",
        title="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        description=f"–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {filter_text}",
        input_message_content=InputTextMessageContent(
            message_text="\n".join(message_parts), parse_mode="HTML"
        ),
    )


def create_filter_hints(query_text: str) -> List[InlineQueryResultArticle]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞"""
    hints = [
        InlineQueryResultArticle(
            id="hint_heads",
            title="üí° –ù–∞–π—Ç–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
            description="–î–æ–±–∞–≤—å role:head –∫ –∑–∞–ø—Ä–æ—Å—É",
            input_message_content=InputTextMessageContent(
                message_text=f"<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É</b>\n\n–î–æ–±–∞–≤—å <code>role:head</code> –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n<code>{query_text} role:head</code>"
            ),
        ),
        InlineQueryResultArticle(
            id="hint_division",
            title="üí° –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            description="–ò—Å–ø–æ–ª—å–∑—É–π div:–ù–¢–ü –∏–ª–∏ div:–ù–¶–ö",
            input_message_content=InputTextMessageContent(
                message_text=f"<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ø–æ–∏—Å–∫—É</b>\n\n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π:\n\n<code>{query_text} div:–ù–¢–ü</code>\n<code>{query_text} div:–ù–¶–ö</code>"
            ),
        ),
    ]

    return hints


def create_error_item(error: Exception) -> InlineQueryResultArticle:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—à–∏–±–∫–∏"""
    return InlineQueryResultArticle(
        id="search_error",
        title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
        description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        input_message_content=InputTextMessageContent(
            message_text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n<i>–ö–æ–¥ –æ—à–∏–±–∫–∏: {type(error).__name__}</i>"
        ),
    )


async def create_default_commands(
    user: Employee, stp_repo
) -> List[InlineQueryResultArticle]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    results = []

    # –ú–æ–π –≥—Ä–∞—Ñ–∏–∫
    try:
        current_month = schedule_service.get_current_month()
        schedule_text = await schedule_service.get_user_schedule_response(
            user=user, month=current_month, compact=True
        )
        if schedule_text:
            results.append(
                InlineQueryResultArticle(
                    id="schedule_option",
                    title="üìÖ –ú–æ–π –≥—Ä–∞—Ñ–∏–∫",
                    description=f"–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month}",
                    input_message_content=InputTextMessageContent(
                        message_text=schedule_text, parse_mode="HTML"
                    ),
                )
            )
    except Exception as e:
        logger.error(f"Error getting schedule: {e}")

    # –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    try:
        duties_text = await schedule_service.get_duties_response(
            division=user.division, stp_repo=stp_repo
        )
        if duties_text:
            results.append(
                InlineQueryResultArticle(
                    id="duties_option",
                    title="üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description=f"–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö {user.division}",
                    input_message_content=InputTextMessageContent(
                        message_text=duties_text, parse_mode="HTML"
                    ),
                )
            )
    except Exception as e:
        logger.error(f"Error getting duties: {e}")

    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    try:
        heads_text = await schedule_service.get_heads_response(
            division=user.division, stp_repo=stp_repo
        )
        if heads_text:
            results.append(
                InlineQueryResultArticle(
                    id="heads_option",
                    title="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    description=f"–ì—Ä–∞—Ñ–∏–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π {user.division}",
                    input_message_content=InputTextMessageContent(
                        message_text=heads_text, parse_mode="HTML"
                    ),
                )
            )
    except Exception as e:
        logger.error(f"Error getting heads: {e}")

    return results


def create_search_help_item() -> InlineQueryResultArticle:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–æ–∏—Å–∫—É"""
    help_text = """<b>üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏

<b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ <code>role:head</code> - —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
‚Ä¢ <code>role:admin</code> - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã  
‚Ä¢ <code>role:user</code> - —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
‚Ä¢ <code>div:–ù–¢–ü</code> - –ø–æ–∏—Å–∫ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ù–¢–ü
‚Ä¢ <code>div:–ù–¶–ö</code> - –ø–æ–∏—Å–∫ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ù–¶–ö
‚Ä¢ <code>pos:–∏–Ω–∂–µ–Ω–µ—Ä</code> - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ <code>–ò–≤–∞–Ω–æ–≤</code>
‚Ä¢ <code>–ü–µ—Ç—Ä role:head</code>
‚Ä¢ <code>div:–ù–¢–ü –°–∏–¥–æ—Ä–æ–≤</code>
‚Ä¢ <code>pos:–∏–Ω–∂–µ–Ω–µ—Ä div:–ù–¶–ö</code>

<b>üí° –°–æ–≤–µ—Ç:</b> –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!</b>"""

    return InlineQueryResultArticle(
        id="search_help",
        title="üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        description="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞",
        input_message_content=InputTextMessageContent(
            message_text=help_text, parse_mode="HTML"
        ),
    )


def get_role_info(role: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    roles = {
        1: {
            "emoji": "üë§",
            "text": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        },
        2: {
            "emoji": "üëë",
            "text": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        },
        3: {
            "emoji": "üëÆ‚Äç‚ôÇÔ∏è",
            "text": "–î–µ–∂—É—Ä–Ω—ã–π",
        },
        10: {
            "emoji": "‚ö°",
            "text": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        },
    }
    return roles.get(role, roles[1])


def get_cache_time(query_text: str, results: list) -> int:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    if not query_text:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ –º–∏–Ω—É—Ç—É
        return 60
    elif len(results) == 0 or any(result.id.endswith("_error") for result in results):
        # –û—à–∏–±–∫–∏ –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∫–µ—à–∏—Ä—É–µ–º
        return 0
    else:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        return 300
